declare variable $a external;
declare variable $a := 1;

declare variable $a as empty-sequence() external;
declare variable $a as empty-sequence() := 1;

declare variable $a as item() external;
declare variable $a as item()+ external;
declare variable $a as item()* external;
declare variable $a as item()? external;
declare variable $a as item() := 1;
declare variable $a as item()+ := 1;
declare variable $a as item()* := 1;
declare variable $a as item()? := 1;

declare variable $a as text() external;
declare variable $a as text()+ external;
declare variable $a as text()* external;
declare variable $a as text()? external;
declare variable $a as text() := 1;
declare variable $a as text()+ := 1;
declare variable $a as text()* := 1;
declare variable $a as text()? := 1;

declare variable $a as comment() external;
declare variable $a as comment()+ external;
declare variable $a as comment()* external;
declare variable $a as comment()? external;
declare variable $a as comment() := 1;
declare variable $a as comment()+ := 1;
declare variable $a as comment()* := 1;
declare variable $a as comment()? := 1;

declare variable $a as node() external;
declare variable $a as node()+ external;
declare variable $a as node()* external;
declare variable $a as node()? external;
declare variable $a as node() := 1;
declare variable $a as node()+ := 1;
declare variable $a as node()* := 1;
declare variable $a as node()? := 1;

declare variable $a as processing-instruction() external;
declare variable $a as processing-instruction()+ external;
declare variable $a as processing-instruction()* external;
declare variable $a as processing-instruction()? external;
declare variable $a as processing-instruction() := 1;
declare variable $a as processing-instruction()+ := 1;
declare variable $a as processing-instruction()* := 1;
declare variable $a as processing-instruction()? := 1;
declare variable $a as processing-instruction(myname) := 1;
declare variable $a as processing-instruction("string") := 1;

declare variable $a as document-node() external;
declare variable $a as document-node()+ external;
declare variable $a as document-node()* external;
declare variable $a as document-node()? external;
declare variable $a as document-node() := 1;
declare variable $a as document-node()+ := 1;
declare variable $a as document-node()* := 1;
declare variable $a as document-node()? := 1;
declare variable $a as document-node(element()) := 1;
declare variable $a as document-node(element(*)) := 1;
declare variable $a as document-node(element(*, elem)) := 1;
declare variable $a as document-node(element(*, elem:local)) := 1;
declare variable $a as document-node(element(*, elem?)) := 1;
declare variable $a as document-node(element(*, elem:local?)) := 1;
declare variable $a as document-node(element(elem)) := 1;
declare variable $a as document-node(element(elem:local)) := 1;
declare variable $a as document-node(element(elem, elem)) := 1;
declare variable $a as document-node(element(elem, elem:local)) := 1;
declare variable $a as document-node(element(elem, elem?)) := 1;
declare variable $a as document-node(element(elem, elem:local?)) := 1;
declare variable $a as document-node(schema-element(name)) := 1;
declare variable $a as document-node(schema-element(name:local)) := 1;

declare variable $a as element() external;
declare variable $a as element()+ external;
declare variable $a as element()* external;
declare variable $a as element()? external;
declare variable $a as element() := 1;
declare variable $a as element()+ := 1;
declare variable $a as element()* := 1;
declare variable $a as element()? := 1;
declare variable $a as element(*) := 1;
declare variable $a as element(*, elem) := 1;
declare variable $a as element(*, elem:local) := 1;
declare variable $a as element(*, elem?) := 1;
declare variable $a as element(*, elem:local?) := 1;
declare variable $a as element(elem) := 1;
declare variable $a as element(elem:local) := 1;
declare variable $a as element(elem, elem) := 1;
declare variable $a as element(elem, elem:local) := 1;
declare variable $a as element(elem, elem?) := 1;
declare variable $a as element(elem, elem:local?) := 1;

declare variable $a as schema-element(elem) external;
declare variable $a as schema-element(elem)+ external;
declare variable $a as schema-element(elem)* external;
declare variable $a as schema-element(elem)? external;
declare variable $a as schema-element(elem) := 1;
declare variable $a as schema-element(elem)+ := 1;
declare variable $a as schema-element(elem)* := 1;
declare variable $a as schema-element(elem)? := 1;
declare variable $a as schema-element(elem:local) := 1;

declare variable $a as attribute() external;
declare variable $a as attribute()+ external;
declare variable $a as attribute()* external;
declare variable $a as attribute()? external;
declare variable $a as attribute() := 1;
declare variable $a as attribute()+ := 1;
declare variable $a as attribute()* := 1;
declare variable $a as attribute()? := 1;
declare variable $a as attribute(*) := 1;
declare variable $a as attribute(*, attr) := 1;
declare variable $a as attribute(*, attr:local) := 1;
declare variable $a as attribute(attr) := 1;
declare variable $a as attribute(attr:local) := 1;
declare variable $a as attribute(attr, attr) := 1;
declare variable $a as attribute(attr, attr:local) := 1;

declare variable $a as schema-attribute(attr) external;
declare variable $a as schema-attribute(attr)+ external;
declare variable $a as schema-attribute(attr)* external;
declare variable $a as schema-attribute(attr)? external;
declare variable $a as schema-attribute(attr) := 1;
declare variable $a as schema-attribute(attr)+ := 1;
declare variable $a as schema-attribute(attr)* := 1;
declare variable $a as schema-attribute(attr)? := 1;
declare variable $a as schema-attribute(attr:local) := 1;