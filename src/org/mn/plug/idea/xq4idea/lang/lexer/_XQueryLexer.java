/* The following code was generated by JFlex 1.4.3 on 09/04/11 15:10 */

package org.mn.plug.idea.xq4idea.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

// this lexer follows the principles set out in http://www.w3.org/TR/xquery-xpath-parsing/

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 09/04/11 15:10 from the specification file
 * <tt>C:/Users/Matt/IdeaProjects/ideaPlugins/xq4idea/source/xq4idea/src/org/mn/plug/idea/xq4idea/lang/lexer/_XQueryLexer.flex</tt>
 */
class _XQueryLexer extends AbstractLexer implements FlexLexer, XQueryTokenTypes {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int OPTION = 8;
  public static final int _QNAME_ = 46;
  public static final int STR_START_APOS = 16;
  public static final int XQUERYVERSION = 4;
  public static final int _DECLARE_OPTION_QN = 36;
  public static final int STR_CHAR = 18;
  public static final int STR_START_QUOTE = 14;
  public static final int _DECLARE_VARIABLE = 42;
  public static final int NAME_SUFFIX = 24;
  public static final int EXPR_COMMENT = 2;
  public static final int _DECLARE = 34;
  public static final int OPERATOR = 6;
  public static final int VARNAME = 10;
  public static final int _QNAME_LOCAL = 48;
  public static final int _XQUERY_VERSION_STR = 28;
  public static final int _XQUERY_ENCODING = 30;
  public static final int _DECLARE_ORDERING_END = 40;
  public static final int DECLAREORDERING = 12;
  public static final int STR_END = 20;
  public static final int _QNAME = 44;
  public static final int _XQUERY = 26;
  public static final int YYINITIAL = 0;
  public static final int _XQUERY_ENCODING_STR = 32;
  public static final int _DECLARE_OPTION_QN_STR = 38;
  public static final int NAME_PREFIX = 22;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9,  9,  9, 10, 10, 10, 10, 11, 11, 12, 12, 13, 13, 
    14, 14, 15, 15, 16, 16, 14, 14, 14, 14, 17, 17, 18, 18, 19, 19, 
     9, 9
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\2\1\2\0\1\1\22\0\1\1\1\0\1\33\1\0\1\41"+
    "\1\0\1\0\1\34\1\43\1\42\1\0\1\5\1\0\1\13\1\3"+
    "\1\0\12\2\1\14\1\10\5\0\4\12\1\4\1\12\24\12\4\0"+
    "\1\6\1\0\1\25\1\40\1\23\1\22\1\17\1\12\1\35\1\12"+
    "\1\30\2\12\1\24\1\12\1\32\1\31\1\36\1\15\1\20\1\27"+
    "\1\37\1\16\1\26\1\12\1\11\1\21\1\12\57\0\1\44\12\0"+
    "\1\44\1\0\1\7\2\0\1\44\5\0\27\12\1\0\37\12\1\0"+
    "\72\12\2\44\13\12\2\44\10\12\1\44\65\12\1\44\104\12\11\44"+
    "\44\12\3\44\2\12\4\44\36\12\37\44\31\0\131\12\22\44\7\12"+
    "\4\0\12\44\2\45\16\0\5\44\11\0\1\44\21\0\106\7\32\0"+
    "\2\7\30\0\1\44\13\0\1\12\1\7\3\12\1\0\1\12\1\0"+
    "\24\12\1\0\54\12\1\0\7\12\3\44\1\12\1\44\1\12\1\44"+
    "\1\12\1\44\1\12\1\44\22\12\2\44\1\0\5\44\4\0\1\44"+
    "\14\12\1\44\102\12\1\44\14\12\1\44\44\12\1\0\4\7\3\0"+
    "\6\44\65\12\2\44\2\12\2\44\2\12\2\44\1\0\34\12\2\44"+
    "\10\12\2\0\2\12\6\0\20\44\41\0\46\12\2\0\1\12\7\0"+
    "\46\12\1\44\11\0\21\7\1\0\27\7\1\0\3\7\1\0\1\7"+
    "\1\0\2\7\1\0\1\7\13\0\33\12\5\0\3\12\56\0\32\12"+
    "\5\0\1\45\12\12\10\7\15\0\12\7\4\0\2\44\1\7\107\12"+
    "\2\44\5\12\1\44\17\12\1\44\4\12\1\0\1\12\17\7\2\12"+
    "\2\7\1\0\4\7\2\44\12\7\3\44\2\0\1\44\20\0\1\44"+
    "\1\0\36\44\35\0\3\44\60\0\46\44\13\0\1\44\u014f\0\3\7"+
    "\1\44\65\12\2\0\1\7\1\12\20\7\2\0\1\44\4\7\3\0"+
    "\12\12\2\7\2\0\12\7\21\0\3\7\1\0\10\12\2\0\2\12"+
    "\2\0\26\12\1\0\7\12\1\0\1\12\3\0\4\12\2\0\1\7"+
    "\1\44\7\7\2\0\2\7\2\0\3\7\11\0\1\7\4\0\2\12"+
    "\1\0\3\12\2\7\2\0\12\7\2\12\20\0\1\7\2\0\6\12"+
    "\4\0\2\12\2\0\26\12\1\0\7\12\1\0\2\12\1\0\2\12"+
    "\1\0\2\12\2\0\1\7\1\0\5\7\4\0\2\7\2\0\3\7"+
    "\13\0\4\12\1\0\1\12\7\0\12\7\2\7\3\12\14\0\3\7"+
    "\1\0\7\12\1\44\1\12\1\0\3\12\1\0\26\12\1\0\7\12"+
    "\1\0\2\12\1\0\5\12\2\0\1\7\1\12\10\7\1\0\3\7"+
    "\1\0\3\7\2\0\1\44\17\0\1\12\1\44\4\0\12\7\21\0"+
    "\3\7\1\0\10\12\2\0\2\12\2\0\26\12\1\0\7\12\1\0"+
    "\2\12\1\0\1\44\4\12\2\0\1\7\1\12\6\7\3\0\2\7"+
    "\2\0\3\7\10\0\2\7\4\0\2\12\1\0\3\12\4\0\12\7"+
    "\1\0\1\44\20\0\1\7\1\45\1\0\6\12\3\0\3\12\1\0"+
    "\4\12\3\0\2\12\1\0\1\12\1\0\2\12\3\0\2\12\3\0"+
    "\3\12\3\0\10\12\1\0\3\12\4\0\5\7\3\0\3\7\1\0"+
    "\4\7\11\0\1\7\17\0\11\7\21\0\3\7\1\0\10\12\1\0"+
    "\3\12\1\0\27\12\1\0\12\12\1\0\5\12\4\0\7\7\1\0"+
    "\3\7\1\0\4\7\7\0\2\7\11\0\2\12\4\0\12\7\22\0"+
    "\2\7\1\0\10\12\1\0\3\12\1\0\27\12\1\0\12\12\1\0"+
    "\5\12\3\0\1\44\7\7\1\0\3\7\1\0\4\7\7\0\2\7"+
    "\7\0\1\12\1\0\2\12\4\0\12\7\22\0\2\7\1\0\10\12"+
    "\1\0\3\12\1\0\27\12\1\0\20\12\4\0\6\7\2\0\3\7"+
    "\1\0\4\7\11\0\1\7\10\0\2\12\4\0\12\7\25\0\22\44"+
    "\3\0\30\44\1\0\11\44\1\0\1\44\2\0\7\44\72\0\56\12"+
    "\1\44\1\12\1\7\2\12\7\7\5\0\6\12\1\45\10\7\1\0"+
    "\12\7\47\0\2\12\1\0\1\12\2\0\2\12\1\0\1\12\2\0"+
    "\1\12\6\0\4\12\1\0\7\12\1\0\3\12\1\0\1\12\1\0"+
    "\1\12\2\0\2\12\1\0\2\12\1\44\1\12\1\7\2\12\6\7"+
    "\1\0\2\7\1\12\2\0\5\12\1\0\1\45\1\0\6\7\2\0"+
    "\12\7\2\0\2\44\42\0\1\44\27\0\2\7\6\0\12\7\13\0"+
    "\1\7\1\0\1\7\1\0\1\7\4\0\2\7\10\12\1\0\41\12"+
    "\1\44\6\0\24\7\1\0\2\7\4\45\4\0\6\7\1\0\1\7"+
    "\1\0\25\7\3\0\7\7\1\0\1\7\106\0\42\44\1\0\5\44"+
    "\1\0\2\44\45\0\6\44\112\0\46\12\12\0\47\12\2\44\7\0"+
    "\1\12\1\44\2\12\1\44\3\12\1\44\1\12\1\44\2\12\1\44"+
    "\5\12\51\44\1\12\1\44\1\12\1\44\1\12\13\44\1\12\1\44"+
    "\1\12\1\44\1\12\3\44\2\12\3\44\1\12\5\0\3\12\1\44"+
    "\1\12\1\44\1\12\1\44\1\12\1\44\1\12\3\44\2\12\3\44"+
    "\2\12\1\44\1\12\50\44\1\12\4\44\5\0\1\12\2\44\1\12"+
    "\2\44\2\12\7\44\2\12\1\44\1\12\1\44\7\12\50\44\1\12"+
    "\4\44\1\12\10\44\1\12\6\0\7\44\1\0\77\44\1\0\1\44"+
    "\1\0\4\44\2\0\7\44\1\0\1\44\1\0\4\44\2\0\47\44"+
    "\1\0\1\44\1\0\4\44\2\0\37\44\1\0\1\44\1\0\4\44"+
    "\2\0\7\44\1\0\1\44\1\0\4\44\2\0\7\44\1\0\7\44"+
    "\1\0\27\44\1\0\37\44\1\0\1\44\1\0\4\44\2\0\7\44"+
    "\1\0\47\44\1\0\23\44\105\0\125\44\14\0\u026c\44\2\0\10\44"+
    "\12\0\32\44\5\0\113\44\25\0\15\44\1\0\4\44\16\0\22\44"+
    "\16\0\22\44\16\0\15\44\1\0\3\44\17\0\64\44\43\0\1\44"+
    "\4\0\1\44\103\0\130\44\10\0\51\44\127\0\35\44\63\0\36\44"+
    "\2\0\5\44\u038b\0\154\44\224\0\234\12\4\0\132\12\6\0\26\12"+
    "\2\0\6\12\2\0\46\12\2\0\6\12\2\0\10\12\1\0\1\12"+
    "\1\0\1\12\1\0\1\12\1\0\37\12\2\0\65\12\1\0\7\12"+
    "\1\0\1\12\3\0\3\12\1\0\7\12\3\0\4\12\2\0\6\12"+
    "\4\0\15\12\5\0\3\12\1\0\7\12\164\0\1\44\15\0\1\44"+
    "\120\0\15\7\4\0\1\7\40\0\1\44\4\0\1\44\2\0\12\44"+
    "\1\0\1\44\3\0\5\44\6\0\1\44\1\0\1\12\1\0\1\44"+
    "\1\0\2\12\2\44\1\6\3\44\1\0\7\44\3\0\3\44\5\0"+
    "\5\44\66\0\3\6\u0e82\0\1\45\1\44\1\6\31\0\11\6\6\7"+
    "\1\0\5\45\5\0\2\44\4\0\124\12\2\44\2\0\2\7\2\0"+
    "\2\45\1\44\1\0\132\12\1\0\3\45\1\44\5\0\50\12\4\0"+
    "\136\44\21\0\30\44\70\0\20\44\u0200\0\u19b6\44\112\0\u51a6\12\132\0"+
    "\u048d\44\u0773\0\u2ba4\12\134\0\u0800\0\u1900\0\u012e\44\2\0\73\44\225\0"+
    "\7\44\14\0\5\44\5\0\1\44\1\0\12\44\1\0\15\44\1\0"+
    "\5\44\1\0\1\44\1\0\2\44\1\0\2\44\1\0\154\44\41\0"+
    "\u016b\44\22\0\100\44\2\0\66\44\50\0\14\44\164\0\5\44\1\0"+
    "\207\44\44\0\32\44\6\0\32\44\13\0\131\44\3\0\6\44\2\0"+
    "\6\44\2\0\6\44\2\0\3\44\41\0\2\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\24\0\1\1\1\2\1\3\1\1\3\4\1\1\3\5"+
    "\1\6\1\7\4\10\2\11\2\12\2\4\1\13\2\14"+
    "\1\4\1\15\1\4\1\16\1\17\2\4\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\0\2\4\1\27"+
    "\1\30\1\31\1\32\1\33\2\4\1\34\1\35\5\4"+
    "\1\36\1\0\33\4\1\37\7\4\1\40\1\41\1\4"+
    "\1\42\1\43\4\4\1\44\1\45\1\46\1\47";

  private static int [] zzUnpackAction() {
    int [] result = new int[127];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\46\0\114\0\162\0\230\0\276\0\344\0\u010a"+
    "\0\u0130\0\u0156\0\u017c\0\u01a2\0\u01c8\0\u01ee\0\u0214\0\u023a"+
    "\0\u0260\0\u0286\0\u02ac\0\u02d2\0\u0156\0\u02f8\0\u031e\0\u0344"+
    "\0\u036a\0\u0390\0\u03b6\0\u03dc\0\u0156\0\u0402\0\u0428\0\u0156"+
    "\0\u0156\0\u0156\0\u02f8\0\u036a\0\u03dc\0\u044e\0\u0474\0\u049a"+
    "\0\u04c0\0\u04e6\0\u050c\0\u0156\0\u0532\0\u0558\0\u057e\0\u0156"+
    "\0\u05a4\0\u0156\0\u0156\0\u05ca\0\u05f0\0\u0156\0\u0156\0\u0156"+
    "\0\u0156\0\u0156\0\u0616\0\u063c\0\u0662\0\u0688\0\u06ae\0\u0156"+
    "\0\u0156\0\u0156\0\u0156\0\u0156\0\u06d4\0\u06fa\0\u0156\0\u0156"+
    "\0\u0720\0\u0746\0\u076c\0\u0792\0\u07b8\0\u07de\0\u07de\0\u0804"+
    "\0\u082a\0\u0850\0\u0876\0\u089c\0\u08c2\0\u08e8\0\u090e\0\u0934"+
    "\0\u095a\0\u0980\0\u09a6\0\u09cc\0\u09f2\0\u0a18\0\u0a3e\0\u0a64"+
    "\0\u0a8a\0\u0ab0\0\u0ad6\0\u0afc\0\u0b22\0\u0b48\0\u0b6e\0\u0b94"+
    "\0\u0bba\0\u0be0\0\u036a\0\u0c06\0\u0c2c\0\u0c52\0\u0c78\0\u0c9e"+
    "\0\u0cc4\0\u0cea\0\u036a\0\u036a\0\u0d10\0\u036a\0\u036a\0\u0d36"+
    "\0\u0d5c\0\u0d82\0\u0da8\0\u036a\0\u036a\0\u036a\0\u036a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[127];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\25\1\26\1\27\1\30\1\31\4\25\1\32\1\31"+
    "\2\25\5\31\1\33\10\31\2\25\4\31\2\25\1\34"+
    "\2\31\14\35\1\36\26\35\1\37\2\35\1\25\1\26"+
    "\2\25\1\31\4\25\2\31\2\25\16\31\1\40\1\41"+
    "\4\31\2\25\1\34\2\31\1\42\1\43\2\42\1\44"+
    "\4\42\2\44\2\42\16\44\2\42\4\44\2\42\1\45"+
    "\2\44\1\25\1\26\2\25\1\46\1\25\1\47\2\25"+
    "\2\46\2\25\16\46\2\25\4\46\2\25\1\34\2\31"+
    "\1\25\1\26\2\25\1\50\1\25\1\51\2\25\2\50"+
    "\2\25\16\50\2\25\4\50\2\25\1\34\2\31\1\25"+
    "\1\26\2\25\1\31\4\25\2\31\2\25\1\31\1\52"+
    "\12\31\1\53\1\31\2\25\4\31\2\25\1\34\2\31"+
    "\33\54\1\55\46\54\1\56\11\54\46\0\1\25\1\26"+
    "\2\25\1\31\4\25\2\31\2\25\16\31\2\25\4\31"+
    "\2\25\1\34\2\31\1\25\1\26\2\25\1\31\4\25"+
    "\2\31\2\25\11\31\1\57\4\31\2\25\4\31\2\25"+
    "\1\34\2\31\1\25\1\26\2\25\1\31\3\25\1\60"+
    "\2\31\2\25\2\31\1\61\13\31\2\25\4\31\2\25"+
    "\1\34\2\31\1\25\1\26\2\25\1\31\4\25\2\31"+
    "\2\25\16\31\1\62\1\63\4\31\2\25\1\34\2\31"+
    "\1\25\1\26\2\25\1\31\3\25\1\60\2\31\2\25"+
    "\16\31\2\25\4\31\2\25\1\34\2\31\1\25\1\26"+
    "\2\25\1\31\4\25\2\31\2\25\11\31\1\64\2\31"+
    "\1\65\1\31\2\25\4\31\2\25\1\34\2\31\1\25"+
    "\1\26\2\25\1\31\4\25\2\31\2\25\16\31\1\66"+
    "\1\67\4\31\2\25\1\34\2\31\1\25\1\26\2\25"+
    "\1\31\4\25\2\31\2\25\16\31\2\25\4\31\1\70"+
    "\1\25\1\34\2\31\14\71\1\72\35\71\1\73\1\71"+
    "\1\73\2\71\2\73\2\71\16\73\2\71\4\73\5\71"+
    "\1\0\1\26\46\0\1\27\1\74\1\75\12\0\1\75"+
    "\30\0\1\74\47\0\1\31\4\0\2\31\2\0\16\31"+
    "\2\0\4\31\3\0\2\31\4\0\1\31\4\0\2\31"+
    "\2\0\1\76\15\31\2\0\4\31\3\0\2\31\4\0"+
    "\1\31\4\0\2\31\2\0\2\31\1\77\13\31\2\0"+
    "\4\31\3\0\2\31\14\0\1\100\73\0\1\101\17\0"+
    "\1\102\33\0\2\47\1\46\1\0\2\47\1\0\2\46"+
    "\1\47\1\103\16\46\2\0\4\46\3\0\1\31\1\46"+
    "\2\0\3\47\1\0\2\47\1\0\3\47\1\103\16\47"+
    "\2\0\4\47\4\0\1\47\2\0\2\51\1\50\1\0"+
    "\2\51\1\0\2\50\1\51\1\104\16\50\2\0\4\50"+
    "\3\0\1\31\1\50\2\0\3\51\1\0\2\51\1\0"+
    "\3\51\1\104\16\51\2\0\4\51\4\0\1\51\4\0"+
    "\1\31\4\0\2\31\2\0\15\31\1\105\2\0\4\31"+
    "\3\0\2\31\4\0\1\31\4\0\2\31\2\0\3\31"+
    "\1\106\12\31\2\0\4\31\3\0\2\31\33\0\1\107"+
    "\46\0\1\110\15\0\1\31\4\0\2\31\2\0\2\31"+
    "\1\111\13\31\2\0\4\31\3\0\2\31\4\0\1\31"+
    "\4\0\2\31\2\0\15\31\1\112\2\0\4\31\3\0"+
    "\2\31\4\0\1\31\4\0\2\31\2\0\10\31\1\113"+
    "\5\31\2\0\4\31\3\0\2\31\4\0\1\31\4\0"+
    "\2\31\2\0\3\31\1\114\12\31\2\0\1\31\1\115"+
    "\2\31\3\0\2\31\2\0\3\73\1\0\2\73\1\0"+
    "\3\73\1\0\16\73\2\0\4\73\4\0\1\73\2\0"+
    "\1\74\1\0\1\75\12\0\1\75\30\0\1\116\2\0"+
    "\1\117\5\0\1\117\36\0\1\31\4\0\2\31\2\0"+
    "\1\31\1\120\14\31\2\0\4\31\3\0\2\31\4\0"+
    "\1\31\4\0\2\31\2\0\6\31\1\121\7\31\2\0"+
    "\4\31\3\0\2\31\4\0\1\31\4\0\2\31\2\0"+
    "\14\31\1\122\1\31\2\0\4\31\3\0\2\31\4\0"+
    "\1\31\4\0\2\31\2\0\5\31\1\123\10\31\2\0"+
    "\4\31\3\0\2\31\4\0\1\31\4\0\2\31\2\0"+
    "\3\31\1\124\12\31\2\0\4\31\3\0\2\31\4\0"+
    "\1\31\4\0\2\31\2\0\6\31\1\125\7\31\2\0"+
    "\4\31\3\0\2\31\4\0\1\31\4\0\2\31\2\0"+
    "\3\31\1\126\12\31\2\0\4\31\3\0\2\31\4\0"+
    "\1\31\4\0\2\31\2\0\5\31\1\127\10\31\2\0"+
    "\4\31\3\0\2\31\4\0\1\31\4\0\2\31\2\0"+
    "\16\31\2\0\2\31\1\130\1\31\3\0\2\31\2\0"+
    "\1\116\47\0\1\31\4\0\2\31\2\0\2\31\1\131"+
    "\13\31\2\0\4\31\3\0\2\31\4\0\1\31\4\0"+
    "\2\31\2\0\7\31\1\132\6\31\2\0\4\31\3\0"+
    "\2\31\4\0\1\31\4\0\2\31\2\0\3\31\1\133"+
    "\12\31\2\0\4\31\3\0\2\31\4\0\1\31\4\0"+
    "\2\31\2\0\2\31\1\134\13\31\2\0\4\31\3\0"+
    "\2\31\4\0\1\31\4\0\2\31\2\0\12\31\1\135"+
    "\3\31\2\0\4\31\3\0\2\31\4\0\1\31\4\0"+
    "\2\31\2\0\14\31\1\136\1\31\2\0\4\31\3\0"+
    "\2\31\4\0\1\31\4\0\2\31\2\0\13\31\1\137"+
    "\2\31\2\0\4\31\3\0\2\31\4\0\1\31\4\0"+
    "\2\31\2\0\2\31\1\140\13\31\2\0\4\31\3\0"+
    "\2\31\4\0\1\31\4\0\2\31\2\0\13\31\1\141"+
    "\2\31\2\0\4\31\3\0\2\31\4\0\1\31\4\0"+
    "\2\31\2\0\3\31\1\142\12\31\2\0\4\31\3\0"+
    "\2\31\4\0\1\31\4\0\2\31\2\0\10\31\1\143"+
    "\5\31\2\0\4\31\3\0\2\31\4\0\1\31\4\0"+
    "\2\31\2\0\5\31\1\144\10\31\2\0\4\31\3\0"+
    "\2\31\4\0\1\31\4\0\2\31\2\0\3\31\1\145"+
    "\12\31\2\0\4\31\3\0\2\31\4\0\1\31\4\0"+
    "\2\31\2\0\13\31\1\146\2\31\2\0\4\31\3\0"+
    "\2\31\4\0\1\31\4\0\2\31\2\0\5\31\1\147"+
    "\10\31\2\0\4\31\3\0\2\31\4\0\1\31\4\0"+
    "\2\31\2\0\10\31\1\150\5\31\2\0\4\31\3\0"+
    "\2\31\4\0\1\31\4\0\2\31\2\0\3\31\1\151"+
    "\12\31\2\0\4\31\3\0\2\31\4\0\1\31\4\0"+
    "\2\31\2\0\14\31\1\152\1\31\2\0\4\31\3\0"+
    "\2\31\4\0\1\31\4\0\2\31\2\0\4\31\1\153"+
    "\11\31\2\0\4\31\3\0\2\31\4\0\1\31\4\0"+
    "\2\31\2\0\3\31\1\154\12\31\2\0\4\31\3\0"+
    "\2\31\4\0\1\31\4\0\2\31\2\0\2\31\1\155"+
    "\13\31\2\0\4\31\3\0\2\31\4\0\1\31\4\0"+
    "\2\31\2\0\2\31\1\156\13\31\2\0\4\31\3\0"+
    "\2\31\4\0\1\31\4\0\2\31\2\0\14\31\1\157"+
    "\1\31\2\0\4\31\3\0\2\31\4\0\1\31\4\0"+
    "\2\31\2\0\13\31\1\160\2\31\2\0\4\31\3\0"+
    "\2\31\4\0\1\31\4\0\2\31\2\0\16\31\2\0"+
    "\3\31\1\161\3\0\2\31\4\0\1\31\4\0\2\31"+
    "\2\0\13\31\1\162\2\31\2\0\4\31\3\0\2\31"+
    "\4\0\1\31\4\0\2\31\2\0\15\31\1\163\2\0"+
    "\4\31\3\0\2\31\4\0\1\31\4\0\2\31\2\0"+
    "\2\31\1\164\13\31\2\0\4\31\3\0\2\31\4\0"+
    "\1\31\4\0\2\31\2\0\3\31\1\165\12\31\2\0"+
    "\4\31\3\0\2\31\4\0\1\31\4\0\2\31\2\0"+
    "\5\31\1\166\10\31\2\0\4\31\3\0\2\31\4\0"+
    "\1\31\4\0\2\31\2\0\15\31\1\167\2\0\4\31"+
    "\3\0\2\31\4\0\1\31\4\0\2\31\2\0\15\31"+
    "\1\170\2\0\4\31\3\0\2\31\4\0\1\31\4\0"+
    "\2\31\2\0\7\31\1\171\6\31\2\0\4\31\3\0"+
    "\2\31\4\0\1\31\4\0\2\31\2\0\15\31\1\172"+
    "\2\0\4\31\3\0\2\31\4\0\1\31\4\0\2\31"+
    "\2\0\2\31\1\173\13\31\2\0\4\31\3\0\2\31"+
    "\4\0\1\31\4\0\2\31\2\0\16\31\2\0\1\174"+
    "\3\31\3\0\2\31\4\0\1\31\4\0\2\31\2\0"+
    "\2\31\1\175\13\31\2\0\4\31\3\0\2\31\4\0"+
    "\1\31\4\0\2\31\2\0\16\31\2\0\1\176\3\31"+
    "\3\0\2\31\4\0\1\31\4\0\2\31\2\0\5\31"+
    "\1\177\10\31\2\0\4\31\3\0\2\31";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3534];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\11\0\1\10\12\0\1\11\7\1\1\11\2\1\3\11"+
    "\11\1\1\11\3\1\1\11\1\1\2\11\2\1\5\11"+
    "\2\1\1\0\2\1\5\11\2\1\2\11\6\1\1\0"+
    "\60\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[127];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */


  _XQueryLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _XQueryLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1814) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 34: 
          { yybegin(_DECLARE_ORDERING_END); return KW_ORDERED;
          }
        case 40: break;
        case 6: 
          { pushState(_XQUERY_VERSION_STR); yybegin(STR_START_QUOTE); return XQ_STR_START;
          }
        case 41: break;
        case 5: 
          { return XQ_COMMENT_CHAR;
          }
        case 42: break;
        case 37: 
          { yybegin(_DECLARE_VARIABLE); return KW_VARIABLE;
          }
        case 43: break;
        case 27: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { pushState(OPERATOR); yybegin(_QNAME); return XQ_PREFIX_NAME;
          }
        case 44: break;
        case 16: 
          { pushState(_DECLARE_OPTION_QN_STR); yybegin(STR_START_QUOTE); return XQ_STR_START;
          }
        case 45: break;
        case 36: 
          { yybegin(_XQUERY_ENCODING); return KW_ENCODING;
          }
        case 46: break;
        case 29: 
          { return XQ_STR_ESCAPE_APOS;
          }
        case 47: break;
        case 24: 
          { popState(); return XQ_COMMENT_END;
          }
        case 48: break;
        case 7: 
          { pushState(_XQUERY_VERSION_STR); yybegin(STR_START_APOS); return XQ_STR_START;
          }
        case 49: break;
        case 14: 
          { pushState(_XQUERY_ENCODING_STR); yybegin(STR_START_QUOTE); return XQ_STR_START;
          }
        case 50: break;
        case 28: 
          { return XQ_STR_ESCAPE_QUOTE;
          }
        case 51: break;
        case 11: 
          { return XQ_STR_CHAR;
          }
        case 52: break;
        case 3: 
          { yybegin(OPERATOR); return XQ_INTEGER_LITERAL;
          }
        case 53: break;
        case 33: 
          { yybegin(_DECLARE); return KW_DECLARE;
          }
        case 54: break;
        case 20: 
          { yybegin(_QNAME_); return OP_COLON;
          }
        case 55: break;
        case 13: 
          { yybegin(YYINITIAL); return OP_SEPERATOR;
          }
        case 56: break;
        case 39: 
          { yybegin(_DECLARE_ORDERING_END); return KW_UNORDERED;
          }
        case 57: break;
        case 25: 
          { pushState(); return XQ_COMMENT_START;
          }
        case 58: break;
        case 23: 
          { pushState(); yybegin(EXPR_COMMENT); return XQ_COMMENT_START;
          }
        case 59: break;
        case 21: 
          { popState(); return XQ_LOCAL_NAME;
          }
        case 60: break;
        case 8: 
          { yybegin(YYINITIAL); return WHITE_SPACE;
          }
        case 61: break;
        case 31: 
          { yybegin(_XQUERY); return KW_XQUERY;
          }
        case 62: break;
        case 22: 
          { yybegin(OPERATOR); return XQ_DECIMAL_LITERAL;
          }
        case 63: break;
        case 10: 
          { yybegin(OPERATOR); return XQ_LOCAL_NAME;
          }
        case 64: break;
        case 9: 
          { yybegin(_DECLARE_OPTION_QN); return XQ_LOCAL_NAME;
          }
        case 65: break;
        case 35: 
          { yybegin(XQUERYVERSION); return KW_VERSION;
          }
        case 66: break;
        case 12: 
          { popState(); return XQ_STR_END;
          }
        case 67: break;
        case 4: 
          { return BAD_WORD;
          }
        case 68: break;
        case 1: 
          { yybegin(YYINITIAL); return BAD_CHARACTER;
          }
        case 69: break;
        case 18: 
          { yybegin(VARNAME); return OP_VARSTART;
          }
        case 70: break;
        case 26: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { pushState(_DECLARE_OPTION_QN); yybegin(_QNAME); return XQ_PREFIX_NAME;
          }
        case 71: break;
        case 19: 
          { return BAD_CHARACTER;
          }
        case 72: break;
        case 17: 
          { pushState(_DECLARE_OPTION_QN_STR); yybegin(STR_START_APOS); return XQ_STR_START;
          }
        case 73: break;
        case 32: 
          { yybegin(OPTION); return KW_OPTION;
          }
        case 74: break;
        case 15: 
          { pushState(_XQUERY_ENCODING_STR); yybegin(STR_START_APOS); return XQ_STR_START;
          }
        case 75: break;
        case 2: 
          { return WHITE_SPACE;
          }
        case 76: break;
        case 30: 
          { yybegin(OPERATOR); return XQ_DOUBLE_LITERAL;
          }
        case 77: break;
        case 38: 
          { yybegin(DECLAREORDERING); return KW_VARIABLE;
          }
        case 78: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
