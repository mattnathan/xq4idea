/* The following code was generated by JFlex 1.4.3 on 11/04/11 11:15 */

package org.mn.plug.idea.xq4idea.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

// this lexer follows the principles set out in http://www.w3.org/TR/xquery-xpath-parsing/
/**
 * Generated lexer
 */
@SuppressWarnings({"UnusedDeclaration", "UnusedAssignment", "FieldCanBeLocal", "AccessStaticViaInstance", "JavaDoc", "ConstantConditions"})

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 11/04/11 11:15 from the specification file
 * <tt>/home/matt/projects/opensource/github/xq4idea/source/xq4idea/src/org/mn/plug/idea/xq4idea/lang/lexer/_XQueryLexer.flex</tt>
 */
class _XQueryLexer extends AbstractLexer implements FlexLexer, XQueryTokenTypes {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int XML_COMMENT = 4;
  public static final int _WILDCARD_QNAME = 272;
  public static final int _IF_EXPR_THEN = 100;
  public static final int _IF_EXPR__ = 98;
  public static final int _DECLARE_DEFAULT = 28;
  public static final int _FOR_CLAUSE_VAR_POS = 196;
  public static final int _AS = 62;
  public static final int _AS_SELEM = 82;
  public static final int _PATH_EXPR = 166;
  public static final int _CLOSE_BRACE = 242;
  public static final int _XQUERY_VERSION = 16;
  public static final int _IMPORT_SCHEMA = 40;
  public static final int _WHERE_CLAUSE = 208;
  public static final int _AS_AorE = 76;
  public static final int _EXPR_LIST = 86;
  public static final int _OPEN_CURLY = 244;
  public static final int _VALIDATE_EXPR__ = 164;
  public static final int _ADD_EXPR = 138;
  public static final int _ATLIST = 56;
  public static final int NAMESPACEDECL = 8;
  public static final int _DECLARE_VARIABLE = 36;
  public static final int _TYPESWITCH_EXPR_RETURN = 130;
  public static final int _FLWOR_BODY3 = 188;
  public static final int _FLWOR_BODY2 = 186;
  public static final int _VALIDATE_EXPR_X = 160;
  public static final int _FLWOR_BODY1 = 184;
  public static final int _TYPESWITCH_EXPR = 112;
  public static final int _FOR_CLAUSE = 190;
  public static final int _INSTANCEOF_EXPR = 154;
  public static final int _XML_ATTRLIST_START = 232;
  public static final int _FOR_CLAUSE_VAR_IN = 200;
  public static final int _STEP_EXPR = 176;
  public static final int _AS_SATTR = 74;
  public static final int _LET_CLAUSE_VAR = 206;
  public static final int _MULT_EXPR = 140;
  public static final int _EMPTY_BRACES = 236;
  public static final int _AS_AorE_ = 78;
  public static final int _URILITERAL = 50;
  public static final int _DECLARE_DEFAULT_NAMESPACE = 34;
  public static final int _VALIDATE_EXPR_ = 162;
  public static final int _SEP = 252;
  public static final int _OPEN_SQUARE = 248;
  public static final int _IF_EXPR_ELSE = 102;
  public static final int _VALUE_EXPR = 156;
  public static final int _FOR_CLAUSE_VAR_POS_ = 198;
  public static final int _QUANT_EXPR_LIST = 106;
  public static final int _AS_DN = 68;
  public static final int _AS_OCC = 66;
  public static final int _COLONCOLON = 260;
  public static final int _OPEN_BRACE = 240;
  public static final int STR_START_APOS = 12;
  public static final int _ORDER_CLAUSE_LIST = 214;
  public static final int _AND_EXPR = 134;
  public static final int _FLWOR_HEAD = 182;
  public static final int _AS_PI = 70;
  public static final int _TYPESWITCH_EXPR_ = 114;
  public static final int _IMPORT_MODULE = 46;
  public static final int _IMPORT_SCHEMA_DEFAULT_ELEMENT = 44;
  public static final int _QUANT_EXPR_SATISFIES = 110;
  public static final int _TYPESWITCH_EXPR_DEFAULT_ = 120;
  public static final int STR_START_QUOTE = 10;
  public static final int _TYPESWITCH_EXPR_CASE_AS = 128;
  public static final int _STABLE_ORDER_CLAUSE = 224;
  public static final int _QUANT_EXPR = 104;
  public static final int _XML_PI_NAME = 226;
  public static final int _AS_ = 64;
  public static final int _CLOSE_SQUARE = 250;
  public static final int _DECLARE_COPYNS_ = 24;
  public static final int DECLAREORDERING = 6;
  public static final int _ORDER_CLAUSE_MODIFIER_COLLATION = 222;
  public static final int _FOR_CLAUSE_ = 192;
  public static final int _OPT_EXPR_LIST_IN_BRACE = 90;
  public static final int _TYPESWITCH_EXPR__ = 116;
  public static final int _DECLARE_DEFAULT_ORDER_EMPTY = 32;
  public static final int _ORDER_CLAUSE = 210;
  public static final int _QNAME_LOCAL = 270;
  public static final int _WILDCARD_QNAME_LOCAL = 276;
  public static final int _LET_CLAUSE_ = 204;
  public static final int _INTERSECT_EXPR = 144;
  public static final int _STRINGLITERAL = 52;
  public static final int _QNAME_ = 268;
  public static final int _NODE_TEST = 178;
  public static final int _MODULE = 18;
  public static final int _AS_AorE__ = 80;
  public static final int _DECLARE_DEFAULT_ORDER = 30;
  public static final int _DECLARE = 20;
  public static final int _PREDICATE_LIST = 180;
  public static final int YYINITIAL = 0;
  public static final int _EMPTY_BRACES_ = 238;
  public static final int _RANGE_EXPR = 136;
  public static final int _COLON = 258;
  public static final int _EXPR_LIST_OR_RBRACE = 92;
  public static final int _EXPR_SINGLE = 84;
  public static final int _STAR = 256;
  public static final int _VALIDATE_EXPR = 158;
  public static final int _ATLIST_ = 58;
  public static final int _LET_CLAUSE = 202;
  public static final int _QNAME = 266;
  public static final int _ORDER_CLAUSE_MODIFIER = 216;
  public static final int _PARENTHESIZED_EXPR = 172;
  public static final int _TYPESWITCH_EXPR_DEFAULT = 118;
  public static final int _IMPORT_SCHEMA_DEFAULT = 42;
  public static final int _XML_PI_END = 230;
  public static final int _TYPESWITCH_EXPR_CASE = 122;
  public static final int _NCNAME = 264;
  public static final int _TYPESWITCH_EXPR_CASE_ = 126;
  public static final int _AS_ATTR = 72;
  public static final int _FORWARD_STEP = 174;
  public static final int _IMPORT = 38;
  public static final int _ORDER_CLAUSE_MODIFIER_EMPTY = 218;
  public static final int _XQUERY = 14;
  public static final int _PRESERVE_OR_STRIP = 48;
  public static final int _ORDER_CLAUSE_BY = 212;
  public static final int _OR_EXPR = 132;
  public static final int _PRIMARY_EXPR = 170;
  public static final int _CASTABLE_EXPR = 150;
  public static final int _VARNAME = 254;
  public static final int _TREAT_EXPR = 148;
  public static final int _UNION_EXPR = 142;
  public static final int _CLOSE_CURLY = 246;
  public static final int _ORDER_CLAUSE_MODIFIER_EMPTY_ = 220;
  public static final int _QUANT_EXPR_IN = 108;
  public static final int _EXPR_LIST_IN_CURLY = 88;
  public static final int EXPR_COMMENT = 2;
  public static final int _INSTANCE_OF_EXPR = 146;
  public static final int _NAMESPACEDECL_ = 54;
  public static final int _PARAM = 60;
  public static final int _IF_EXPR_ = 96;
  public static final int _XML_ATTR_NAME = 234;
  public static final int _FOR_CLAUSE_VAR = 194;
  public static final int _EQUALS = 262;
  public static final int _IF_EXPR = 94;
  public static final int _DECLARE_COPYNS = 22;
  public static final int _DECLARE_COPYNS__ = 26;
  public static final int _XML_PI_CONTENT = 228;
  public static final int _CAST_EXPR = 152;
  public static final int _TYPESWITCH_EXPR_CASE2 = 124;
  public static final int _FILTER_EXPR = 168;
  public static final int _WILDCARD_QNAME_ = 274;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 
    24, 24, 25, 25, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 30, 
    31, 31, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 36, 36, 37, 37, 
    38, 38, 35, 35, 39, 39, 40, 40, 41, 41, 42, 42, 43, 43, 44, 44, 
    45, 45, 46, 46, 47, 47, 48, 48, 49, 49, 50, 50, 51, 51, 52, 52, 
    53, 53, 54, 54, 55, 55, 56, 56, 57, 57, 58, 58, 59, 59, 60, 60, 
    61, 61, 62, 62, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 
    35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 63, 63, 35, 35, 35, 35, 
    64, 64, 41, 41, 35, 35, 35, 35, 65, 65, 35, 35, 35, 35, 35, 35, 
    66, 66, 67, 67, 68, 68, 69, 69, 70, 70, 71, 71, 72, 72, 73, 73, 
    74, 74, 35, 35, 75, 75, 35, 35, 76, 76, 77, 77, 78, 78, 79, 79, 
    80, 80, 81, 81, 82, 82, 83, 83, 84, 84, 85, 85, 86, 86, 87, 87, 
    88, 88, 89, 89, 90, 90, 91, 91, 92, 92, 93, 93, 94, 94, 95, 95, 
    96, 96, 95, 95, 97, 97, 98, 98, 35, 35, 99, 99, 100, 100, 101, 101, 
    102, 102, 103, 103, 104, 104, 105, 105, 106, 106, 107, 107, 108, 108, 109, 109, 
    110, 110, 111, 111, 112, 112
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\2\1\2\0\1\1\22\0\1\1\1\62\1\51\1\0\1\47"+
    "\1\0\1\0\1\52\1\55\1\53\1\17\1\5\1\45\1\13\1\3"+
    "\1\56\12\2\1\14\1\10\1\61\1\44\1\65\1\50\1\63\4\12"+
    "\1\4\1\12\24\12\1\64\1\0\1\67\1\0\1\12\1\0\1\30"+
    "\1\42\1\26\1\25\1\22\1\43\1\41\1\46\1\33\2\12\1\27"+
    "\1\31\1\40\1\32\1\34\1\20\1\23\1\37\1\35\1\21\1\36"+
    "\1\54\1\11\1\24\1\12\1\57\1\0\1\66\1\60\53\0\1\15"+
    "\12\0\1\15\1\0\1\7\2\0\1\15\5\0\27\12\1\0\37\12"+
    "\1\0\72\12\2\15\13\12\2\15\10\12\1\15\65\12\1\15\104\12"+
    "\11\15\44\12\3\15\2\12\4\15\36\12\37\15\31\0\131\12\22\15"+
    "\7\12\4\0\12\15\2\16\16\0\5\15\11\0\1\15\21\0\106\7"+
    "\32\0\2\7\30\0\1\15\13\0\1\12\1\7\3\12\1\0\1\12"+
    "\1\0\24\12\1\0\54\12\1\0\7\12\3\15\1\12\1\15\1\12"+
    "\1\15\1\12\1\15\1\12\1\15\22\12\2\15\1\0\5\15\4\0"+
    "\1\15\14\12\1\15\102\12\1\15\14\12\1\15\44\12\1\0\4\7"+
    "\3\0\6\15\65\12\2\15\2\12\2\15\2\12\2\15\1\0\34\12"+
    "\2\15\10\12\2\0\2\12\6\0\20\15\41\0\46\12\2\0\1\12"+
    "\7\0\46\12\1\15\11\0\21\7\1\0\27\7\1\0\3\7\1\0"+
    "\1\7\1\0\2\7\1\0\1\7\13\0\33\12\5\0\3\12\56\0"+
    "\32\12\5\0\1\16\12\12\10\7\15\0\12\7\4\0\2\15\1\7"+
    "\107\12\2\15\5\12\1\15\17\12\1\15\4\12\1\0\1\12\17\7"+
    "\2\12\2\7\1\0\4\7\2\15\12\7\3\15\2\0\1\15\20\0"+
    "\1\15\1\0\36\15\35\0\3\15\60\0\46\15\13\0\1\15\u014f\0"+
    "\3\7\1\15\65\12\2\0\1\7\1\12\20\7\2\0\1\15\4\7"+
    "\3\0\12\12\2\7\2\0\12\7\21\0\3\7\1\0\10\12\2\0"+
    "\2\12\2\0\26\12\1\0\7\12\1\0\1\12\3\0\4\12\2\0"+
    "\1\7\1\15\7\7\2\0\2\7\2\0\3\7\11\0\1\7\4\0"+
    "\2\12\1\0\3\12\2\7\2\0\12\7\2\12\20\0\1\7\2\0"+
    "\6\12\4\0\2\12\2\0\26\12\1\0\7\12\1\0\2\12\1\0"+
    "\2\12\1\0\2\12\2\0\1\7\1\0\5\7\4\0\2\7\2\0"+
    "\3\7\13\0\4\12\1\0\1\12\7\0\12\7\2\7\3\12\14\0"+
    "\3\7\1\0\7\12\1\15\1\12\1\0\3\12\1\0\26\12\1\0"+
    "\7\12\1\0\2\12\1\0\5\12\2\0\1\7\1\12\10\7\1\0"+
    "\3\7\1\0\3\7\2\0\1\15\17\0\1\12\1\15\4\0\12\7"+
    "\21\0\3\7\1\0\10\12\2\0\2\12\2\0\26\12\1\0\7\12"+
    "\1\0\2\12\1\0\1\15\4\12\2\0\1\7\1\12\6\7\3\0"+
    "\2\7\2\0\3\7\10\0\2\7\4\0\2\12\1\0\3\12\4\0"+
    "\12\7\1\0\1\15\20\0\1\7\1\16\1\0\6\12\3\0\3\12"+
    "\1\0\4\12\3\0\2\12\1\0\1\12\1\0\2\12\3\0\2\12"+
    "\3\0\3\12\3\0\10\12\1\0\3\12\4\0\5\7\3\0\3\7"+
    "\1\0\4\7\11\0\1\7\17\0\11\7\21\0\3\7\1\0\10\12"+
    "\1\0\3\12\1\0\27\12\1\0\12\12\1\0\5\12\4\0\7\7"+
    "\1\0\3\7\1\0\4\7\7\0\2\7\11\0\2\12\4\0\12\7"+
    "\22\0\2\7\1\0\10\12\1\0\3\12\1\0\27\12\1\0\12\12"+
    "\1\0\5\12\3\0\1\15\7\7\1\0\3\7\1\0\4\7\7\0"+
    "\2\7\7\0\1\12\1\0\2\12\4\0\12\7\22\0\2\7\1\0"+
    "\10\12\1\0\3\12\1\0\27\12\1\0\20\12\4\0\6\7\2\0"+
    "\3\7\1\0\4\7\11\0\1\7\10\0\2\12\4\0\12\7\25\0"+
    "\22\15\3\0\30\15\1\0\11\15\1\0\1\15\2\0\7\15\72\0"+
    "\56\12\1\15\1\12\1\7\2\12\7\7\5\0\6\12\1\16\10\7"+
    "\1\0\12\7\47\0\2\12\1\0\1\12\2\0\2\12\1\0\1\12"+
    "\2\0\1\12\6\0\4\12\1\0\7\12\1\0\3\12\1\0\1\12"+
    "\1\0\1\12\2\0\2\12\1\0\2\12\1\15\1\12\1\7\2\12"+
    "\6\7\1\0\2\7\1\12\2\0\5\12\1\0\1\16\1\0\6\7"+
    "\2\0\12\7\2\0\2\15\42\0\1\15\27\0\2\7\6\0\12\7"+
    "\13\0\1\7\1\0\1\7\1\0\1\7\4\0\2\7\10\12\1\0"+
    "\41\12\1\15\6\0\24\7\1\0\2\7\4\16\4\0\6\7\1\0"+
    "\1\7\1\0\25\7\3\0\7\7\1\0\1\7\106\0\42\15\1\0"+
    "\5\15\1\0\2\15\45\0\6\15\112\0\46\12\12\0\47\12\2\15"+
    "\7\0\1\12\1\15\2\12\1\15\3\12\1\15\1\12\1\15\2\12"+
    "\1\15\5\12\51\15\1\12\1\15\1\12\1\15\1\12\13\15\1\12"+
    "\1\15\1\12\1\15\1\12\3\15\2\12\3\15\1\12\5\0\3\12"+
    "\1\15\1\12\1\15\1\12\1\15\1\12\1\15\1\12\3\15\2\12"+
    "\3\15\2\12\1\15\1\12\50\15\1\12\4\15\5\0\1\12\2\15"+
    "\1\12\2\15\2\12\7\15\2\12\1\15\1\12\1\15\7\12\50\15"+
    "\1\12\4\15\1\12\10\15\1\12\6\0\7\15\1\0\77\15\1\0"+
    "\1\15\1\0\4\15\2\0\7\15\1\0\1\15\1\0\4\15\2\0"+
    "\47\15\1\0\1\15\1\0\4\15\2\0\37\15\1\0\1\15\1\0"+
    "\4\15\2\0\7\15\1\0\1\15\1\0\4\15\2\0\7\15\1\0"+
    "\7\15\1\0\27\15\1\0\37\15\1\0\1\15\1\0\4\15\2\0"+
    "\7\15\1\0\47\15\1\0\23\15\105\0\125\15\14\0\u026c\15\2\0"+
    "\10\15\12\0\32\15\5\0\113\15\25\0\15\15\1\0\4\15\16\0"+
    "\22\15\16\0\22\15\16\0\15\15\1\0\3\15\17\0\64\15\43\0"+
    "\1\15\4\0\1\15\103\0\130\15\10\0\51\15\127\0\35\15\63\0"+
    "\36\15\2\0\5\15\u038b\0\154\15\224\0\234\12\4\0\132\12\6\0"+
    "\26\12\2\0\6\12\2\0\46\12\2\0\6\12\2\0\10\12\1\0"+
    "\1\12\1\0\1\12\1\0\1\12\1\0\37\12\2\0\65\12\1\0"+
    "\7\12\1\0\1\12\3\0\3\12\1\0\7\12\3\0\4\12\2\0"+
    "\6\12\4\0\15\12\5\0\3\12\1\0\7\12\164\0\1\15\15\0"+
    "\1\15\120\0\15\7\4\0\1\7\40\0\1\15\4\0\1\15\2\0"+
    "\12\15\1\0\1\15\3\0\5\15\6\0\1\15\1\0\1\12\1\0"+
    "\1\15\1\0\2\12\2\15\1\6\3\15\1\0\7\15\3\0\3\15"+
    "\5\0\5\15\66\0\3\6\u0e82\0\1\16\1\15\1\6\31\0\11\6"+
    "\6\7\1\0\5\16\5\0\2\15\4\0\124\12\2\15\2\0\2\7"+
    "\2\0\2\16\1\15\1\0\132\12\1\0\3\16\1\15\5\0\50\12"+
    "\4\0\136\15\21\0\30\15\70\0\20\15\u0200\0\u19b6\15\112\0\u51a6\12"+
    "\132\0\u048d\15\u0773\0\u2ba4\12\134\0\u0800\0\u1900\0\u012e\15\2\0\73\15"+
    "\225\0\7\15\14\0\5\15\5\0\1\15\1\0\12\15\1\0\15\15"+
    "\1\0\5\15\1\0\1\15\1\0\2\15\1\0\2\15\1\0\154\15"+
    "\41\0\u016b\15\22\0\100\15\2\0\66\15\50\0\14\15\164\0\5\15"+
    "\1\0\207\15\44\0\32\15\6\0\32\15\13\0\131\15\3\0\6\15"+
    "\2\0\6\15\2\0\6\15\2\0\3\15\41\0\2\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\161\0\1\1\1\2\1\3\6\1\3\4\1\5\1\6"+
    "\2\1\1\7\1\10\2\11\1\1\1\12\12\1\1\13"+
    "\24\1\1\14\1\15\1\16\2\17\1\20\1\21\1\17"+
    "\13\22\1\23\1\24\1\25\1\26\2\1\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\10\36\1\37\1\40"+
    "\1\37\1\41\1\42\1\43\1\44\1\1\1\45\1\46"+
    "\4\1\1\47\3\1\1\50\1\51\1\1\1\52\1\53"+
    "\1\1\1\54\1\55\2\1\2\56\1\57\1\60\2\56"+
    "\1\61\2\1\1\62\1\63\1\64\1\65\11\63\1\66"+
    "\1\67\1\70\1\63\1\71\1\72\1\25\12\72\1\17"+
    "\1\73\6\1\1\74\1\17\2\1\1\75\3\1\1\76"+
    "\4\77\3\100\2\1\1\37\1\1\1\6\2\101\1\6"+
    "\2\102\1\1\1\17\1\103\1\104\1\105\1\106\1\107"+
    "\1\110\1\111\1\112\1\113\1\1\1\114\1\115\1\116"+
    "\1\117\1\120\2\116\1\1\1\121\1\122\5\0\1\123"+
    "\1\124\1\125\3\0\1\126\1\127\27\0\1\130\11\0"+
    "\1\131\1\132\1\0\12\22\5\0\1\133\3\0\1\134"+
    "\4\0\1\135\4\0\1\132\2\0\1\136\2\0\1\137"+
    "\1\0\1\140\1\141\1\0\12\141\1\142\3\0\12\72"+
    "\4\0\1\143\1\144\3\0\1\145\7\0\2\101\1\146"+
    "\1\0\1\147\1\150\1\151\1\152\1\153\5\0\1\154"+
    "\43\0\13\22\2\0\1\32\1\0\1\155\2\0\1\156"+
    "\12\0\1\157\1\0\1\160\1\0\13\141\1\0\14\72"+
    "\3\0\1\161\1\162\11\0\1\163\1\104\47\0\4\22"+
    "\1\164\1\22\1\165\1\166\1\22\1\167\4\0\1\170"+
    "\1\171\1\172\1\0\1\173\3\0\1\174\3\0\10\141"+
    "\1\175\1\141\1\176\4\72\1\164\1\72\1\165\1\166"+
    "\1\72\1\167\44\0\1\177\1\0\1\200\1\201\12\0"+
    "\1\202\6\22\3\0\1\203\6\0\2\141\1\204\6\141"+
    "\6\72\1\205\1\0\1\206\1\207\1\210\2\0\1\211"+
    "\1\212\3\0\1\213\1\0\1\214\1\215\11\0\1\216"+
    "\16\0\1\217\1\220\5\0\6\22\6\0\1\221\1\0"+
    "\1\222\7\141\6\72\4\0\1\223\1\224\1\0\1\225"+
    "\1\226\2\0\1\227\11\0\1\230\1\0\1\231\5\0"+
    "\1\232\1\0\1\233\2\0\1\234\1\22\1\235\3\22"+
    "\1\236\4\0\1\237\1\0\4\141\1\240\2\141\1\234"+
    "\1\72\1\235\3\72\5\0\1\241\3\0\1\242\1\243"+
    "\1\0\1\244\1\0\1\245\3\0\1\246\1\247\1\0"+
    "\1\250\2\0\1\251\5\22\4\0\1\252\3\141\1\253"+
    "\2\141\5\72\2\0\1\254\1\0\1\255\1\256\2\0"+
    "\1\257\3\0\1\260\1\261\1\262\1\263\1\22\1\264"+
    "\3\22\2\0\1\265\1\0\1\266\1\141\1\267\2\141"+
    "\1\270\1\72\1\264\3\72\1\0\1\271\1\272\4\0"+
    "\1\273\4\22\1\0\1\274\1\275\1\141\1\175\1\141"+
    "\4\72\1\276\3\0\1\277\4\22\1\0\3\141\4\72"+
    "\1\0\1\300\1\0\4\22\1\0\3\141\4\72\2\0"+
    "\1\301\3\22\1\0\3\141\1\301\3\72\1\0\1\302"+
    "\1\22\1\303\1\22\1\304\3\141\1\72\1\303\1\72"+
    "\1\305\2\22\3\141\2\72\1\22\1\306\1\307\2\141"+
    "\1\72\1\306\1\22\1\141\1\310\1\72\1\22\1\72"+
    "\1\22\1\72\1\22\1\72\1\22\1\72\2\311";

  private static int [] zzUnpackAction() {
    int [] result = new int[1076];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\u0118\0\u0150\0\u0188"+
    "\0\u01c0\0\u01f8\0\u0230\0\u0268\0\u02a0\0\u02d8\0\u0310\0\u0348"+
    "\0\u0380\0\u03b8\0\u03f0\0\u0428\0\u0460\0\u0498\0\u04d0\0\u0508"+
    "\0\u0540\0\u0578\0\u05b0\0\u05e8\0\u0620\0\u0658\0\u0690\0\u06c8"+
    "\0\u0700\0\u0738\0\u0770\0\u07a8\0\u07e0\0\u0818\0\u0850\0\u0888"+
    "\0\u08c0\0\u08f8\0\u0930\0\u0968\0\u09a0\0\u09d8\0\u0a10\0\u0a48"+
    "\0\u0a80\0\u0ab8\0\u0af0\0\u0b28\0\u0b60\0\u0b98\0\u0bd0\0\u0c08"+
    "\0\u0c40\0\u0c78\0\u0cb0\0\u0ce8\0\u0d20\0\u0d58\0\u0d90\0\u0dc8"+
    "\0\u0e00\0\u0e38\0\u0e70\0\u0ea8\0\u0ee0\0\u0f18\0\u0f50\0\u0f88"+
    "\0\u0fc0\0\u0ff8\0\u1030\0\u1068\0\u10a0\0\u10d8\0\u1110\0\u1148"+
    "\0\u1180\0\u11b8\0\u11f0\0\u1228\0\u1260\0\u1298\0\u12d0\0\u1308"+
    "\0\u1340\0\u1378\0\u13b0\0\u13e8\0\u1420\0\u1458\0\u1490\0\u14c8"+
    "\0\u1500\0\u1538\0\u1570\0\u15a8\0\u15e0\0\u1618\0\u1650\0\u1688"+
    "\0\u16c0\0\u16f8\0\u1730\0\u1768\0\u17a0\0\u17d8\0\u1810\0\u1848"+
    "\0\u1880\0\u18b8\0\u18f0\0\u1928\0\u1960\0\u1998\0\u19d0\0\u1a08"+
    "\0\u1a40\0\u1a78\0\u18b8\0\u1ab0\0\u1ae8\0\u18b8\0\u1b20\0\u1b58"+
    "\0\u1b90\0\u1bc8\0\u18b8\0\u1c00\0\u1c38\0\u1c70\0\u18b8\0\u1ca8"+
    "\0\u1ce0\0\u1d18\0\u1d50\0\u1d88\0\u1dc0\0\u1df8\0\u1e30\0\u1e68"+
    "\0\u1ea0\0\u18b8\0\u1ed8\0\u1f10\0\u1f48\0\u1f80\0\u1fb8\0\u1ff0"+
    "\0\u2028\0\u2060\0\u2098\0\u20d0\0\u2108\0\u2140\0\u2178\0\u21b0"+
    "\0\u21e8\0\u2220\0\u2258\0\u2290\0\u22c8\0\u2300\0\u18b8\0\u18b8"+
    "\0\u18b8\0\u2338\0\u2370\0\u2338\0\u18b8\0\u23a8\0\u23e0\0\u2418"+
    "\0\u2450\0\u2488\0\u24c0\0\u24f8\0\u2530\0\u2568\0\u25a0\0\u25d8"+
    "\0\u2610\0\u18b8\0\u18b8\0\u18b8\0\u18b8\0\u2648\0\u2680\0\u18b8"+
    "\0\u26b8\0\u18b8\0\u26f0\0\u18b8\0\u18b8\0\u18b8\0\u18b8\0\u2728"+
    "\0\u2760\0\u2798\0\u27d0\0\u2808\0\u2840\0\u1a78\0\u18b8\0\u18b8"+
    "\0\u1a78\0\u18b8\0\u1a78\0\u2878\0\u18b8\0\u28b0\0\u1a78\0\u18b8"+
    "\0\u28e8\0\u2920\0\u2958\0\u2990\0\u18b8\0\u29c8\0\u2a00\0\u2a38"+
    "\0\u1a78\0\u18b8\0\u2a70\0\u2aa8\0\u18b8\0\u2ae0\0\u2b18\0\u18b8"+
    "\0\u2b50\0\u2b88\0\u18b8\0\u18f0\0\u18b8\0\u18b8\0\u2bc0\0\u1a78"+
    "\0\u2bf8\0\u2c30\0\u2c68\0\u18b8\0\u18b8\0\u2ca0\0\u2cd8\0\u2d10"+
    "\0\u2d48\0\u2d80\0\u2db8\0\u2df0\0\u2e28\0\u2e60\0\u2e98\0\u2ed0"+
    "\0\u18b8\0\u18b8\0\u1a78\0\u2f08\0\u18b8\0\u2f40\0\u2f78\0\u2fb0"+
    "\0\u2fe8\0\u3020\0\u3058\0\u3090\0\u30c8\0\u3100\0\u3138\0\u3170"+
    "\0\u31a8\0\u31e0\0\u18b8\0\u2760\0\u3218\0\u3250\0\u2840\0\u3288"+
    "\0\u32c0\0\u2338\0\u32f8\0\u3330\0\u3368\0\u2338\0\u33a0\0\u33d8"+
    "\0\u3410\0\u18b8\0\u18b8\0\u3448\0\u3480\0\u1a78\0\u18b8\0\u34b8"+
    "\0\u1a78\0\u34f0\0\u3528\0\u3560\0\u3598\0\u18b8\0\u35d0\0\u3608"+
    "\0\u3640\0\u18b8\0\u3640\0\u3678\0\u18b8\0\u36b0\0\u36e8\0\u1a78"+
    "\0\u1a78\0\u18b8\0\u18b8\0\u18b8\0\u18b8\0\u18b8\0\u3720\0\u18b8"+
    "\0\u3758\0\u3790\0\u18b8\0\u18b8\0\u37c8\0\u3800\0\u3838\0\u18b8"+
    "\0\u3870\0\u38a8\0\u38e0\0\u3918\0\u3950\0\u3988\0\u18b8\0\u18b8"+
    "\0\u18b8\0\u39c0\0\u39f8\0\u3a30\0\u18b8\0\u18b8\0\u3a68\0\u3aa0"+
    "\0\u3ad8\0\u3b10\0\u3b48\0\u3b80\0\u3bb8\0\u3bf0\0\u3c28\0\u3c60"+
    "\0\u3c98\0\u3cd0\0\u3d08\0\u3d40\0\u3d78\0\u3db0\0\u3de8\0\u3e20"+
    "\0\u3e58\0\u3e90\0\u3ec8\0\u3f00\0\u3f38\0\u18b8\0\u3f70\0\u3fa8"+
    "\0\u3fe0\0\u4018\0\u4050\0\u4088\0\u40c0\0\u40f8\0\u4130\0\u2338"+
    "\0\u2338\0\u4168\0\u41a0\0\u41d8\0\u4210\0\u4248\0\u4280\0\u42b8"+
    "\0\u42f0\0\u4328\0\u4360\0\u4398\0\u43d0\0\u4408\0\u4440\0\u4478"+
    "\0\u44b0\0\u18b8\0\u44e8\0\u4520\0\u4558\0\u18b8\0\u4590\0\u45c8"+
    "\0\u4600\0\u4638\0\u18b8\0\u4670\0\u46a8\0\u46e0\0\u4718\0\u18b8"+
    "\0\u4750\0\u4788\0\u18b8\0\u47c0\0\u47f8\0\u4830\0\u4868\0\u18b8"+
    "\0\u2d10\0\u48a0\0\u48d8\0\u4910\0\u4948\0\u4980\0\u49b8\0\u49f0"+
    "\0\u4a28\0\u4a60\0\u4a98\0\u4ad0\0\u18b8\0\u4b08\0\u4b40\0\u4b78"+
    "\0\u4bb0\0\u4be8\0\u4c20\0\u4c58\0\u4c90\0\u4cc8\0\u4d00\0\u4d38"+
    "\0\u4d70\0\u4da8\0\u4de0\0\u4e18\0\u4e50\0\u4e88\0\u2338\0\u18b8"+
    "\0\u4ec0\0\u4ef8\0\u4f30\0\u18b8\0\u4f68\0\u4fa0\0\u4fd8\0\u5010"+
    "\0\u5048\0\u5080\0\u50b8\0\u50f0\0\u5128\0\u18b8\0\u5160\0\u18b8"+
    "\0\u18b8\0\u18b8\0\u18b8\0\u5198\0\u5198\0\u51d0\0\u5208\0\u5240"+
    "\0\u5278\0\u18b8\0\u52b0\0\u52e8\0\u5320\0\u5358\0\u5390\0\u53c8"+
    "\0\u5400\0\u5438\0\u5470\0\u54a8\0\u54e0\0\u5518\0\u5550\0\u5588"+
    "\0\u55c0\0\u55f8\0\u5630\0\u5668\0\u56a0\0\u56d8\0\u5710\0\u5748"+
    "\0\u5780\0\u57b8\0\u57f0\0\u5828\0\u5860\0\u5898\0\u58d0\0\u5908"+
    "\0\u5940\0\u5978\0\u59b0\0\u59e8\0\u5a20\0\u5a58\0\u5a90\0\u5ac8"+
    "\0\u5b00\0\u5b38\0\u5b70\0\u5ba8\0\u5be0\0\u5c18\0\u5c50\0\u5c88"+
    "\0\u5cc0\0\u5cf8\0\u5d30\0\u5d68\0\u18b8\0\u5da0\0\u5dd8\0\u18b8"+
    "\0\u5e10\0\u5e48\0\u5e80\0\u5eb8\0\u5ef0\0\u5f28\0\u5f60\0\u5f98"+
    "\0\u5fd0\0\u6008\0\u18b8\0\u6040\0\u6078\0\u6078\0\u60b0\0\u60e8"+
    "\0\u6120\0\u6158\0\u6190\0\u61c8\0\u6200\0\u6238\0\u6270\0\u62a8"+
    "\0\u62e0\0\u6318\0\u6350\0\u18b8\0\u6388\0\u63c0\0\u63f8\0\u6430"+
    "\0\u6468\0\u64a0\0\u64d8\0\u6510\0\u6548\0\u6580\0\u65b8\0\u65f0"+
    "\0\u6628\0\u18b8\0\u18b8\0\u6660\0\u6698\0\u66d0\0\u6708\0\u6740"+
    "\0\u6778\0\u67b0\0\u67e8\0\u6820\0\u35d0\0\u6858\0\u6890\0\u68c8"+
    "\0\u6900\0\u6938\0\u6970\0\u69a8\0\u69e0\0\u6a18\0\u6a50\0\u6a88"+
    "\0\u6ac0\0\u6af8\0\u6b30\0\u6b68\0\u6ba0\0\u6bd8\0\u6c10\0\u6c48"+
    "\0\u6c80\0\u6cb8\0\u6cf0\0\u6d28\0\u6d60\0\u6d98\0\u6dd0\0\u6e08"+
    "\0\u6e40\0\u6e78\0\u6eb0\0\u6ee8\0\u6f20\0\u6f58\0\u6f90\0\u6fc8"+
    "\0\u7000\0\u7038\0\u7070\0\u70a8\0\u70e0\0\u7118\0\u7150\0\u7188"+
    "\0\u71c0\0\u23e0\0\u71f8\0\u23e0\0\u23e0\0\u7230\0\u23e0\0\u7268"+
    "\0\u72a0\0\u72d8\0\u7310\0\u18b8\0\u18b8\0\u18b8\0\u7348\0\u18b8"+
    "\0\u7380\0\u73b8\0\u73f0\0\u18b8\0\u7428\0\u7460\0\u7498\0\u74d0"+
    "\0\u7508\0\u7540\0\u7578\0\u75b0\0\u75e8\0\u7620\0\u7658\0\u2d10"+
    "\0\u7690\0\u18b8\0\u76c8\0\u7700\0\u7738\0\u7770\0\u2f40\0\u77a8"+
    "\0\u2f40\0\u2f40\0\u77e0\0\u2f40\0\u7818\0\u7850\0\u7888\0\u78c0"+
    "\0\u78f8\0\u7930\0\u7968\0\u79a0\0\u79d8\0\u7a10\0\u7a48\0\u7a80"+
    "\0\u7ab8\0\u7af0\0\u7b28\0\u7b60\0\u7b98\0\u7bd0\0\u7c08\0\u7c40"+
    "\0\u7c78\0\u7cb0\0\u7ce8\0\u7d20\0\u7d58\0\u7d90\0\u7dc8\0\u7e00"+
    "\0\u7e38\0\u7e70\0\u7ea8\0\u7ee0\0\u7f18\0\u7f50\0\u7f88\0\u7fc0"+
    "\0\u18b8\0\u7ff8\0\u18b8\0\u18b8\0\u8030\0\u8068\0\u80a0\0\u80d8"+
    "\0\u8110\0\u8148\0\u8180\0\u81b8\0\u81f0\0\u8228\0\u18b8\0\u8260"+
    "\0\u8298\0\u82d0\0\u8308\0\u8340\0\u8378\0\u83b0\0\u83e8\0\u8420"+
    "\0\u18b8\0\u8458\0\u8490\0\u84c8\0\u8500\0\u8538\0\u8570\0\u85a8"+
    "\0\u85e0\0\u2d10\0\u8618\0\u8650\0\u8688\0\u86c0\0\u86f8\0\u8730"+
    "\0\u8768\0\u87a0\0\u87d8\0\u8810\0\u8848\0\u8880\0\u18b8\0\u88b8"+
    "\0\u18b8\0\u18b8\0\u18b8\0\u88f0\0\u8928\0\u18b8\0\u18b8\0\u8960"+
    "\0\u8998\0\u89d0\0\u18b8\0\u8a08\0\u18b8\0\u18b8\0\u8a40\0\u8a78"+
    "\0\u8ab0\0\u8ae8\0\u8b20\0\u8b58\0\u8b90\0\u8bc8\0\u8c00\0\u18b8"+
    "\0\u8c38\0\u8c70\0\u8ca8\0\u8ce0\0\u8d18\0\u8d50\0\u8d88\0\u8dc0"+
    "\0\u8df8\0\u8e30\0\u8e68\0\u8ea0\0\u8ed8\0\u8f10\0\u18b8\0\u18b8"+
    "\0\u8f48\0\u8f80\0\u8fb8\0\u8ff0\0\u9028\0\u9060\0\u9098\0\u90d0"+
    "\0\u9108\0\u9140\0\u9178\0\u91b0\0\u91e8\0\u9220\0\u9258\0\u9290"+
    "\0\u92c8\0\u18b8\0\u9300\0\u18b8\0\u9338\0\u9370\0\u93a8\0\u93e0"+
    "\0\u9418\0\u9450\0\u9488\0\u94c0\0\u94f8\0\u9530\0\u9568\0\u95a0"+
    "\0\u95d8\0\u9610\0\u9648\0\u9680\0\u96b8\0\u18b8\0\u18b8\0\u96f0"+
    "\0\u18b8\0\u18b8\0\u9728\0\u9760\0\u18b8\0\u9798\0\u97d0\0\u9808"+
    "\0\u9840\0\u9878\0\u98b0\0\u98e8\0\u9920\0\u9958\0\u18b8\0\u9990"+
    "\0\u18b8\0\u99c8\0\u9a00\0\u9a38\0\u9a70\0\u9aa8\0\u18b8\0\u9ae0"+
    "\0\u18b8\0\u9b18\0\u9b50\0\u23e0\0\u9b88\0\u23e0\0\u9bc0\0\u9bf8"+
    "\0\u9c30\0\u18b8\0\u9c68\0\u9ca0\0\u9cd8\0\u9d10\0\u18b8\0\u9d48"+
    "\0\u9d80\0\u9db8\0\u9df0\0\u9e28\0\u2d10\0\u9e60\0\u9e98\0\u2f40"+
    "\0\u9ed0\0\u2f40\0\u9f08\0\u9f40\0\u9f78\0\u9fb0\0\u9fe8\0\ua020"+
    "\0\ua058\0\ua090\0\u18b8\0\ua0c8\0\ua100\0\ua138\0\u18b8\0\u18b8"+
    "\0\ua170\0\u18b8\0\ua1a8\0\u18b8\0\ua1e0\0\ua218\0\ua250\0\u18b8"+
    "\0\u18b8\0\ua288\0\u18b8\0\ua2c0\0\ua2f8\0\u18b8\0\ua330\0\ua368"+
    "\0\ua3a0\0\ua3d8\0\ua410\0\ua448\0\ua480\0\ua4b8\0\ua4f0\0\u18b8"+
    "\0\ua528\0\ua560\0\ua598\0\ua5d0\0\ua608\0\ua640\0\ua678\0\ua6b0"+
    "\0\ua6e8\0\ua720\0\ua758\0\ua790\0\ua7c8\0\u18b8\0\ua800\0\u18b8"+
    "\0\u18b8\0\ua838\0\ua870\0\u18b8\0\ua8a8\0\ua8e0\0\ua918\0\u18b8"+
    "\0\u18b8\0\u18b8\0\u18b8\0\ua950\0\u23e0\0\ua988\0\ua9c0\0\ua9f8"+
    "\0\uaa30\0\uaa68\0\u18b8\0\uaaa0\0\u2d10\0\uaad8\0\u2d10\0\uab10"+
    "\0\uab48\0\uab80\0\uabb8\0\u2f40\0\uabf0\0\uac28\0\uac60\0\uac98"+
    "\0\u18b8\0\u18b8\0\uacd0\0\uad08\0\uad40\0\uad78\0\u18b8\0\uadb0"+
    "\0\uade8\0\uae20\0\uae58\0\uae90\0\u18b8\0\u18b8\0\uaec8\0\uaf00"+
    "\0\uaf38\0\uaf70\0\uafa8\0\uafe0\0\ub018\0\u18b8\0\ub050\0\ub088"+
    "\0\ub0c0\0\u18b8\0\ub0f8\0\ub130\0\ub168\0\ub1a0\0\ub1d8\0\ub210"+
    "\0\ub248\0\ub280\0\ub2b8\0\ub2f0\0\ub328\0\ub360\0\ub398\0\u18b8"+
    "\0\ub3d0\0\ub408\0\ub440\0\ub478\0\ub4b0\0\ub4e8\0\ub520\0\ub558"+
    "\0\ub590\0\ub5c8\0\ub600\0\ub638\0\ub670\0\ub6a8\0\ub6e0\0\u23e0"+
    "\0\ub718\0\ub750\0\ub788\0\ub7c0\0\ub7f8\0\ub830\0\ub868\0\u2f40"+
    "\0\ub8a0\0\ub8d8\0\ub910\0\ub948\0\u18b8\0\ub980\0\u23e0\0\ub9b8"+
    "\0\u18b8\0\ub9f0\0\uba28\0\uba60\0\uba98\0\u2f40\0\ubad0\0\u18b8"+
    "\0\ubb08\0\ubb40\0\ubb78\0\ubbb0\0\ubbe8\0\ubc20\0\ubc58\0\ubc90"+
    "\0\u23e0\0\u2d10\0\ubcc8\0\ubd00\0\ubd38\0\u2f40\0\ubd70\0\ubda8"+
    "\0\u2d10\0\ubde0\0\ube18\0\ube50\0\ube88\0\ubec0\0\ubef8\0\ubf30"+
    "\0\ubf68\0\ubfa0\0\u23e0\0\u2f40";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[1076];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\162\1\163\1\164\1\165\5\162\1\166\13\162\1\167"+
    "\3\162\1\170\1\162\1\171\21\162\1\172\12\162\14\173"+
    "\1\174\40\173\1\175\12\173\13\176\1\177\54\176\1\162"+
    "\1\163\17\162\1\200\10\162\1\201\22\162\1\172\13\162"+
    "\1\163\2\162\1\202\1\162\1\202\2\162\2\202\5\162"+
    "\24\202\2\162\1\202\5\162\1\202\1\172\12\162\51\203"+
    "\1\204\70\203\1\205\15\203\1\162\1\163\34\162\1\206"+
    "\16\162\1\172\13\162\1\163\6\162\1\207\11\162\1\210"+
    "\32\162\1\172\13\162\1\163\36\162\1\211\14\162\1\172"+
    "\13\162\1\163\23\162\1\212\1\213\3\162\1\214\3\162"+
    "\1\215\1\162\1\216\1\162\1\217\12\162\1\172\13\162"+
    "\1\163\32\162\1\220\3\162\1\221\14\162\1\172\13\162"+
    "\1\163\43\162\1\222\7\162\1\172\13\162\1\163\31\162"+
    "\1\223\4\162\1\224\14\162\1\172\13\162\1\163\20\162"+
    "\1\225\3\162\1\226\3\162\1\227\10\162\1\230\11\162"+
    "\1\172\13\162\1\163\20\162\1\231\32\162\1\172\13\162"+
    "\1\163\25\162\1\232\11\162\1\233\13\162\1\172\13\162"+
    "\1\163\36\162\1\234\14\162\1\172\13\162\1\163\12\162"+
    "\1\235\5\162\1\236\32\162\1\172\13\162\1\163\27\162"+
    "\1\237\5\162\1\240\15\162\1\172\13\162\1\163\23\162"+
    "\1\241\12\162\1\242\14\162\1\172\13\162\1\163\20\162"+
    "\1\243\32\162\1\172\13\162\1\163\36\162\1\244\14\162"+
    "\1\172\13\162\1\163\36\162\1\242\14\162\1\172\13\162"+
    "\1\163\32\162\1\245\2\162\1\246\15\162\1\172\13\162"+
    "\1\163\47\162\1\247\1\250\2\162\1\172\13\162\1\163"+
    "\42\162\1\251\10\162\1\172\12\162\1\252\1\163\26\252"+
    "\1\253\40\252\1\163\43\252\1\254\22\252\1\162\1\163"+
    "\45\162\1\255\5\162\1\172\12\162\1\252\1\163\26\252"+
    "\1\256\37\252\1\162\1\163\2\162\1\257\1\162\1\257"+
    "\2\162\2\257\5\162\2\257\1\260\2\257\1\261\1\262"+
    "\1\257\1\263\2\257\1\264\1\265\1\266\1\267\1\270"+
    "\1\271\3\257\2\162\1\257\5\162\1\257\1\172\12\162"+
    "\5\272\1\273\11\272\1\274\30\272\1\275\17\272\1\162"+
    "\1\163\20\162\1\276\14\162\1\277\13\162\1\300\1\162"+
    "\1\172\13\162\1\163\2\162\1\301\1\162\1\301\2\162"+
    "\2\301\5\162\24\301\2\162\1\301\2\162\2\302\1\300"+
    "\1\301\1\172\13\162\1\163\53\162\1\172\13\162\1\163"+
    "\2\162\1\303\1\162\1\303\2\162\2\303\4\162\1\304"+
    "\24\303\2\162\1\303\4\162\1\300\1\303\1\172\13\162"+
    "\1\163\43\162\1\305\5\162\1\300\1\162\1\172\13\162"+
    "\1\163\46\162\1\306\2\162\1\300\1\162\1\172\12\162"+
    "\1\307\1\163\20\307\1\310\4\307\1\311\3\307\1\312"+
    "\1\307\1\313\1\307\1\314\3\307\1\315\11\307\1\316"+
    "\12\307\1\317\1\163\43\317\1\320\7\317\1\321\12\317"+
    "\1\162\1\163\53\162\1\172\1\162\1\322\11\162\1\163"+
    "\53\162\1\323\12\162\1\324\1\163\51\324\1\325\14\324"+
    "\1\162\1\163\31\162\1\326\21\162\1\172\13\162\1\163"+
    "\53\162\1\327\13\162\1\163\51\162\1\330\1\162\1\172"+
    "\13\162\1\163\33\162\1\331\17\162\1\172\13\162\1\163"+
    "\20\162\1\332\32\162\1\172\13\162\1\163\20\162\1\333"+
    "\14\162\1\334\15\162\1\172\12\162\1\317\1\163\43\317"+
    "\1\335\7\317\1\321\12\317\1\162\1\163\31\162\1\336"+
    "\21\162\1\172\13\162\1\163\35\162\1\337\15\162\1\172"+
    "\13\162\1\163\33\162\1\340\17\162\1\172\13\162\1\163"+
    "\53\162\1\341\13\162\1\163\51\162\1\342\1\162\1\172"+
    "\13\162\1\163\23\162\1\343\27\162\1\172\12\162\1\344"+
    "\1\163\45\344\1\345\20\344\1\162\1\163\24\162\1\346"+
    "\26\162\1\172\13\162\1\163\23\162\1\343\1\346\26\162"+
    "\1\172\12\162\1\347\1\163\45\347\1\350\20\347\1\162"+
    "\1\163\26\162\1\351\24\162\1\172\13\162\1\163\21\162"+
    "\1\352\31\162\1\172\12\162\1\353\1\354\3\353\1\355"+
    "\5\353\1\356\22\353\1\357\16\353\1\360\1\361\11\353"+
    "\1\162\1\163\25\162\1\362\7\162\1\363\15\162\1\172"+
    "\1\162\1\322\11\162\1\163\53\162\1\172\2\162\1\364"+
    "\7\162\1\365\1\163\1\366\1\367\1\370\1\365\1\370"+
    "\2\365\2\370\5\365\1\370\1\371\3\370\1\372\1\373"+
    "\1\370\1\374\1\370\1\375\1\370\1\376\2\370\1\377"+
    "\3\370\1\u0100\2\365\1\370\1\u0101\1\365\2\u0102\1\365"+
    "\1\370\1\u0103\3\365\1\u0104\1\365\1\u0105\4\365\1\162"+
    "\1\163\2\162\1\u0106\1\162\1\u0106\2\162\2\u0106\4\162"+
    "\1\u0107\2\u0106\1\u0108\2\u0106\1\u0109\1\u010a\1\u0106\1\u010b"+
    "\2\u0106\1\u010c\1\u010d\1\u010e\1\u010f\1\u0110\1\u0111\3\u0106"+
    "\2\162\1\u0106\5\162\1\u0106\1\172\12\162\1\u0112\1\163"+
    "\62\u0112\1\u0113\3\u0112\1\162\1\163\21\162\1\352\3\162"+
    "\1\u0114\2\162\1\u0115\4\162\1\u0116\3\162\1\u0117\10\162"+
    "\1\u0118\1\172\13\162\1\163\52\162\1\u0118\1\172\13\162"+
    "\1\163\30\162\1\u0115\4\162\1\u0116\14\162\1\u0118\1\172"+
    "\13\162\1\163\21\162\1\352\6\162\1\u0115\4\162\1\u0116"+
    "\14\162\1\u0118\1\172\13\162\1\163\41\162\1\u0119\11\162"+
    "\1\172\12\162\1\252\1\163\43\252\1\u011a\23\252\1\163"+
    "\26\252\1\u011b\37\252\1\162\1\163\31\162\1\u011c\21\162"+
    "\1\172\13\162\1\163\25\162\1\u011d\25\162\1\172\12\162"+
    "\1\252\1\163\43\252\1\u011e\22\252\1\162\1\163\12\162"+
    "\1\235\40\162\1\172\13\162\1\163\52\162\1\u011f\1\172"+
    "\13\162\1\163\30\162\1\u0120\22\162\1\172\13\162\1\163"+
    "\40\162\1\u0121\12\162\1\172\12\162\1\317\1\163\43\317"+
    "\1\u0122\7\317\1\321\12\317\1\u0123\1\163\23\u0123\1\u0124"+
    "\2\u0123\1\u0125\24\u0123\1\u0126\12\u0123\1\u0127\1\163\20\u0127"+
    "\1\u0128\32\u0127\1\u0129\12\u0127\1\162\1\163\25\162\1\u012a"+
    "\11\162\1\u012b\13\162\1\172\12\162\1\317\1\163\24\317"+
    "\1\u012c\26\317\1\321\12\317\1\162\1\163\35\162\1\u012d"+
    "\15\162\1\172\12\162\4\u012e\1\u012f\4\u012e\1\u0130\1\u012f"+
    "\2\u012e\2\u012f\1\u012e\24\u012f\2\u012e\1\u012f\1\u012e\1\u0131"+
    "\3\u012e\1\u012f\13\u012e\1\u0132\1\163\46\u0132\1\u0133\17\u0132"+
    "\1\162\1\163\46\162\1\u0134\4\162\1\172\12\162\1\u0135"+
    "\1\u0136\72\u0135\1\u0137\1\u0135\1\u0137\2\u0135\2\u0137\5\u0135"+
    "\24\u0137\2\u0135\1\u0137\5\u0135\1\u0137\13\u0135\1\162\1\163"+
    "\53\162\1\u0138\13\162\1\163\51\162\1\325\1\162\1\172"+
    "\13\162\1\163\53\162\1\u0139\13\162\1\163\53\162\1\172"+
    "\1\162\1\u013a\11\162\1\163\53\162\1\172\10\162\1\u013b"+
    "\2\162\1\163\53\162\1\172\11\162\1\u013c\1\162\1\163"+
    "\6\162\1\207\44\162\1\172\13\162\1\163\45\162\1\u013d"+
    "\5\162\1\172\13\162\1\163\15\162\1\274\35\162\1\172"+
    "\13\162\1\163\12\162\1\u013e\40\162\1\172\13\162\1\163"+
    "\12\162\1\u013f\40\162\1\172\13\162\1\163\42\162\1\u0140"+
    "\10\162\1\172\13\162\1\163\2\162\1\u0141\1\162\1\u0141"+
    "\2\162\2\u0141\5\162\24\u0141\2\162\1\u0141\5\162\1\u0141"+
    "\1\172\13\162\1\163\2\162\1\u0142\1\162\1\u0142\2\162"+
    "\2\u0142\5\162\24\u0142\2\162\1\u0142\5\162\1\u0142\1\172"+
    "\12\162\14\u0143\1\u0144\57\u0143\1\u0145\1\u0143\1\u0145\2\u0143"+
    "\2\u0145\5\u0143\24\u0145\2\u0143\1\u0145\5\u0143\1\u0145\13\u0143"+
    "\1\162\1\163\2\162\1\u0146\1\162\1\u0146\2\162\2\u0146"+
    "\4\162\1\u0147\24\u0146\2\162\1\u0146\5\162\1\u0146\1\172"+
    "\12\162\14\u0143\1\u0148\57\u0143\1\u0145\1\u0143\1\u0145\2\u0143"+
    "\2\u0145\4\u0143\1\274\24\u0145\2\u0143\1\u0145\5\u0143\1\u0145"+
    "\13\u0143\71\0\1\163\70\0\1\164\1\u0149\1\u014a\15\0"+
    "\1\u014a\47\0\1\u0149\105\0\1\u014b\71\0\1\u014c\77\0"+
    "\1\u014d\66\0\1\u014e\52\0\1\u014f\126\0\1\u0150\30\0"+
    "\1\u0151\53\0\13\176\1\u0152\54\176\40\0\1\u0153\52\0"+
    "\1\u0154\46\0\3\202\1\0\2\202\1\0\3\202\2\0"+
    "\1\202\1\0\24\202\2\0\1\202\5\0\1\202\64\0"+
    "\1\u0155\70\0\1\u0156\37\0\1\u0157\105\0\1\u0158\57\0"+
    "\1\u0159\61\0\1\u015a\77\0\1\u015b\60\0\1\u015c\10\0"+
    "\1\u015d\63\0\1\u015e\67\0\1\u015f\67\0\1\u0160\1\0"+
    "\1\u0161\60\0\1\u0162\76\0\1\u0163\75\0\1\u0164\61\0"+
    "\1\u0165\64\0\1\u0166\72\0\1\u0167\60\0\1\u0168\65\0"+
    "\1\u0169\77\0\1\u016a\60\0\1\u016b\70\0\1\u016c\74\0"+
    "\1\u016d\103\0\1\u016e\34\0\1\u016f\110\0\1\u0170\63\0"+
    "\1\u0171\63\0\1\u0172\75\0\1\u0173\66\0\1\u0174\70\0"+
    "\1\u0175\62\0\1\u0176\101\0\1\u0177\32\0\1\252\1\0"+
    "\67\252\1\0\33\252\1\u0178\33\252\1\0\35\252\1\u0179"+
    "\30\252\2\0\3\257\1\0\2\257\1\0\3\257\1\u017a"+
    "\1\0\1\257\1\0\24\257\2\0\1\257\5\0\1\257"+
    "\15\0\3\257\1\0\2\257\1\0\3\257\1\u017a\1\0"+
    "\1\257\1\0\7\257\1\u017b\14\257\2\0\1\257\5\0"+
    "\1\257\15\0\3\257\1\0\2\257\1\0\3\257\1\u017a"+
    "\1\0\1\257\1\0\12\257\1\u017c\11\257\2\0\1\257"+
    "\5\0\1\257\15\0\3\257\1\0\2\257\1\0\3\257"+
    "\1\u017a\1\0\1\257\1\0\12\257\1\u017d\11\257\2\0"+
    "\1\257\5\0\1\257\15\0\3\257\1\0\2\257\1\0"+
    "\3\257\1\u017a\1\0\1\257\1\0\15\257\1\u017e\6\257"+
    "\2\0\1\257\5\0\1\257\15\0\3\257\1\0\2\257"+
    "\1\0\3\257\1\u017a\1\0\1\257\1\0\15\257\1\u017f"+
    "\6\257\2\0\1\257\5\0\1\257\15\0\3\257\1\0"+
    "\2\257\1\0\3\257\1\u017a\1\0\1\257\1\0\3\257"+
    "\1\u0180\20\257\2\0\1\257\5\0\1\257\15\0\3\257"+
    "\1\0\2\257\1\0\3\257\1\u017a\1\0\1\257\1\0"+
    "\2\257\1\u0181\21\257\2\0\1\257\5\0\1\257\15\0"+
    "\3\257\1\0\2\257\1\0\3\257\1\u017a\1\0\1\257"+
    "\1\0\12\257\1\u0182\11\257\2\0\1\257\5\0\1\257"+
    "\15\0\3\257\1\0\2\257\1\0\3\257\1\u017a\1\0"+
    "\1\257\1\0\6\257\1\u0183\15\257\2\0\1\257\5\0"+
    "\1\257\15\0\3\257\1\0\2\257\1\0\3\257\1\u017a"+
    "\1\0\1\257\1\0\12\257\1\u0184\11\257\2\0\1\257"+
    "\5\0\1\257\42\0\1\u0185\66\0\1\u0186\43\0\3\301"+
    "\1\0\2\301\1\0\3\301\2\0\1\301\1\0\24\301"+
    "\2\0\1\301\5\0\1\301\15\0\3\303\1\0\2\303"+
    "\1\0\3\303\1\u0187\1\0\1\303\1\0\24\303\2\0"+
    "\1\303\5\0\1\303\51\0\1\u0188\53\0\1\u0189\110\0"+
    "\1\u018a\50\0\1\u018b\75\0\1\u018c\67\0\1\u018d\35\0"+
    "\1\324\1\0\51\324\1\0\14\324\43\0\1\u018e\72\0"+
    "\1\u018f\50\0\1\u0190\76\0\1\u0191\63\0\1\u0192\75\0"+
    "\1\u0193\57\0\1\u0194\63\0\1\u0195\65\0\1\u0196\45\0"+
    "\1\344\1\0\45\344\1\0\20\344\30\0\1\u0197\37\0"+
    "\1\347\1\0\45\347\1\0\20\347\37\0\1\u0198\52\0"+
    "\1\u0199\75\0\1\u019a\115\0\1\u019b\41\0\1\u019c\74\0"+
    "\1\u019d\34\0\1\366\1\u019e\1\u019f\15\0\1\u019f\47\0"+
    "\1\u019e\1\u01a0\66\0\3\u01a1\1\0\2\u01a1\1\0\3\u01a1"+
    "\1\u01a2\1\0\1\u01a1\1\0\24\u01a1\2\0\1\u01a1\5\0"+
    "\1\u01a1\15\0\3\u01a1\1\0\2\u01a1\1\0\3\u01a1\1\u01a2"+
    "\1\0\1\u01a1\1\0\20\u01a1\1\u01a3\3\u01a1\2\0\1\u01a1"+
    "\5\0\1\u01a1\15\0\3\u01a1\1\0\2\u01a1\1\0\3\u01a1"+
    "\1\u01a2\1\0\1\u01a1\1\0\2\u01a1\1\u01a4\21\u01a1\2\0"+
    "\1\u01a1\5\0\1\u01a1\15\0\3\u01a1\1\0\2\u01a1\1\0"+
    "\3\u01a1\1\u01a2\1\0\1\u01a1\1\0\24\u01a1\2\0\1\u01a5"+
    "\5\0\1\u01a1\15\0\3\u01a1\1\0\2\u01a1\1\0\3\u01a1"+
    "\1\u01a2\1\0\1\u01a1\1\0\15\u01a1\1\u01a6\2\u01a1\1\u01a7"+
    "\3\u01a1\2\0\1\u01a1\5\0\1\u01a1\15\0\3\u01a1\1\0"+
    "\2\u01a1\1\0\3\u01a1\1\u01a2\1\0\1\u01a1\1\0\3\u01a1"+
    "\1\u01a8\20\u01a1\2\0\1\u01a1\5\0\1\u01a1\15\0\3\u01a1"+
    "\1\0\2\u01a1\1\0\3\u01a1\1\u01a2\1\0\1\u01a1\1\0"+
    "\3\u01a1\1\u01a9\4\u01a1\1\u01aa\13\u01a1\2\0\1\u01a1\5\0"+
    "\1\u01a1\15\0\3\u01a1\1\0\2\u01a1\1\0\3\u01a1\1\u01a2"+
    "\1\0\1\u01a1\1\0\2\u01a1\1\u01ab\21\u01a1\2\0\1\u01a1"+
    "\5\0\1\u01a1\15\0\3\u01a1\1\0\2\u01a1\1\0\3\u01a1"+
    "\1\u01a2\1\0\1\u01a1\1\0\12\u01a1\1\u01ac\11\u01a1\2\0"+
    "\1\u01a1\5\0\1\u01a1\63\0\1\u01ad\11\0\1\u01ae\7\0"+
    "\3\u0106\1\0\2\u0106\1\0\3\u0106\1\u01af\1\0\1\u0106"+
    "\1\0\24\u0106\2\0\1\u0106\5\0\1\u0106\27\0\1\u01b0"+
    "\55\0\3\u0106\1\0\2\u0106\1\0\3\u0106\1\u01af\1\0"+
    "\1\u0106\1\0\7\u0106\1\u01b1\14\u0106\2\0\1\u0106\5\0"+
    "\1\u0106\15\0\3\u0106\1\0\2\u0106\1\0\3\u0106\1\u01af"+
    "\1\0\1\u0106\1\0\12\u0106\1\u01b2\11\u0106\2\0\1\u0106"+
    "\5\0\1\u0106\15\0\3\u0106\1\0\2\u0106\1\0\3\u0106"+
    "\1\u01af\1\0\1\u0106\1\0\12\u0106\1\u01b3\11\u0106\2\0"+
    "\1\u0106\5\0\1\u0106\15\0\3\u0106\1\0\2\u0106\1\0"+
    "\3\u0106\1\u01af\1\0\1\u0106\1\0\15\u0106\1\u01b4\6\u0106"+
    "\2\0\1\u0106\5\0\1\u0106\15\0\3\u0106\1\0\2\u0106"+
    "\1\0\3\u0106\1\u01af\1\0\1\u0106\1\0\15\u0106\1\u01b5"+
    "\6\u0106\2\0\1\u0106\5\0\1\u0106\15\0\3\u0106\1\0"+
    "\2\u0106\1\0\3\u0106\1\u01af\1\0\1\u0106\1\0\3\u0106"+
    "\1\u01b6\20\u0106\2\0\1\u0106\5\0\1\u0106\15\0\3\u0106"+
    "\1\0\2\u0106\1\0\3\u0106\1\u01af\1\0\1\u0106\1\0"+
    "\2\u0106\1\u01b7\21\u0106\2\0\1\u0106\5\0\1\u0106\15\0"+
    "\3\u0106\1\0\2\u0106\1\0\3\u0106\1\u01af\1\0\1\u0106"+
    "\1\0\12\u0106\1\u01b8\11\u0106\2\0\1\u0106\5\0\1\u0106"+
    "\15\0\3\u0106\1\0\2\u0106\1\0\3\u0106\1\u01af\1\0"+
    "\1\u0106\1\0\6\u0106\1\u01b9\15\u0106\2\0\1\u0106\5\0"+
    "\1\u0106\15\0\3\u0106\1\0\2\u0106\1\0\3\u0106\1\u01af"+
    "\1\0\1\u0106\1\0\12\u0106\1\u01ba\11\u0106\2\0\1\u0106"+
    "\5\0\1\u0106\13\0\1\u0112\1\0\62\u0112\1\0\3\u0112"+
    "\23\0\1\u01bb\101\0\1\u01bc\100\0\1\u01bd\53\0\1\u01be"+
    "\35\0\1\252\1\0\33\252\1\u01bf\32\252\40\0\1\u01c0"+
    "\51\0\1\u01c1\113\0\1\u01c2\44\0\1\u01c3\70\0\1\u01c4"+
    "\65\0\1\u01c5\104\0\1\u01c6\61\0\1\u01c7\60\0\1\u01c8"+
    "\70\0\1\u01c9\76\0\1\u01ca\72\0\1\u01cb\34\0\3\u012f"+
    "\4\0\3\u012f\1\u01cc\2\u012f\1\0\24\u012f\2\0\1\u012f"+
    "\5\0\1\u012f\15\0\3\u012f\4\0\3\u012f\1\u01cc\2\u012f"+
    "\1\0\11\u012f\1\u01cd\12\u012f\2\0\1\u012f\5\0\1\u012f"+
    "\100\0\1\u0135\67\0\1\u01ce\3\0\1\u0136\70\0\3\u0137"+
    "\1\0\2\u0137\1\0\3\u0137\1\u01cf\1\0\1\u0137\1\0"+
    "\24\u0137\2\0\1\u0137\5\0\1\u0137\27\0\1\u01d0\55\0"+
    "\3\u0141\1\0\2\u0141\1\0\3\u0141\2\0\1\u0141\1\0"+
    "\24\u0141\2\0\1\u0141\5\0\1\u0141\15\0\3\u0142\1\0"+
    "\2\u0142\1\0\3\u0142\1\u01d1\1\0\1\u0142\1\0\24\u0142"+
    "\2\0\1\u0142\5\0\1\u0142\15\0\3\u0145\1\0\2\u0145"+
    "\1\0\3\u0145\2\0\1\u0145\1\0\24\u0145\2\0\1\u0145"+
    "\5\0\1\u0145\15\0\3\u0146\1\0\2\u0146\1\0\3\u0146"+
    "\1\u01d2\1\0\1\u0146\1\0\24\u0146\2\0\1\u0146\5\0"+
    "\1\u0146\27\0\1\u01d3\55\0\1\u0149\1\0\1\u014a\15\0"+
    "\1\u014a\47\0\1\u01d4\2\0\1\u01d5\5\0\1\u01d5\75\0"+
    "\1\u01d6\74\0\1\u01d7\66\0\1\u01d8\76\0\1\u01d9\120\0"+
    "\1\u01da\34\0\1\u01db\62\0\1\u01dc\65\0\1\u01dd\72\0"+
    "\1\u01de\72\0\1\u01df\101\0\1\u01e0\60\0\1\u01e1\3\0"+
    "\1\u01e2\54\0\1\u01e3\77\0\1\u01e4\55\0\1\u01e5\75\0"+
    "\1\u01e6\75\0\1\u01e7\51\0\1\u01e8\70\0\1\u01e9\60\0"+
    "\1\u01ea\122\0\1\u01eb\34\0\1\u01ec\76\0\1\u01ed\74\0"+
    "\1\u01ee\65\0\1\u01ef\102\0\1\u01f0\63\0\1\u01f1\63\0"+
    "\1\u01f2\61\0\1\u01f3\76\0\1\u01f4\73\0\1\u01f5\57\0"+
    "\1\u01f6\110\0\1\u01f7\64\0\1\u01f8\55\0\1\u01f9\60\0"+
    "\1\u01fa\76\0\1\u01fb\60\0\1\u01fc\70\0\1\u01fd\50\0"+
    "\1\u01fe\1\0\1\u01fe\2\0\2\u01fe\5\0\24\u01fe\2\0"+
    "\1\u01fe\5\0\1\u01fe\15\0\3\257\1\0\2\257\1\0"+
    "\3\257\1\u017a\1\0\1\257\1\0\2\257\1\u01ff\21\257"+
    "\2\0\1\257\5\0\1\257\15\0\3\257\1\0\2\257"+
    "\1\0\3\257\1\u017a\1\0\1\257\1\0\6\257\1\u0200"+
    "\15\257\2\0\1\257\5\0\1\257\15\0\3\257\1\0"+
    "\2\257\1\0\3\257\1\u017a\1\0\1\257\1\0\11\257"+
    "\1\u0201\12\257\2\0\1\257\5\0\1\257\15\0\3\257"+
    "\1\0\2\257\1\0\3\257\1\u017a\1\0\1\257\1\0"+
    "\15\257\1\u0202\6\257\2\0\1\257\5\0\1\257\15\0"+
    "\3\257\1\0\2\257\1\0\3\257\1\u017a\1\0\1\257"+
    "\1\0\2\257\1\u0203\21\257\2\0\1\257\5\0\1\257"+
    "\15\0\3\257\1\0\2\257\1\0\3\257\1\u017a\1\0"+
    "\1\257\1\0\12\257\1\u0204\11\257\2\0\1\257\5\0"+
    "\1\257\15\0\3\257\1\0\2\257\1\0\1\u0205\2\257"+
    "\1\u017a\1\0\1\257\1\0\24\257\2\0\1\257\5\0"+
    "\1\257\15\0\3\257\1\0\2\257\1\0\3\257\1\u017a"+
    "\1\0\1\257\1\0\13\257\1\u0206\10\257\2\0\1\257"+
    "\5\0\1\257\15\0\3\257\1\0\2\257\1\0\3\257"+
    "\1\u017a\1\0\1\257\1\0\24\257\2\0\1\u0207\5\0"+
    "\1\257\15\0\3\257\1\0\2\257\1\0\3\257\1\u017a"+
    "\1\0\1\257\1\0\5\257\1\u0208\16\257\2\0\1\257"+
    "\5\0\1\257\35\0\1\u0209\113\0\1\u020a\25\0\1\u020b"+
    "\1\0\1\u020b\2\0\2\u020b\5\0\24\u020b\2\0\1\u020b"+
    "\5\0\1\u020b\35\0\1\u020c\102\0\1\u020d\66\0\1\u020e"+
    "\64\0\1\u020f\61\0\1\u0210\66\0\1\u0211\104\0\1\u0212"+
    "\52\0\1\u0213\76\0\1\u0214\73\0\1\u0215\66\0\1\u0216"+
    "\76\0\1\u0217\63\0\1\u0218\65\0\1\u0219\61\0\1\u021a"+
    "\51\0\1\u021b\101\0\1\u021c\46\0\1\u019e\1\0\1\u019f"+
    "\15\0\1\u019f\47\0\1\u021d\2\0\1\u021e\5\0\1\u021e"+
    "\60\0\1\u021f\1\0\1\u021f\2\0\2\u021f\5\0\24\u021f"+
    "\2\0\1\u021f\5\0\1\u021f\15\0\3\u01a1\1\0\2\u01a1"+
    "\1\0\3\u01a1\1\u01a2\1\0\1\u01a1\1\0\12\u01a1\1\u0220"+
    "\11\u01a1\2\0\1\u01a1\5\0\1\u01a1\15\0\3\u01a1\1\0"+
    "\2\u01a1\1\0\3\u01a1\1\u01a2\1\0\1\u01a1\1\0\17\u01a1"+
    "\1\u0221\4\u01a1\2\0\1\u01a1\5\0\1\u01a1\15\0\3\u01a1"+
    "\1\0\2\u01a1\1\0\3\u01a1\1\u01a2\1\0\1\u01a1\1\0"+
    "\13\u01a1\1\u0222\10\u01a1\2\0\1\u01a1\5\0\1\u01a1\15\0"+
    "\3\u01a1\1\0\2\u01a1\1\0\3\u01a1\1\u01a2\1\0\1\u01a1"+
    "\1\0\15\u01a1\1\u0223\6\u01a1\2\0\1\u01a1\5\0\1\u01a1"+
    "\15\0\3\u01a1\1\0\2\u01a1\1\0\3\u01a1\1\u01a2\1\0"+
    "\1\u01a1\1\0\6\u01a1\1\u0224\15\u01a1\2\0\1\u01a1\5\0"+
    "\1\u01a1\15\0\3\u01a1\1\0\2\u01a1\1\0\3\u01a1\1\u01a2"+
    "\1\0\1\u01a1\1\0\5\u01a1\1\u0225\16\u01a1\2\0\1\u01a1"+
    "\5\0\1\u01a1\15\0\3\u01a1\1\0\2\u01a1\1\0\3\u01a1"+
    "\1\u01a2\1\0\1\u01a1\1\0\2\u01a1\1\u0226\21\u01a1\2\0"+
    "\1\u01a1\5\0\1\u01a1\15\0\3\u01a1\1\0\2\u01a1\1\0"+
    "\3\u01a1\1\u01a2\1\0\1\u01a1\1\0\3\u01a1\1\u0227\20\u01a1"+
    "\2\0\1\u01a1\5\0\1\u01a1\15\0\3\u01a1\1\0\2\u01a1"+
    "\1\0\3\u01a1\1\u01a2\1\0\1\u01a1\1\0\7\u01a1\1\u0228"+
    "\14\u01a1\2\0\1\u01a1\5\0\1\u01a1\15\0\3\u01a1\1\0"+
    "\2\u01a1\1\0\3\u01a1\1\u01a2\1\0\1\u01a1\1\0\7\u01a1"+
    "\1\u0229\14\u01a1\2\0\1\u01a1\5\0\1\u01a1\26\0\1\u022a"+
    "\60\0\1\u022b\1\0\1\u022b\2\0\2\u022b\4\0\1\u022c"+
    "\24\u022b\2\0\1\u022b\5\0\1\u022b\17\0\1\u022b\1\0"+
    "\1\u022b\2\0\2\u022b\5\0\24\u022b\2\0\1\u022b\5\0"+
    "\1\u022b\15\0\3\u0106\1\0\2\u0106\1\0\3\u0106\1\u01af"+
    "\1\0\1\u0106\1\0\2\u0106\1\u022d\21\u0106\2\0\1\u0106"+
    "\5\0\1\u0106\15\0\3\u0106\1\0\2\u0106\1\0\3\u0106"+
    "\1\u01af\1\0\1\u0106\1\0\6\u0106\1\u022e\15\u0106\2\0"+
    "\1\u0106\5\0\1\u0106\15\0\3\u0106\1\0\2\u0106\1\0"+
    "\3\u0106\1\u01af\1\0\1\u0106\1\0\11\u0106\1\u022f\12\u0106"+
    "\2\0\1\u0106\5\0\1\u0106\15\0\3\u0106\1\0\2\u0106"+
    "\1\0\3\u0106\1\u01af\1\0\1\u0106\1\0\15\u0106\1\u0230"+
    "\6\u0106\2\0\1\u0106\5\0\1\u0106\15\0\3\u0106\1\0"+
    "\2\u0106\1\0\3\u0106\1\u01af\1\0\1\u0106\1\0\2\u0106"+
    "\1\u0231\21\u0106\2\0\1\u0106\5\0\1\u0106\15\0\3\u0106"+
    "\1\0\2\u0106\1\0\3\u0106\1\u01af\1\0\1\u0106\1\0"+
    "\12\u0106\1\u0232\11\u0106\2\0\1\u0106\5\0\1\u0106\15\0"+
    "\3\u0106\1\0\2\u0106\1\0\1\u0233\2\u0106\1\u01af\1\0"+
    "\1\u0106\1\0\24\u0106\2\0\1\u0106\5\0\1\u0106\15\0"+
    "\3\u0106\1\0\2\u0106\1\0\3\u0106\1\u01af\1\0\1\u0106"+
    "\1\0\13\u0106\1\u0234\10\u0106\2\0\1\u0106\5\0\1\u0106"+
    "\15\0\3\u0106\1\0\2\u0106\1\0\3\u0106\1\u01af\1\0"+
    "\1\u0106\1\0\24\u0106\2\0\1\u0235\5\0\1\u0106\15\0"+
    "\3\u0106\1\0\2\u0106\1\0\3\u0106\1\u01af\1\0\1\u0106"+
    "\1\0\5\u0106\1\u0236\16\u0106\2\0\1\u0106\5\0\1\u0106"+
    "\40\0\1\u0237\72\0\1\u0238\61\0\1\u0239\70\0\1\u023a"+
    "\101\0\1\u023b\54\0\1\u023c\72\0\1\u023d\101\0\1\u023e"+
    "\56\0\1\u023f\75\0\1\u0240\63\0\1\u0241\61\0\1\u0242"+
    "\74\0\1\u0243\70\0\1\u0244\41\0\3\u01cc\4\0\3\u01cc"+
    "\1\0\2\u01cc\1\0\24\u01cc\2\0\1\u01cc\5\0\1\u01cc"+
    "\15\0\3\u012f\4\0\3\u012f\1\u01cc\2\u012f\1\0\7\u012f"+
    "\1\u0245\14\u012f\2\0\1\u012f\5\0\1\u012f\17\0\1\u0246"+
    "\1\0\1\u0246\2\0\2\u0246\5\0\24\u0246\2\0\1\u0246"+
    "\5\0\1\u0246\15\0\1\u01d4\107\0\1\u0247\74\0\1\u0248"+
    "\61\0\1\u0249\100\0\1\u024a\60\0\1\u024b\66\0\1\u024c"+
    "\104\0\1\u024d\62\0\1\u024e\57\0\1\u024f\75\0\1\u0250"+
    "\63\0\1\u0251\102\0\1\u0252\52\0\1\u0253\100\0\1\u0254"+
    "\67\0\1\u0255\56\0\1\u0256\67\0\1\u0257\105\0\1\u0258"+
    "\66\0\1\u0259\64\0\1\u025a\55\0\1\u025b\100\0\1\u025c"+
    "\65\0\1\u025d\65\0\1\u025e\62\0\1\u025f\73\0\1\u0260"+
    "\76\0\1\u0261\71\0\1\u0262\60\0\1\u0263\61\0\1\u0264"+
    "\67\0\1\u0265\66\0\1\u0266\70\0\1\u0267\75\0\1\u0268"+
    "\61\0\1\u0269\76\0\1\u026a\60\0\1\u026b\104\0\1\u026c"+
    "\63\0\1\u026d\36\0\3\u01fe\1\0\2\u01fe\1\0\3\u01fe"+
    "\2\0\1\u01fe\1\0\24\u01fe\2\0\1\u01fe\5\0\1\u01fe"+
    "\15\0\3\257\1\0\2\257\1\0\3\257\1\u017a\1\0"+
    "\1\257\1\0\11\257\1\u026e\12\257\2\0\1\257\5\0"+
    "\1\257\15\0\3\257\1\0\2\257\1\0\3\257\1\u017a"+
    "\1\0\1\257\1\0\1\257\1\u026f\22\257\2\0\1\257"+
    "\5\0\1\257\15\0\3\257\1\0\2\257\1\0\3\257"+
    "\1\u017a\1\0\1\257\1\0\11\257\1\u0270\12\257\2\0"+
    "\1\257\5\0\1\257\15\0\3\257\1\0\2\257\1\0"+
    "\3\257\1\u017a\1\0\1\257\1\0\3\257\1\u0271\20\257"+
    "\2\0\1\257\5\0\1\257\15\0\3\257\1\0\2\257"+
    "\1\0\3\257\1\u017a\1\0\1\257\1\0\11\257\1\u0272"+
    "\12\257\2\0\1\257\5\0\1\257\15\0\3\257\1\0"+
    "\2\257\1\0\3\257\1\u017a\1\0\1\257\1\0\6\257"+
    "\1\u0273\15\257\2\0\1\257\5\0\1\257\15\0\3\257"+
    "\1\0\2\257\1\0\3\257\1\u017a\1\0\1\257\1\0"+
    "\15\257\1\u0274\6\257\2\0\1\257\5\0\1\257\15\0"+
    "\3\257\1\0\2\257\1\0\3\257\1\u017a\1\0\1\257"+
    "\1\0\5\257\1\u0275\16\257\2\0\1\257\5\0\1\257"+
    "\15\0\3\257\1\0\2\257\1\0\3\257\1\u017a\1\0"+
    "\1\257\1\0\2\257\1\u0276\21\257\2\0\1\257\5\0"+
    "\1\257\15\0\3\257\1\0\2\257\1\0\3\257\1\u017a"+
    "\1\0\1\257\1\0\2\257\1\u0277\21\257\2\0\1\257"+
    "\5\0\1\257\44\0\1\u0278\60\0\1\u0279\47\0\3\u020b"+
    "\1\0\2\u020b\1\0\3\u020b\2\0\1\u020b\1\0\24\u020b"+
    "\2\0\1\u020b\5\0\1\u020b\36\0\1\u027a\66\0\1\u027b"+
    "\67\0\1\u027c\105\0\1\u027d\51\0\1\u027e\70\0\1\u027f"+
    "\66\0\1\u0280\100\0\1\u0281\56\0\1\u0282\75\0\1\u0283"+
    "\61\0\1\u0284\66\0\1\u0285\101\0\1\u0286\67\0\1\u0287"+
    "\36\0\1\u021d\67\0\3\u021f\1\0\2\u021f\1\0\3\u021f"+
    "\2\0\1\u021f\1\0\24\u021f\2\0\1\u021f\5\0\1\u021f"+
    "\15\0\3\u01a1\1\0\2\u01a1\1\0\3\u01a1\1\u01a2\1\0"+
    "\1\u01a1\1\0\3\u01a1\1\u0288\20\u01a1\2\0\1\u01a1\5\0"+
    "\1\u01a1\15\0\3\u01a1\1\0\2\u01a1\1\0\3\u01a1\1\u01a2"+
    "\1\0\1\u01a1\1\0\6\u01a1\1\u0289\15\u01a1\2\0\1\u01a1"+
    "\5\0\1\u01a1\15\0\3\u01a1\1\0\2\u01a1\1\0\3\u01a1"+
    "\1\u01a2\1\0\1\u01a1\1\0\7\u01a1\1\u028a\14\u01a1\2\0"+
    "\1\u01a1\5\0\1\u01a1\15\0\3\u01a1\1\0\2\u01a1\1\0"+
    "\3\u01a1\1\u01a2\1\0\1\u01a1\1\0\3\u01a1\1\u028b\20\u01a1"+
    "\2\0\1\u01a1\5\0\1\u01a1\15\0\3\u01a1\1\0\2\u01a1"+
    "\1\0\3\u01a1\1\u01a2\1\0\1\u01a1\1\0\2\u01a1\1\u028c"+
    "\21\u01a1\2\0\1\u01a1\5\0\1\u01a1\15\0\3\u01a1\1\0"+
    "\2\u01a1\1\0\3\u01a1\1\u01a2\1\0\1\u01a1\1\0\2\u01a1"+
    "\1\u028d\21\u01a1\2\0\1\u01a1\5\0\1\u01a1\15\0\3\u01a1"+
    "\1\0\2\u01a1\1\0\3\u01a1\1\u01a2\1\0\1\u01a1\1\0"+
    "\6\u01a1\1\u028e\15\u01a1\2\0\1\u01a1\5\0\1\u01a1\15\0"+
    "\3\u01a1\1\0\2\u01a1\1\0\3\u01a1\1\u01a2\1\0\1\u01a1"+
    "\1\0\2\u01a1\1\u028f\21\u01a1\2\0\1\u01a1\5\0\1\u01a1"+
    "\15\0\3\u01a1\1\0\2\u01a1\1\0\3\u01a1\1\u01a2\1\0"+
    "\1\u01a1\1\0\23\u01a1\1\u0290\2\0\1\u01a1\5\0\1\u01a1"+
    "\15\0\3\u01a1\1\0\2\u01a1\1\0\3\u01a1\1\u01a2\1\0"+
    "\1\u01a1\1\0\7\u01a1\1\u0291\14\u01a1\2\0\1\u01a1\5\0"+
    "\1\u01a1\26\0\1\u0292\56\0\3\u022b\1\0\2\u022b\1\0"+
    "\3\u022b\2\0\1\u022b\1\0\24\u022b\2\0\1\u022b\5\0"+
    "\1\u022b\15\0\3\u0106\1\0\2\u0106\1\0\3\u0106\1\u01af"+
    "\1\0\1\u0106\1\0\11\u0106\1\u0293\12\u0106\2\0\1\u0106"+
    "\5\0\1\u0106\15\0\3\u0106\1\0\2\u0106\1\0\3\u0106"+
    "\1\u01af\1\0\1\u0106\1\0\1\u0106\1\u0294\22\u0106\2\0"+
    "\1\u0106\5\0\1\u0106\15\0\3\u0106\1\0\2\u0106\1\0"+
    "\3\u0106\1\u01af\1\0\1\u0106\1\0\11\u0106\1\u0295\12\u0106"+
    "\2\0\1\u0106\5\0\1\u0106\15\0\3\u0106\1\0\2\u0106"+
    "\1\0\3\u0106\1\u01af\1\0\1\u0106\1\0\3\u0106\1\u0296"+
    "\20\u0106\2\0\1\u0106\5\0\1\u0106\15\0\3\u0106\1\0"+
    "\2\u0106\1\0\3\u0106\1\u01af\1\0\1\u0106\1\0\11\u0106"+
    "\1\u0297\12\u0106\2\0\1\u0106\5\0\1\u0106\15\0\3\u0106"+
    "\1\0\2\u0106\1\0\3\u0106\1\u01af\1\0\1\u0106\1\0"+
    "\6\u0106\1\u0298\15\u0106\2\0\1\u0106\5\0\1\u0106\15\0"+
    "\3\u0106\1\0\2\u0106\1\0\3\u0106\1\u01af\1\0\1\u0106"+
    "\1\0\15\u0106\1\u0299\6\u0106\2\0\1\u0106\5\0\1\u0106"+
    "\15\0\3\u0106\1\0\2\u0106\1\0\3\u0106\1\u01af\1\0"+
    "\1\u0106\1\0\5\u0106\1\u029a\16\u0106\2\0\1\u0106\5\0"+
    "\1\u0106\15\0\3\u0106\1\0\2\u0106\1\0\3\u0106\1\u01af"+
    "\1\0\1\u0106\1\0\2\u0106\1\u029b\21\u0106\2\0\1\u0106"+
    "\5\0\1\u0106\15\0\3\u0106\1\0\2\u0106\1\0\3\u0106"+
    "\1\u01af\1\0\1\u0106\1\0\2\u0106\1\u029c\21\u0106\2\0"+
    "\1\u0106\5\0\1\u0106\35\0\1\u029d\107\0\1\u029e\50\0"+
    "\1\u029f\67\0\1\u02a0\66\0\1\u02a1\73\0\1\u02a2\63\0"+
    "\1\u02a3\102\0\1\u02a4\71\0\1\u02a5\60\0\1\u02a6\66\0"+
    "\1\u02a7\102\0\1\u02a8\27\0\3\u0246\1\0\2\u0246\1\0"+
    "\3\u0246\2\0\1\u0246\1\0\24\u0246\2\0\1\u0246\5\0"+
    "\1\u0246\36\0\1\u02a9\74\0\1\u02aa\66\0\1\u02ab\63\0"+
    "\1\u02ac\71\0\1\u02ad\65\0\1\u02ae\77\0\1\u02af\61\0"+
    "\1\u02b0\101\0\1\u02b1\51\0\1\u02b2\61\0\1\u02b3\111\0"+
    "\1\u02b4\55\0\1\u02b5\76\0\1\u02b6\65\0\1\u02b7\76\0"+
    "\1\u02b8\43\0\1\u02b9\101\0\1\u02ba\64\0\1\u02bb\70\0"+
    "\1\u02bc\67\0\1\u02bd\104\0\1\u02be\51\0\1\u02bf\75\0"+
    "\1\u02c0\62\0\1\u02c1\101\0\1\u02c2\56\0\1\u02c3\100\0"+
    "\1\u02c4\67\0\1\u02c5\71\0\1\u02c6\53\0\1\u02c7\73\0"+
    "\1\u02c8\71\0\1\u02c9\57\0\1\u02ca\105\0\1\u02cb\52\0"+
    "\1\u02cc\104\0\1\u02cd\52\0\1\u02ce\101\0\1\u02cf\35\0"+
    "\3\257\1\0\2\257\1\0\3\257\1\u017a\1\0\1\257"+
    "\1\0\2\257\1\u02d0\21\257\2\0\1\257\5\0\1\257"+
    "\15\0\3\257\1\0\2\257\1\0\3\257\1\u017a\1\0"+
    "\1\257\1\0\11\257\1\u02d1\12\257\2\0\1\257\5\0"+
    "\1\257\15\0\3\257\1\0\2\257\1\0\3\257\1\u017a"+
    "\1\0\1\257\1\0\2\257\1\u02d2\21\257\2\0\1\257"+
    "\5\0\1\257\15\0\3\257\1\0\2\257\1\0\3\257"+
    "\1\u017a\1\0\1\257\1\0\13\257\1\u02d3\10\257\2\0"+
    "\1\257\5\0\1\257\15\0\3\257\1\0\2\257\1\0"+
    "\3\257\1\u017a\1\0\1\257\1\0\2\257\1\u02d4\21\257"+
    "\2\0\1\257\5\0\1\257\15\0\3\257\1\0\2\257"+
    "\1\0\3\257\1\u017a\1\0\1\257\1\0\11\257\1\u02d5"+
    "\12\257\2\0\1\257\5\0\1\257\35\0\1\u02d6\76\0"+
    "\1\u02d7\62\0\1\u027c\102\0\1\u02d8\54\0\1\u02d9\102\0"+
    "\1\u02da\67\0\1\u02db\51\0\1\u02dc\71\0\1\u02dd\71\0"+
    "\1\u02de\70\0\1\u02df\43\0\3\u01a1\1\0\2\u01a1\1\0"+
    "\3\u01a1\1\u01a2\1\0\1\u01a1\1\0\5\u01a1\1\u02e0\16\u01a1"+
    "\2\0\1\u01a1\5\0\1\u01a1\15\0\3\u01a1\1\0\2\u01a1"+
    "\1\0\3\u01a1\1\u01a2\1\0\1\u01a1\1\0\2\u01a1\1\u02e1"+
    "\21\u01a1\2\0\1\u01a1\5\0\1\u01a1\15\0\3\u01a1\1\0"+
    "\2\u01a1\1\0\3\u01a1\1\u01a2\1\0\1\u01a1\1\0\5\u01a1"+
    "\1\u02e2\16\u01a1\2\0\1\u01a1\5\0\1\u01a1\15\0\3\u01a1"+
    "\1\0\2\u01a1\1\0\3\u01a1\1\u01a2\1\0\1\u01a1\1\0"+
    "\13\u01a1\1\u02e3\10\u01a1\2\0\1\u01a1\5\0\1\u01a1\15\0"+
    "\3\u01a1\1\0\2\u01a1\1\0\3\u01a1\1\u01a2\1\0\1\u01a1"+
    "\1\0\17\u01a1\1\u02e4\4\u01a1\2\0\1\u01a1\5\0\1\u01a1"+
    "\15\0\3\u01a1\1\0\2\u01a1\1\0\3\u01a1\1\u01a2\1\0"+
    "\1\u01a1\1\0\3\u01a1\1\u02e5\20\u01a1\2\0\1\u01a1\5\0"+
    "\1\u01a1\15\0\3\u01a1\1\0\2\u01a1\1\0\3\u01a1\1\u01a2"+
    "\1\0\1\u01a1\1\0\2\u01a1\1\u02e6\21\u01a1\2\0\1\u01a1"+
    "\5\0\1\u01a1\15\0\3\u01a1\1\0\2\u01a1\1\0\3\u01a1"+
    "\1\u01a2\1\0\1\u01a1\1\0\20\u01a1\1\u02e7\3\u01a1\2\0"+
    "\1\u01a1\5\0\1\u01a1\15\0\3\u01a1\1\0\2\u01a1\1\0"+
    "\3\u01a1\1\u01a2\1\0\1\u01a1\1\0\12\u01a1\1\u02e8\11\u01a1"+
    "\2\0\1\u01a1\5\0\1\u01a1\15\0\3\u0106\1\0\2\u0106"+
    "\1\0\3\u0106\1\u01af\1\0\1\u0106\1\0\2\u0106\1\u02e9"+
    "\21\u0106\2\0\1\u0106\5\0\1\u0106\15\0\3\u0106\1\0"+
    "\2\u0106\1\0\3\u0106\1\u01af\1\0\1\u0106\1\0\11\u0106"+
    "\1\u02ea\12\u0106\2\0\1\u0106\5\0\1\u0106\15\0\3\u0106"+
    "\1\0\2\u0106\1\0\3\u0106\1\u01af\1\0\1\u0106\1\0"+
    "\2\u0106\1\u02eb\21\u0106\2\0\1\u0106\5\0\1\u0106\15\0"+
    "\3\u0106\1\0\2\u0106\1\0\3\u0106\1\u01af\1\0\1\u0106"+
    "\1\0\13\u0106\1\u02ec\10\u0106\2\0\1\u0106\5\0\1\u0106"+
    "\15\0\3\u0106\1\0\2\u0106\1\0\3\u0106\1\u01af\1\0"+
    "\1\u0106\1\0\2\u0106\1\u02ed\21\u0106\2\0\1\u0106\5\0"+
    "\1\u0106\15\0\3\u0106\1\0\2\u0106\1\0\3\u0106\1\u01af"+
    "\1\0\1\u0106\1\0\11\u0106\1\u02ee\12\u0106\2\0\1\u0106"+
    "\5\0\1\u0106\36\0\1\u02ef\73\0\1\u02f0\62\0\1\u02f1"+
    "\67\0\1\u02f2\70\0\1\u02f3\66\0\1\u02f4\105\0\1\u02f5"+
    "\53\0\1\u02f6\100\0\1\u02f7\67\0\1\u02f8\62\0\1\u02f9"+
    "\66\0\1\u02fa\64\0\1\u02fb\66\0\1\u02fc\66\0\1\u02fd"+
    "\102\0\1\u02fe\54\0\1\u02ff\67\0\1\u0300\77\0\1\u0301"+
    "\70\0\1\u0302\70\0\1\u0303\62\0\1\u0304\100\0\1\u0305"+
    "\52\0\1\u0306\77\0\1\u0307\74\0\1\u0308\71\0\1\u0309"+
    "\61\0\1\u030a\54\0\1\u030b\76\0\1\u030c\62\0\1\u030d"+
    "\66\0\1\u030e\100\0\1\u030f\102\0\1\u0310\61\0\1\u0311"+
    "\64\0\1\u0312\65\0\1\u0313\56\0\1\u0314\101\0\1\u0315"+
    "\73\0\1\u0316\51\0\1\u0317\75\0\1\u0318\66\0\1\u0319"+
    "\74\0\1\u031a\73\0\1\u031b\63\0\1\u031c\56\0\1\u031d"+
    "\46\0\3\257\1\0\2\257\1\0\3\257\1\u017a\1\0"+
    "\1\257\1\0\20\257\1\u031e\3\257\2\0\1\257\5\0"+
    "\1\257\15\0\3\257\1\0\2\257\1\0\3\257\1\u017a"+
    "\1\0\1\257\1\0\2\257\1\u031f\21\257\2\0\1\257"+
    "\5\0\1\257\15\0\3\257\1\0\2\257\1\0\3\257"+
    "\1\u017a\1\0\1\257\1\0\20\257\1\u0320\3\257\2\0"+
    "\1\257\5\0\1\257\15\0\3\257\1\0\2\257\1\0"+
    "\3\257\1\u017a\1\0\1\257\1\0\22\257\1\u0321\1\257"+
    "\2\0\1\257\5\0\1\257\15\0\3\257\1\0\2\257"+
    "\1\0\3\257\1\u017a\1\0\1\257\1\0\17\257\1\u0322"+
    "\4\257\2\0\1\257\5\0\1\257\15\0\3\257\1\0"+
    "\2\257\1\0\3\257\1\u017a\1\0\1\257\1\0\10\257"+
    "\1\u0323\13\257\2\0\1\257\5\0\1\257\53\0\1\u0324"+
    "\57\0\1\u0325\113\0\1\u0326\56\0\1\u0327\100\0\1\u0328"+
    "\42\0\1\u0329\100\0\1\u032a\57\0\1\u032b\74\0\1\u032c"+
    "\34\0\3\u01a1\1\0\2\u01a1\1\0\3\u01a1\1\u01a2\1\0"+
    "\1\u01a1\1\0\2\u01a1\1\u032d\21\u01a1\2\0\1\u01a1\5\0"+
    "\1\u01a1\15\0\3\u01a1\1\0\2\u01a1\1\0\3\u01a1\1\u01a2"+
    "\1\0\1\u01a1\1\0\20\u01a1\1\u032e\3\u01a1\2\0\1\u01a1"+
    "\5\0\1\u01a1\15\0\3\u01a1\1\0\2\u01a1\1\0\3\u01a1"+
    "\1\u01a2\1\0\1\u01a1\1\0\22\u01a1\1\u032f\1\u01a1\2\0"+
    "\1\u01a1\5\0\1\u01a1\15\0\3\u01a1\1\0\2\u01a1\1\0"+
    "\3\u01a1\1\u01a2\1\0\1\u01a1\1\0\15\u01a1\1\u0330\6\u01a1"+
    "\2\0\1\u01a1\5\0\1\u01a1\15\0\3\u01a1\1\0\2\u01a1"+
    "\1\0\3\u01a1\1\u01a2\1\0\1\u01a1\1\0\2\u01a1\1\u0331"+
    "\21\u01a1\2\0\1\u01a1\5\0\1\u01a1\15\0\3\u01a1\1\0"+
    "\2\u01a1\1\0\3\u01a1\1\u01a2\1\0\1\u01a1\1\0\2\u01a1"+
    "\1\u0332\21\u01a1\2\0\1\u01a1\5\0\1\u01a1\15\0\3\u01a1"+
    "\1\0\2\u01a1\1\0\3\u01a1\1\u01a2\1\0\1\u01a1\1\0"+
    "\15\u01a1\1\u02e2\6\u01a1\2\0\1\u01a1\5\0\1\u01a1\15\0"+
    "\3\u01a1\1\0\2\u01a1\1\0\3\u01a1\1\u01a2\1\0\1\u01a1"+
    "\1\0\24\u01a1\2\0\1\u01a1\5\0\1\u0333\15\0\3\u0106"+
    "\1\0\2\u0106\1\0\3\u0106\1\u01af\1\0\1\u0106\1\0"+
    "\20\u0106\1\u0334\3\u0106\2\0\1\u0106\5\0\1\u0106\15\0"+
    "\3\u0106\1\0\2\u0106\1\0\3\u0106\1\u01af\1\0\1\u0106"+
    "\1\0\2\u0106\1\u0335\21\u0106\2\0\1\u0106\5\0\1\u0106"+
    "\15\0\3\u0106\1\0\2\u0106\1\0\3\u0106\1\u01af\1\0"+
    "\1\u0106\1\0\20\u0106\1\u0336\3\u0106\2\0\1\u0106\5\0"+
    "\1\u0106\15\0\3\u0106\1\0\2\u0106\1\0\3\u0106\1\u01af"+
    "\1\0\1\u0106\1\0\22\u0106\1\u0337\1\u0106\2\0\1\u0106"+
    "\5\0\1\u0106\15\0\3\u0106\1\0\2\u0106\1\0\3\u0106"+
    "\1\u01af\1\0\1\u0106\1\0\17\u0106\1\u0338\4\u0106\2\0"+
    "\1\u0106\5\0\1\u0106\15\0\3\u0106\1\0\2\u0106\1\0"+
    "\3\u0106\1\u01af\1\0\1\u0106\1\0\10\u0106\1\u0339\13\u0106"+
    "\2\0\1\u0106\5\0\1\u0106\35\0\1\u02ef\105\0\1\u033a"+
    "\54\0\1\u033b\64\0\1\u033c\102\0\1\u033d\54\0\1\u033e"+
    "\67\0\1\u033f\70\0\1\u0340\71\0\1\u0341\102\0\1\u0342"+
    "\67\0\1\u0343\57\0\1\u0344\74\0\1\u0345\62\0\1\u0346"+
    "\60\0\1\u0347\106\0\1\u0348\56\0\1\u0349\70\0\1\u034a"+
    "\62\0\1\u034b\67\0\1\u034c\102\0\1\u034d\70\0\1\u034e"+
    "\65\0\1\u034f\54\0\1\u0350\102\0\1\u0351\65\0\1\u0352"+
    "\66\0\1\u0353\74\0\1\u0354\60\0\1\u0355\67\0\1\u0356"+
    "\74\0\1\u0357\62\0\1\u0358\74\0\1\u0359\62\0\1\u035a"+
    "\75\0\1\u035b\33\0\3\257\1\0\2\257\1\0\3\257"+
    "\1\u017a\1\0\1\257\1\0\15\257\1\u035c\6\257\2\0"+
    "\1\257\5\0\1\257\15\0\3\257\1\0\2\257\1\0"+
    "\3\257\1\u017a\1\0\1\257\1\0\20\257\1\u035d\3\257"+
    "\2\0\1\257\5\0\1\257\15\0\3\257\1\0\2\257"+
    "\1\0\3\257\1\u017a\1\0\1\257\1\0\15\257\1\u035e"+
    "\6\257\2\0\1\257\5\0\1\257\15\0\3\257\1\0"+
    "\2\257\1\0\3\257\1\u017a\1\0\1\257\1\0\1\257"+
    "\1\u035f\22\257\2\0\1\257\5\0\1\257\15\0\3\257"+
    "\1\0\2\257\1\0\3\257\1\u017a\1\0\1\257\1\0"+
    "\17\257\1\u0360\4\257\2\0\1\257\5\0\1\257\15\0"+
    "\3\257\1\0\2\257\1\0\2\257\1\u0361\1\u017a\1\0"+
    "\1\257\1\0\24\257\2\0\1\257\5\0\1\257\50\0"+
    "\1\u0362\45\0\1\u0363\107\0\1\u0364\67\0\1\u0365\67\0"+
    "\1\u0366\71\0\1\u0367\67\0\1\u0368\34\0\3\u01a1\1\0"+
    "\2\u01a1\1\0\3\u01a1\1\u01a2\1\0\1\u01a1\1\0\3\u01a1"+
    "\1\u0369\20\u01a1\2\0\1\u01a1\5\0\1\u01a1\15\0\3\u01a1"+
    "\1\0\2\u01a1\1\0\3\u01a1\1\u01a2\1\0\1\u01a1\1\0"+
    "\5\u01a1\1\u036a\16\u01a1\2\0\1\u01a1\5\0\1\u01a1\15\0"+
    "\3\u01a1\1\0\2\u01a1\1\0\3\u01a1\1\u01a2\1\0\1\u01a1"+
    "\1\0\1\u01a1\1\u036b\22\u01a1\2\0\1\u01a1\5\0\1\u01a1"+
    "\15\0\3\u01a1\1\0\2\u01a1\1\0\3\u01a1\1\u01a2\1\0"+
    "\1\u01a1\1\0\12\u01a1\1\u036c\11\u01a1\2\0\1\u01a1\5\0"+
    "\1\u01a1\15\0\3\u01a1\1\0\2\u01a1\1\0\3\u01a1\1\u01a2"+
    "\1\0\1\u01a1\1\0\5\u01a1\1\u036d\16\u01a1\2\0\1\u01a1"+
    "\5\0\1\u01a1\15\0\3\u01a1\1\0\2\u01a1\1\0\3\u01a1"+
    "\1\u01a2\1\0\1\u01a1\1\0\5\u01a1\1\u036e\16\u01a1\2\0"+
    "\1\u01a1\5\0\1\u01a1\15\0\3\u01a1\1\0\2\u01a1\1\0"+
    "\3\u01a1\1\u01a2\1\0\1\u01a1\1\0\13\u01a1\1\u036f\10\u01a1"+
    "\2\0\1\u01a1\5\0\1\u01a1\15\0\3\u0106\1\0\2\u0106"+
    "\1\0\3\u0106\1\u01af\1\0\1\u0106\1\0\15\u0106\1\u0370"+
    "\6\u0106\2\0\1\u0106\5\0\1\u0106\15\0\3\u0106\1\0"+
    "\2\u0106\1\0\3\u0106\1\u01af\1\0\1\u0106\1\0\20\u0106"+
    "\1\u0371\3\u0106\2\0\1\u0106\5\0\1\u0106\15\0\3\u0106"+
    "\1\0\2\u0106\1\0\3\u0106\1\u01af\1\0\1\u0106\1\0"+
    "\15\u0106\1\u0372\6\u0106\2\0\1\u0106\5\0\1\u0106\15\0"+
    "\3\u0106\1\0\2\u0106\1\0\3\u0106\1\u01af\1\0\1\u0106"+
    "\1\0\1\u0106\1\u0373\22\u0106\2\0\1\u0106\5\0\1\u0106"+
    "\15\0\3\u0106\1\0\2\u0106\1\0\3\u0106\1\u01af\1\0"+
    "\1\u0106\1\0\17\u0106\1\u0374\4\u0106\2\0\1\u0106\5\0"+
    "\1\u0106\15\0\3\u0106\1\0\2\u0106\1\0\2\u0106\1\u0375"+
    "\1\u01af\1\0\1\u0106\1\0\24\u0106\2\0\1\u0106\5\0"+
    "\1\u0106\40\0\1\u0376\75\0\1\u0377\73\0\1\u0378\63\0"+
    "\1\u0379\56\0\1\u037a\106\0\1\u037b\54\0\1\u037c\72\0"+
    "\1\u037d\64\0\1\u037e\102\0\1\u037f\50\0\1\u0380\73\0"+
    "\1\u0381\74\0\1\u0382\60\0\1\u0383\65\0\1\u0384\67\0"+
    "\1\u0385\70\0\1\u0386\76\0\1\u0387\75\0\1\u0388\64\0"+
    "\1\u0389\60\0\1\u038a\70\0\1\u038b\66\0\1\u038c\67\0"+
    "\1\u038d\63\0\1\u038e\47\0\3\257\1\0\2\257\1\0"+
    "\3\257\1\u017a\1\0\1\257\1\0\15\257\1\u038f\6\257"+
    "\2\0\1\257\5\0\1\257\15\0\3\257\1\0\2\257"+
    "\1\0\3\257\1\u017a\1\0\1\257\1\0\15\257\1\u0390"+
    "\6\257\2\0\1\257\5\0\1\257\15\0\3\257\1\0"+
    "\2\257\1\0\3\257\1\u017a\1\0\1\257\1\0\13\257"+
    "\1\u0391\10\257\2\0\1\257\5\0\1\257\15\0\3\257"+
    "\1\0\2\257\1\0\3\257\1\u017a\1\0\1\257\1\0"+
    "\2\257\1\u0392\5\257\1\u0393\13\257\2\0\1\257\5\0"+
    "\1\257\35\0\1\u0394\102\0\1\u0395\54\0\1\u0396\102\0"+
    "\1\u0397\54\0\1\u0398\47\0\3\u01a1\1\0\2\u01a1\1\0"+
    "\3\u01a1\1\u01a2\1\0\1\u01a1\1\0\2\u01a1\1\u0399\21\u01a1"+
    "\2\0\1\u01a1\5\0\1\u01a1\15\0\3\u01a1\1\0\2\u01a1"+
    "\1\0\3\u01a1\1\u01a2\1\0\1\u01a1\1\0\10\u01a1\1\u039a"+
    "\13\u01a1\2\0\1\u01a1\5\0\1\u01a1\15\0\3\u01a1\1\0"+
    "\2\u01a1\1\0\3\u01a1\1\u01a2\1\0\1\u01a1\1\0\15\u01a1"+
    "\1\u039b\6\u01a1\2\0\1\u01a1\5\0\1\u01a1\15\0\3\u01a1"+
    "\1\0\2\u01a1\1\0\3\u01a1\1\u01a2\1\0\1\u01a1\1\0"+
    "\3\u01a1\1\u039c\20\u01a1\2\0\1\u01a1\5\0\1\u01a1\15\0"+
    "\3\u01a1\1\0\2\u01a1\1\0\3\u01a1\1\u01a2\1\0\1\u01a1"+
    "\1\0\13\u01a1\1\u039d\10\u01a1\2\0\1\u01a1\5\0\1\u01a1"+
    "\15\0\3\u01a1\1\0\2\u01a1\1\0\3\u01a1\1\u01a2\1\0"+
    "\1\u01a1\1\0\20\u01a1\1\u039e\3\u01a1\2\0\1\u01a1\5\0"+
    "\1\u01a1\15\0\3\u0106\1\0\2\u0106\1\0\3\u0106\1\u01af"+
    "\1\0\1\u0106\1\0\15\u0106\1\u039f\6\u0106\2\0\1\u0106"+
    "\5\0\1\u0106\15\0\3\u0106\1\0\2\u0106\1\0\3\u0106"+
    "\1\u01af\1\0\1\u0106\1\0\15\u0106\1\u03a0\6\u0106\2\0"+
    "\1\u0106\5\0\1\u0106\15\0\3\u0106\1\0\2\u0106\1\0"+
    "\3\u0106\1\u01af\1\0\1\u0106\1\0\13\u0106\1\u03a1\10\u0106"+
    "\2\0\1\u0106\5\0\1\u0106\15\0\3\u0106\1\0\2\u0106"+
    "\1\0\3\u0106\1\u01af\1\0\1\u0106\1\0\2\u0106\1\u03a2"+
    "\5\u0106\1\u03a3\13\u0106\2\0\1\u0106\5\0\1\u0106\46\0"+
    "\1\u03a4\74\0\1\u03a5\64\0\1\u03a6\64\0\1\u03a7\62\0"+
    "\1\u03a8\64\0\1\u03a9\67\0\1\u03aa\102\0\1\u03ab\54\0"+
    "\1\u03ac\60\0\1\u03ad\77\0\1\u03ae\77\0\1\u03af\74\0"+
    "\1\u03b0\51\0\1\u03b1\67\0\1\u03b2\67\0\1\u03b3\47\0"+
    "\3\257\1\0\2\257\1\0\2\257\1\u03b4\1\u017a\1\0"+
    "\1\257\1\0\24\257\2\0\1\257\5\0\1\257\15\0"+
    "\3\257\1\0\2\257\1\0\3\257\1\u017a\1\0\1\257"+
    "\1\0\2\257\1\u03b5\21\257\2\0\1\257\5\0\1\257"+
    "\15\0\3\257\1\0\2\257\1\0\3\257\1\u017a\1\0"+
    "\1\257\1\0\20\257\1\u03b6\3\257\2\0\1\257\5\0"+
    "\1\257\15\0\3\257\1\0\2\257\1\0\3\257\1\u017a"+
    "\1\0\1\257\1\0\7\257\1\u03b7\14\257\2\0\1\257"+
    "\5\0\1\257\15\0\3\257\1\0\2\257\1\0\3\257"+
    "\1\u017a\1\0\1\257\1\0\15\257\1\u03b8\6\257\2\0"+
    "\1\257\5\0\1\257\42\0\1\u03b9\66\0\1\u03ba\100\0"+
    "\1\u03bb\56\0\1\u03bc\43\0\3\u01a1\1\0\2\u01a1\1\0"+
    "\3\u01a1\1\u01a2\1\0\1\u01a1\1\0\5\u01a1\1\u03bd\16\u01a1"+
    "\2\0\1\u01a1\5\0\1\u01a1\15\0\3\u01a1\1\0\2\u01a1"+
    "\1\0\3\u01a1\1\u01a2\1\0\1\u01a1\1\0\20\u01a1\1\u03be"+
    "\3\u01a1\2\0\1\u01a1\5\0\1\u01a1\15\0\3\u01a1\1\0"+
    "\2\u01a1\1\0\3\u01a1\1\u01a2\1\0\1\u01a1\1\0\2\u01a1"+
    "\1\u03bf\21\u01a1\2\0\1\u01a1\5\0\1\u01a1\15\0\3\u01a1"+
    "\1\0\2\u01a1\1\0\2\u01a1\1\u03c0\1\u01a2\1\0\1\u01a1"+
    "\1\0\24\u01a1\2\0\1\u01a1\5\0\1\u01a1\15\0\3\u01a1"+
    "\1\0\2\u01a1\1\0\3\u01a1\1\u01a2\1\0\1\u01a1\1\0"+
    "\20\u01a1\1\u03c1\3\u01a1\2\0\1\u01a1\5\0\1\u01a1\15\0"+
    "\3\u01a1\1\0\2\u01a1\1\0\3\u01a1\1\u01a2\1\0\1\u01a1"+
    "\1\0\21\u01a1\1\u03c2\2\u01a1\2\0\1\u01a1\5\0\1\u01a1"+
    "\15\0\3\u0106\1\0\2\u0106\1\0\2\u0106\1\u03c3\1\u01af"+
    "\1\0\1\u0106\1\0\24\u0106\2\0\1\u0106\5\0\1\u0106"+
    "\15\0\3\u0106\1\0\2\u0106\1\0\3\u0106\1\u01af\1\0"+
    "\1\u0106\1\0\2\u0106\1\u03c4\21\u0106\2\0\1\u0106\5\0"+
    "\1\u0106\15\0\3\u0106\1\0\2\u0106\1\0\3\u0106\1\u01af"+
    "\1\0\1\u0106\1\0\20\u0106\1\u03c5\3\u0106\2\0\1\u0106"+
    "\5\0\1\u0106\15\0\3\u0106\1\0\2\u0106\1\0\3\u0106"+
    "\1\u01af\1\0\1\u0106\1\0\7\u0106\1\u03c6\14\u0106\2\0"+
    "\1\u0106\5\0\1\u0106\15\0\3\u0106\1\0\2\u0106\1\0"+
    "\3\u0106\1\u01af\1\0\1\u0106\1\0\15\u0106\1\u03c7\6\u0106"+
    "\2\0\1\u0106\5\0\1\u0106\53\0\1\u03c8\70\0\1\u03c9"+
    "\66\0\1\u03ca\66\0\1\u03cb\63\0\1\u03cc\73\0\1\u03cd"+
    "\66\0\1\u03ce\66\0\1\u03cf\34\0\3\257\1\0\2\257"+
    "\1\0\3\257\1\u017a\1\0\1\257\1\0\20\257\1\u03d0"+
    "\3\257\2\0\1\257\5\0\1\257\15\0\3\257\1\0"+
    "\2\257\1\0\3\257\1\u017a\1\0\1\257\1\0\21\257"+
    "\1\u03d1\2\257\2\0\1\257\5\0\1\257\15\0\3\257"+
    "\1\0\2\257\1\0\3\257\1\u017a\1\0\1\257\1\0"+
    "\2\257\1\u03d2\21\257\2\0\1\257\5\0\1\257\15\0"+
    "\3\257\1\0\2\257\1\0\3\257\1\u017a\1\0\1\257"+
    "\1\0\15\257\1\u03d3\6\257\2\0\1\257\5\0\1\257"+
    "\35\0\1\u03d4\113\0\1\u03d5\67\0\1\u03d6\23\0\3\u01a1"+
    "\1\0\2\u01a1\1\0\3\u01a1\1\u01a2\1\0\1\u01a1\1\0"+
    "\15\u01a1\1\u039c\6\u01a1\2\0\1\u01a1\5\0\1\u01a1\15\0"+
    "\3\u01a1\1\0\2\u01a1\1\0\3\u01a1\1\u01a2\1\0\1\u01a1"+
    "\1\0\12\u01a1\1\u03d7\11\u01a1\2\0\1\u01a1\5\0\1\u01a1"+
    "\15\0\3\u01a1\1\0\2\u01a1\1\0\3\u01a1\1\u01a2\1\0"+
    "\1\u01a1\1\0\21\u01a1\1\u03d8\2\u01a1\2\0\1\u01a1\5\0"+
    "\1\u01a1\15\0\3\u01a1\1\0\2\u01a1\1\0\2\u01a1\1\u03d9"+
    "\1\u01a2\1\0\1\u01a1\1\0\24\u01a1\2\0\1\u01a1\5\0"+
    "\1\u01a1\15\0\3\u0106\1\0\2\u0106\1\0\3\u0106\1\u01af"+
    "\1\0\1\u0106\1\0\20\u0106\1\u03da\3\u0106\2\0\1\u0106"+
    "\5\0\1\u0106\15\0\3\u0106\1\0\2\u0106\1\0\3\u0106"+
    "\1\u01af\1\0\1\u0106\1\0\21\u0106\1\u03db\2\u0106\2\0"+
    "\1\u0106\5\0\1\u0106\15\0\3\u0106\1\0\2\u0106\1\0"+
    "\3\u0106\1\u01af\1\0\1\u0106\1\0\2\u0106\1\u03dc\21\u0106"+
    "\2\0\1\u0106\5\0\1\u0106\15\0\3\u0106\1\0\2\u0106"+
    "\1\0\3\u0106\1\u01af\1\0\1\u0106\1\0\15\u0106\1\u03dd"+
    "\6\u0106\2\0\1\u0106\5\0\1\u0106\54\0\1\u03de\62\0"+
    "\1\u03df\65\0\1\u03e0\71\0\1\u03e1\55\0\1\u03e2\47\0"+
    "\3\257\1\0\2\257\1\0\3\257\1\u017a\1\0\1\257"+
    "\1\0\12\257\1\u03e3\11\257\2\0\1\257\5\0\1\257"+
    "\15\0\3\257\1\0\2\257\1\0\2\257\1\u03e4\1\u017a"+
    "\1\0\1\257\1\0\24\257\2\0\1\257\5\0\1\257"+
    "\15\0\3\257\1\0\2\257\1\0\3\257\1\u017a\1\0"+
    "\1\257\1\0\11\257\1\u03e5\12\257\2\0\1\257\5\0"+
    "\1\257\15\0\3\257\1\0\2\257\1\0\3\257\1\u017a"+
    "\1\0\1\257\1\0\3\257\1\u03e6\20\257\2\0\1\257"+
    "\5\0\1\257\44\0\1\u03e7\40\0\3\u01a1\1\0\2\u01a1"+
    "\1\0\3\u01a1\1\u01a2\1\0\1\u01a1\1\0\3\u01a1\1\u03e8"+
    "\20\u01a1\2\0\1\u01a1\5\0\1\u01a1\15\0\3\u01a1\1\0"+
    "\2\u01a1\1\0\2\u01a1\1\u03e9\1\u01a2\1\0\1\u01a1\1\0"+
    "\24\u01a1\2\0\1\u01a1\5\0\1\u01a1\15\0\3\u01a1\1\0"+
    "\2\u01a1\1\0\3\u01a1\1\u01a2\1\0\1\u01a1\1\0\17\u01a1"+
    "\1\u03ea\4\u01a1\2\0\1\u01a1\5\0\1\u01a1\15\0\3\u0106"+
    "\1\0\2\u0106\1\0\3\u0106\1\u01af\1\0\1\u0106\1\0"+
    "\12\u0106\1\u03eb\11\u0106\2\0\1\u0106\5\0\1\u0106\15\0"+
    "\3\u0106\1\0\2\u0106\1\0\2\u0106\1\u03ec\1\u01af\1\0"+
    "\1\u0106\1\0\24\u0106\2\0\1\u0106\5\0\1\u0106\15\0"+
    "\3\u0106\1\0\2\u0106\1\0\3\u0106\1\u01af\1\0\1\u0106"+
    "\1\0\11\u0106\1\u03ed\12\u0106\2\0\1\u0106\5\0\1\u0106"+
    "\15\0\3\u0106\1\0\2\u0106\1\0\3\u0106\1\u01af\1\0"+
    "\1\u0106\1\0\3\u0106\1\u03ee\20\u0106\2\0\1\u0106\5\0"+
    "\1\u0106\43\0\1\u03ef\77\0\1\u03f0\57\0\1\u03f1\41\0"+
    "\3\257\1\0\2\257\1\0\3\257\1\u017a\1\0\1\257"+
    "\1\0\5\257\1\u03f2\16\257\2\0\1\257\5\0\1\257"+
    "\15\0\3\257\1\0\2\257\1\0\3\257\1\u017a\1\0"+
    "\1\257\1\0\13\257\1\u03f3\10\257\2\0\1\257\5\0"+
    "\1\257\15\0\3\257\1\0\2\257\1\0\3\257\1\u017a"+
    "\1\0\1\257\1\0\2\257\1\u03f4\21\257\2\0\1\257"+
    "\5\0\1\257\15\0\3\257\1\0\2\257\1\0\3\257"+
    "\1\u017a\1\0\1\257\1\0\13\257\1\u03f5\10\257\2\0"+
    "\1\257\5\0\1\257\35\0\1\u03f6\47\0\3\u01a1\1\0"+
    "\2\u01a1\1\0\2\u01a1\1\u03f7\1\u01a2\1\0\1\u01a1\1\0"+
    "\24\u01a1\2\0\1\u01a1\5\0\1\u01a1\15\0\3\u01a1\1\0"+
    "\2\u01a1\1\0\3\u01a1\1\u01a2\1\0\1\u01a1\1\0\17\u01a1"+
    "\1\u03f8\4\u01a1\2\0\1\u01a1\5\0\1\u01a1\15\0\3\u01a1"+
    "\1\0\2\u01a1\1\0\3\u01a1\1\u01a2\1\0\1\u01a1\1\0"+
    "\13\u01a1\1\u03f9\10\u01a1\2\0\1\u01a1\5\0\1\u01a1\15\0"+
    "\3\u0106\1\0\2\u0106\1\0\3\u0106\1\u01af\1\0\1\u0106"+
    "\1\0\5\u0106\1\u03fa\16\u0106\2\0\1\u0106\5\0\1\u0106"+
    "\15\0\3\u0106\1\0\2\u0106\1\0\3\u0106\1\u01af\1\0"+
    "\1\u0106\1\0\13\u0106\1\u03fb\10\u0106\2\0\1\u0106\5\0"+
    "\1\u0106\15\0\3\u0106\1\0\2\u0106\1\0\3\u0106\1\u01af"+
    "\1\0\1\u0106\1\0\2\u0106\1\u03fc\21\u0106\2\0\1\u0106"+
    "\5\0\1\u0106\15\0\3\u0106\1\0\2\u0106\1\0\3\u0106"+
    "\1\u01af\1\0\1\u0106\1\0\13\u0106\1\u03fd\10\u0106\2\0"+
    "\1\u0106\5\0\1\u0106\41\0\1\u03fe\67\0\1\u03ff\43\0"+
    "\3\257\1\0\2\257\1\0\3\257\1\u017a\1\0\1\257"+
    "\1\0\2\257\1\u0400\21\257\2\0\1\257\5\0\1\257"+
    "\15\0\3\257\1\0\2\257\1\0\3\257\1\u017a\1\0"+
    "\1\257\1\0\20\257\1\u0401\3\257\2\0\1\257\5\0"+
    "\1\257\15\0\3\257\1\0\2\257\1\0\3\257\1\u017a"+
    "\1\0\1\257\1\0\20\257\1\u0402\3\257\2\0\1\257"+
    "\5\0\1\257\15\0\3\257\1\0\2\257\1\0\3\257"+
    "\1\u017a\1\0\1\257\1\0\22\257\1\u0403\1\257\2\0"+
    "\1\257\5\0\1\257\53\0\1\u0404\31\0\3\u01a1\1\0"+
    "\2\u01a1\1\0\3\u01a1\1\u01a2\1\0\1\u01a1\1\0\17\u01a1"+
    "\1\u0405\4\u01a1\2\0\1\u01a1\5\0\1\u01a1\15\0\3\u01a1"+
    "\1\0\2\u01a1\1\0\3\u01a1\1\u01a2\1\0\1\u01a1\1\0"+
    "\13\u01a1\1\u0406\10\u01a1\2\0\1\u01a1\5\0\1\u01a1\15\0"+
    "\3\u01a1\1\0\2\u01a1\1\0\3\u01a1\1\u01a2\1\0\1\u01a1"+
    "\1\0\22\u01a1\1\u0407\1\u01a1\2\0\1\u01a1\5\0\1\u01a1"+
    "\15\0\3\u0106\1\0\2\u0106\1\0\3\u0106\1\u01af\1\0"+
    "\1\u0106\1\0\2\u0106\1\u0408\21\u0106\2\0\1\u0106\5\0"+
    "\1\u0106\15\0\3\u0106\1\0\2\u0106\1\0\3\u0106\1\u01af"+
    "\1\0\1\u0106\1\0\20\u0106\1\u0409\3\u0106\2\0\1\u0106"+
    "\5\0\1\u0106\15\0\3\u0106\1\0\2\u0106\1\0\3\u0106"+
    "\1\u01af\1\0\1\u0106\1\0\20\u0106\1\u040a\3\u0106\2\0"+
    "\1\u0106\5\0\1\u0106\15\0\3\u0106\1\0\2\u0106\1\0"+
    "\3\u0106\1\u01af\1\0\1\u0106\1\0\22\u0106\1\u040b\1\u0106"+
    "\2\0\1\u0106\5\0\1\u0106\35\0\1\u040c\67\0\1\u040d"+
    "\47\0\3\257\1\0\2\257\1\0\3\257\1\u017a\1\0"+
    "\1\257\1\0\17\257\1\u040e\4\257\2\0\1\257\5\0"+
    "\1\257\15\0\3\257\1\0\2\257\1\0\3\257\1\u017a"+
    "\1\0\1\257\1\0\15\257\1\u040f\6\257\2\0\1\257"+
    "\5\0\1\257\15\0\3\257\1\0\2\257\1\0\3\257"+
    "\1\u017a\1\0\1\257\1\0\1\257\1\u0410\22\257\2\0"+
    "\1\257\5\0\1\257\50\0\1\u0411\34\0\3\u01a1\1\0"+
    "\2\u01a1\1\0\3\u01a1\1\u01a2\1\0\1\u01a1\1\0\2\u01a1"+
    "\1\u0412\21\u01a1\2\0\1\u01a1\5\0\1\u01a1\15\0\3\u01a1"+
    "\1\0\2\u01a1\1\0\3\u01a1\1\u01a2\1\0\1\u01a1\1\0"+
    "\22\u01a1\1\u0413\1\u01a1\2\0\1\u01a1\5\0\1\u01a1\15\0"+
    "\3\u01a1\1\0\2\u01a1\1\0\3\u01a1\1\u01a2\1\0\1\u01a1"+
    "\1\0\7\u01a1\1\u0414\14\u01a1\2\0\1\u01a1\5\0\1\u01a1"+
    "\15\0\3\u0106\1\0\2\u0106\1\0\3\u0106\1\u01af\1\0"+
    "\1\u0106\1\0\17\u0106\1\u0415\4\u0106\2\0\1\u0106\5\0"+
    "\1\u0106\15\0\3\u0106\1\0\2\u0106\1\0\3\u0106\1\u01af"+
    "\1\0\1\u0106\1\0\15\u0106\1\u0416\6\u0106\2\0\1\u0106"+
    "\5\0\1\u0106\15\0\3\u0106\1\0\2\u0106\1\0\3\u0106"+
    "\1\u01af\1\0\1\u0106\1\0\1\u0106\1\u0417\22\u0106\2\0"+
    "\1\u0106\5\0\1\u0106\52\0\1\u0418\32\0\3\257\1\0"+
    "\2\257\1\0\3\257\1\u017a\1\0\1\257\1\0\15\257"+
    "\1\u0419\6\257\2\0\1\257\5\0\1\257\15\0\3\257"+
    "\1\0\2\257\1\0\3\257\1\u017a\1\0\1\257\1\0"+
    "\15\257\1\u041a\6\257\2\0\1\257\5\0\1\257\15\0"+
    "\3\u01a1\1\0\2\u01a1\1\0\3\u01a1\1\u01a2\1\0\1\u01a1"+
    "\1\0\7\u01a1\1\u041b\14\u01a1\2\0\1\u01a1\5\0\1\u01a1"+
    "\15\0\3\u01a1\1\0\2\u01a1\1\0\3\u01a1\1\u01a2\1\0"+
    "\1\u01a1\1\0\7\u01a1\1\u041c\14\u01a1\2\0\1\u01a1\5\0"+
    "\1\u01a1\15\0\3\u01a1\1\0\2\u01a1\1\0\3\u01a1\1\u01a2"+
    "\1\0\1\u01a1\1\0\13\u01a1\1\u041d\10\u01a1\2\0\1\u01a1"+
    "\5\0\1\u01a1\15\0\3\u0106\1\0\2\u0106\1\0\3\u0106"+
    "\1\u01af\1\0\1\u0106\1\0\15\u0106\1\u041e\6\u0106\2\0"+
    "\1\u0106\5\0\1\u0106\15\0\3\u0106\1\0\2\u0106\1\0"+
    "\3\u0106\1\u01af\1\0\1\u0106\1\0\15\u0106\1\u041f\6\u0106"+
    "\2\0\1\u0106\5\0\1\u0106\15\0\3\257\1\0\2\257"+
    "\1\0\3\257\1\u017a\1\0\1\257\1\0\3\257\1\u0420"+
    "\20\257\2\0\1\257\5\0\1\257\15\0\3\257\1\0"+
    "\2\257\1\0\3\257\1\u017a\1\0\1\257\1\0\2\257"+
    "\1\u0421\21\257\2\0\1\257\5\0\1\257\15\0\3\u01a1"+
    "\1\0\2\u01a1\1\0\3\u01a1\1\u01a2\1\0\1\u01a1\1\0"+
    "\23\u01a1\1\u0422\2\0\1\u01a1\5\0\1\u01a1\15\0\3\u01a1"+
    "\1\0\2\u01a1\1\0\3\u01a1\1\u01a2\1\0\1\u01a1\1\0"+
    "\13\u01a1\1\u0423\10\u01a1\2\0\1\u01a1\5\0\1\u01a1\15\0"+
    "\3\u01a1\1\0\2\u01a1\1\0\3\u01a1\1\u01a2\1\0\1\u01a1"+
    "\1\0\20\u01a1\1\u0424\3\u01a1\2\0\1\u01a1\5\0\1\u01a1"+
    "\15\0\3\u0106\1\0\2\u0106\1\0\3\u0106\1\u01af\1\0"+
    "\1\u0106\1\0\3\u0106\1\u0425\20\u0106\2\0\1\u0106\5\0"+
    "\1\u0106\15\0\3\u0106\1\0\2\u0106\1\0\3\u0106\1\u01af"+
    "\1\0\1\u0106\1\0\2\u0106\1\u0426\21\u0106\2\0\1\u0106"+
    "\5\0\1\u0106\15\0\3\257\1\0\2\257\1\0\3\257"+
    "\1\u017a\1\0\1\257\1\0\1\257\1\u0427\22\257\2\0"+
    "\1\257\5\0\1\257\15\0\3\u01a1\1\0\2\u01a1\1\0"+
    "\3\u01a1\1\u01a2\1\0\1\u01a1\1\0\20\u01a1\1\u0428\3\u01a1"+
    "\2\0\1\u01a1\5\0\1\u01a1\15\0\3\u01a1\1\0\2\u01a1"+
    "\1\0\3\u01a1\1\u01a2\1\0\1\u01a1\1\0\21\u01a1\1\u0429"+
    "\2\u01a1\2\0\1\u01a1\5\0\1\u01a1\15\0\3\u0106\1\0"+
    "\2\u0106\1\0\3\u0106\1\u01af\1\0\1\u0106\1\0\1\u0106"+
    "\1\u042a\22\u0106\2\0\1\u0106\5\0\1\u0106\15\0\3\257"+
    "\1\0\2\257\1\0\3\257\1\u017a\1\0\1\257\1\0"+
    "\6\257\1\u042b\15\257\2\0\1\257\5\0\1\257\15\0"+
    "\3\u01a1\1\0\2\u01a1\1\0\3\u01a1\1\u01a2\1\0\1\u01a1"+
    "\1\0\21\u01a1\1\u03bf\2\u01a1\2\0\1\u01a1\5\0\1\u01a1"+
    "\15\0\3\u0106\1\0\2\u0106\1\0\3\u0106\1\u01af\1\0"+
    "\1\u0106\1\0\6\u0106\1\u042c\15\u0106\2\0\1\u0106\5\0"+
    "\1\u0106\15\0\3\257\1\0\2\257\1\0\3\257\1\u017a"+
    "\1\0\1\257\1\0\15\257\1\u042d\6\257\2\0\1\257"+
    "\5\0\1\257\15\0\3\u0106\1\0\2\u0106\1\0\3\u0106"+
    "\1\u01af\1\0\1\u0106\1\0\15\u0106\1\u042e\6\u0106\2\0"+
    "\1\u0106\5\0\1\u0106\15\0\3\257\1\0\2\257\1\0"+
    "\3\257\1\u017a\1\0\1\257\1\0\13\257\1\u042f\10\257"+
    "\2\0\1\257\5\0\1\257\15\0\3\u0106\1\0\2\u0106"+
    "\1\0\3\u0106\1\u01af\1\0\1\u0106\1\0\13\u0106\1\u0430"+
    "\10\u0106\2\0\1\u0106\5\0\1\u0106\15\0\3\257\1\0"+
    "\2\257\1\0\3\257\1\u017a\1\0\1\257\1\0\12\257"+
    "\1\u0431\11\257\2\0\1\257\5\0\1\257\15\0\3\u0106"+
    "\1\0\2\u0106\1\0\3\u0106\1\u01af\1\0\1\u0106\1\0"+
    "\12\u0106\1\u0432\11\u0106\2\0\1\u0106\5\0\1\u0106\15\0"+
    "\3\257\1\0\2\257\1\0\3\257\1\u017a\1\0\1\257"+
    "\1\0\20\257\1\u0433\3\257\2\0\1\257\5\0\1\257"+
    "\15\0\3\u0106\1\0\2\u0106\1\0\3\u0106\1\u01af\1\0"+
    "\1\u0106\1\0\20\u0106\1\u0434\3\u0106\2\0\1\u0106\5\0"+
    "\1\u0106\13\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[49112];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\161\0\1\11\10\1\1\11\2\1\1\11\4\1\1\11"+
    "\3\1\1\11\12\1\1\11\24\1\3\11\3\1\1\11"+
    "\14\1\4\11\2\1\1\11\1\1\1\11\1\1\4\11"+
    "\7\1\2\11\1\1\1\11\2\1\1\11\2\1\1\11"+
    "\4\1\1\11\4\1\1\11\2\1\1\11\2\1\1\11"+
    "\2\1\1\11\1\1\2\11\5\1\2\11\13\1\2\11"+
    "\2\1\1\11\15\1\1\11\16\1\2\11\3\1\1\11"+
    "\6\1\1\11\3\1\1\11\2\1\1\11\4\1\5\11"+
    "\1\1\1\11\2\1\2\11\3\1\1\11\1\1\5\0"+
    "\3\11\3\0\2\11\27\0\1\11\11\0\2\1\1\0"+
    "\12\1\5\0\1\11\3\0\1\11\4\0\1\11\4\0"+
    "\1\11\2\0\1\11\2\0\1\1\1\0\1\11\1\1"+
    "\1\0\12\1\1\11\3\0\12\1\4\0\1\1\1\11"+
    "\3\0\1\11\7\0\2\1\1\11\1\0\4\11\1\1"+
    "\5\0\1\11\43\0\13\1\2\0\1\1\1\0\1\11"+
    "\2\0\1\11\12\0\1\11\1\0\1\1\1\0\13\1"+
    "\1\0\1\1\1\11\12\1\3\0\2\11\11\0\2\1"+
    "\47\0\12\1\4\0\3\11\1\0\1\11\3\0\1\11"+
    "\3\0\12\1\1\11\12\1\44\0\1\11\1\0\2\11"+
    "\12\0\1\11\6\1\3\0\1\11\6\0\17\1\1\11"+
    "\1\0\3\11\2\0\2\11\3\0\1\11\1\0\2\11"+
    "\11\0\1\11\16\0\2\11\5\0\6\1\6\0\1\11"+
    "\1\0\1\11\15\1\4\0\2\11\1\0\2\11\2\0"+
    "\1\11\11\0\1\11\1\0\1\11\5\0\1\11\1\0"+
    "\1\11\2\0\6\1\1\11\4\0\1\11\1\0\15\1"+
    "\5\0\1\11\3\0\2\11\1\0\1\11\1\0\1\11"+
    "\3\0\2\11\1\0\1\11\2\0\1\11\5\1\4\0"+
    "\1\11\13\1\2\0\1\11\1\0\2\11\2\0\1\11"+
    "\3\0\4\11\5\1\2\0\1\11\1\0\13\1\1\0"+
    "\2\11\4\0\1\11\4\1\1\0\2\11\7\1\1\11"+
    "\3\0\1\11\4\1\1\0\7\1\1\0\1\11\1\0"+
    "\4\1\1\0\7\1\2\0\4\1\1\0\7\1\1\0"+
    "\1\11\3\1\1\11\6\1\1\11\34\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[1076];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */


  _XQueryLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _XQueryLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1836) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 105: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { yybegin(_WILDCARD_QNAME_); return XQ_PREFIX_NAME;
          }
        case 202: break;
        case 1: 
          { yybegin(YYINITIAL); return BAD_CHARACTER;
          }
        case 203: break;
        case 186: 
          { yybegin(_URILITERAL); return KW_COLLATION;
          }
        case 204: break;
        case 198: 
          { pushState(_AS_OCC); pushState(_CLOSE_BRACE); pushState(_QNAME); yybegin(_OPEN_BRACE);  return KW_SCHEMA_ATTRIBUTE;
          }
        case 205: break;
        case 178: 
          { pushState(_SEP); pushState(_ATLIST); yybegin(NAMESPACEDECL); return KW_NAMESPACE;
          }
        case 206: break;
        case 142: 
          { pushState(_SEP); pushState(_STRINGLITERAL); yybegin(_QNAME); return KW_OPTION;
          }
        case 207: break;
        case 97: 
          { pushState(_PREDICATE_LIST);  yypushback(yylength()); pushState(_OPT_EXPR_LIST_IN_BRACE); yybegin(_QNAME);
          }
        case 208: break;
        case 181: 
          { yybegin(_EXPR_SINGLE); return KW_SATISFIES;
          }
        case 209: break;
        case 148: 
          { yybegin(_DECLARE); return KW_DECLARE;
          }
        case 210: break;
        case 160: 
          { pushState(_PREDICATE_LIST); yybegin(_EXPR_LIST_IN_CURLY); return KW_ORDERED;
          }
        case 211: break;
        case 5: 
          { return XML_COMMENT_CHAR;
          }
        case 212: break;
        case 197: 
          { yybegin(_DECLARE_COPYNS); return KW_COPY_NAMESPACES;
          }
        case 213: break;
        case 14: 
          { yybegin(_URILITERAL); return OP_EQUALS;
          }
        case 214: break;
        case 26: 
          { yypushback(yylength()); pushState(_AS_AorE_); yybegin(_QNAME);
          }
        case 215: break;
        case 175: 
          { pushState(_SEP); yybegin(NAMESPACEDECL); return KW_NAMESPACE;
          }
        case 216: break;
        case 116: 
          { pushState(_AS_OCC); yybegin(_EMPTY_BRACES); return KW_ITEM;
          }
        case 217: break;
        case 87: 
          { return XQ_STR_ESCAPE_APOS;
          }
        case 218: break;
        case 98: 
          { pushState(_XML_PI_END); yybegin(_XML_PI_NAME); return XML_PI_START;
          }
        case 219: break;
        case 43: 
          { yypushback(1); pushState(_TYPESWITCH_EXPR_RETURN); yybegin(_VARNAME);
          }
        case 220: break;
        case 187: 
          { yybegin(_SEP); return KW_NO_INHERIT;
          }
        case 221: break;
        case 32: 
          { pushState(_EXPR_LIST); yybegin(_EXPR_SINGLE); return OP_COMMA;
          }
        case 222: break;
        case 53: 
          { yybegin(_PREDICATE_LIST);  return OP_DOT;
          }
        case 223: break;
        case 201: 
          { pushState(_AS_OCC); pushState(_AS_PI); yybegin(_OPEN_BRACE); return KW_PROCESSING_INSTRUCTION;
          }
        case 224: break;
        case 195: 
          { pushState(_AS_OCC); pushState(_CLOSE_BRACE); pushState(_QNAME); yybegin(_OPEN_BRACE); return KW_SCHEMA_ELEMENT;
          }
        case 225: break;
        case 24: 
          { pushState(_CLOSE_BRACE); yypushback(yylength()); yybegin(_NCNAME);
          }
        case 226: break;
        case 131: 
          { pushState(_QUANT_EXPR_IN); yybegin(_PARAM); return KW_EVERY;
          }
        case 227: break;
        case 115: 
          { yybegin(_XML_ATTRLIST_START); return XML_PI_NAME;
          }
        case 228: break;
        case 134: 
          { pushState(_FLWOR_BODY2); yypushback(yylength()); yybegin(_WHERE_CLAUSE);
          }
        case 229: break;
        case 135: 
          { yybegin(_EXPR_SINGLE); return KW_WHERE;
          }
        case 230: break;
        case 155: 
          { yybegin(_IMPORT_SCHEMA_DEFAULT_ELEMENT); return KW_ELEMENT;
          }
        case 231: break;
        case 130: 
          { yybegin(_SEP); return KW_STRIP;
          }
        case 232: break;
        case 92: 
          { yybegin(_IF_EXPR_); return KW_IF;
          }
        case 233: break;
        case 146: 
          { yybegin(_VALIDATE_EXPR_); return KW_STRICT;
          }
        case 234: break;
        case 193: 
          { pushState(_AS_OCC); pushState(_AS_DN); yybegin(_OPEN_BRACE); return KW_DOCUMENT_NODE;
          }
        case 235: break;
        case 99: 
          { yybegin(_VARNAME); return KW_AT;
          }
        case 236: break;
        case 176: 
          { pushState(_SEP); yybegin(_URILITERAL); return KW_COLLATION;
          }
        case 237: break;
        case 13: 
          { yybegin(STR_START_APOS); return XQ_STR_START;
          }
        case 238: break;
        case 84: 
          { popState(); return XQ_COMMENT_END;
          }
        case 239: break;
        case 72: 
          { popState(); return OP_RCURLY;
          }
        case 240: break;
        case 180: 
          { pushState(_AS_OCC); pushState(_AS_AorE); yybegin(_OPEN_BRACE); return KW_ATTRIBUTE;
          }
        case 241: break;
        case 35: 
          { yypushback(yylength()); pushState(_CLOSE_BRACE); pushState(_EXPR_LIST); yybegin(_EXPR_SINGLE);
          }
        case 242: break;
        case 44: 
          { yypushback(yylength()); yybegin(_AS_);
          }
        case 243: break;
        case 159: 
          { yybegin(_TYPESWITCH_EXPR_DEFAULT_); return KW_DEFAULT;
          }
        case 244: break;
        case 68: 
          { yypushback(yylength()); pushState(_STRINGLITERAL); pushState(_EQUALS); yybegin(_QNAME);
          }
        case 245: break;
        case 16: 
          { pushState(_ATLIST_); yybegin(_URILITERAL); return OP_COMMA;
          }
        case 246: break;
        case 61: 
          { pushState(_LET_CLAUSE_); pushState(_LET_CLAUSE_VAR); yybegin(_PARAM); return OP_COMMA;
          }
        case 247: break;
        case 90: 
          { yybegin(_AS_); return KW_AS;
          }
        case 248: break;
        case 114: 
          { pushState(_LET_CLAUSE_); pushState(_LET_CLAUSE_VAR); yybegin(_PARAM); return KW_LET;
          }
        case 249: break;
        case 174: 
          { pushState(_SEP); yybegin(NAMESPACEDECL); return KW_MODULE;
          }
        case 250: break;
        case 194: 
          { yybegin(_PRESERVE_OR_STRIP); return KW_BOUNDARY_SPACE;
          }
        case 251: break;
        case 165: 
          { yybegin(_DECLARE_COPYNS_); return KW_PRESERVE;
          }
        case 252: break;
        case 101: 
          { pushState(_ORDER_CLAUSE_LIST); pushState(_ORDER_CLAUSE_MODIFIER); yybegin(_EXPR_SINGLE); return KW_BY;
          }
        case 253: break;
        case 60: 
          { yybegin(_FOR_CLAUSE); return OP_COMMA;
          }
        case 254: break;
        case 132: 
          { pushState(_PREDICATE_LIST); pushState(_NODE_TEST); yybegin(_COLONCOLON); return KW_CHILD;
          }
        case 255: break;
        case 71: 
          { popState(); return OP_LCURLY;
          }
        case 256: break;
        case 36: 
          { popState(); return OP_RBRACE;
          }
        case 257: break;
        case 63: 
          { yypushback(1); yybegin(_ORDER_CLAUSE_MODIFIER_EMPTY);
          }
        case 258: break;
        case 69: 
          { yybegin(_EMPTY_BRACES_); return OP_LBRACE;
          }
        case 259: break;
        case 41: 
          { yybegin(_TYPESWITCH_EXPR_CASE); return OP_RBRACE;
          }
        case 260: break;
        case 150: 
          { pushState(_XQUERY_VERSION); yybegin(_STRINGLITERAL); return KW_VERSION;
          }
        case 261: break;
        case 88: 
          { yybegin(_EXPR_SINGLE); return OP_ASSIGN;
          }
        case 262: break;
        case 151: 
          { yybegin(_DECLARE_DEFAULT); return KW_DEFAULT;
          }
        case 263: break;
        case 75: 
          { popState(); return OP_COLON;
          }
        case 264: break;
        case 188: 
          { yypushback(yylength()); yybegin(_TYPESWITCH_EXPR);
          }
        case 265: break;
        case 62: 
          { pushState(_ORDER_CLAUSE_LIST); pushState(_ORDER_CLAUSE_MODIFIER); yybegin(_EXPR_SINGLE); return OP_COMMA;
          }
        case 266: break;
        case 113: 
          { pushState(_FOR_CLAUSE_VAR_IN); pushState(_FOR_CLAUSE_VAR_POS); yybegin(_PARAM); return KW_FOR;
          }
        case 267: break;
        case 37: 
          { pushState(_IF_EXPR__); pushState(_EXPR_LIST); yybegin(_EXPR_SINGLE); return OP_LBRACE;
          }
        case 268: break;
        case 104: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { yybegin(_QNAME_); return XQ_PREFIX_NAME;
          }
        case 269: break;
        case 170: 
          { yybegin(_VALIDATE_EXPR_X); return KW_VALIDATE;
          }
        case 270: break;
        case 184: 
          { pushState(_PREDICATE_LIST); pushState(_NODE_TEST); yybegin(_COLONCOLON); return KW_FOLLOWING;
          }
        case 271: break;
        case 70: 
          { popState(); return OP_LBRACE;
          }
        case 272: break;
        case 49: 
          { popState(); return OP_SLASH;
          }
        case 273: break;
        case 133: 
          { pushState(_FLWOR_BODY3); yypushback(yylength()); yybegin(_ORDER_CLAUSE);
          }
        case 274: break;
        case 106: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { yybegin(_QNAME_); return OP_STAR;
          }
        case 275: break;
        case 10: 
          { yybegin(YYINITIAL); return OP_SEPERATOR;
          }
        case 276: break;
        case 67: 
          { pushState(_XML_ATTRLIST_START); yybegin(_XML_ATTR_NAME); return WHITE_SPACE;
          }
        case 277: break;
        case 73: 
          { popState(); return OP_RSQUARE;
          }
        case 278: break;
        case 163: 
          { pushState(_SEP); pushState(_DECLARE_VARIABLE); yybegin(_PARAM); return KW_VARIABLE;
          }
        case 279: break;
        case 137: 
          { yybegin(_ORDER_CLAUSE_MODIFIER_EMPTY_); return KW_EMPTY;
          }
        case 280: break;
        case 4: 
          { return XQ_COMMENT_CHAR;
          }
        case 281: break;
        case 168: 
          { popState(); return KW_EXTERNAL;
          }
        case 282: break;
        case 38: 
          { yybegin(_IF_EXPR_THEN); return OP_RBRACE;
          }
        case 283: break;
        case 55: 
          { pushState(_PREDICATE_LIST); yypushback(1); yybegin(_STRINGLITERAL);
          }
        case 284: break;
        case 22: 
          { popState(); return OP_QUESTION;
          }
        case 285: break;
        case 96: 
          { yybegin(_PREDICATE_LIST); return OP_DOTDOT;
          }
        case 286: break;
        case 80: 
          { yybegin(_QNAME_LOCAL); return OP_COLON;
          }
        case 287: break;
        case 129: 
          { yybegin(_SEP); return KW_LEAST;
          }
        case 288: break;
        case 117: 
          { pushState(_AS_OCC); yybegin(_EMPTY_BRACES); return KW_TEXT;
          }
        case 289: break;
        case 89: 
          { pushState(_ATLIST_); yybegin(_URILITERAL); return KW_AT;
          }
        case 290: break;
        case 34: 
          { yybegin(_EXPR_LIST_OR_RBRACE); return OP_LBRACE;
          }
        case 291: break;
        case 30: 
          { yypushback(yylength()); yybegin(_INSTANCEOF_EXPR);
          }
        case 292: break;
        case 172: 
          { yybegin(_ORDER_CLAUSE_MODIFIER_COLLATION); return KW_GREATEST;
          }
        case 293: break;
        case 141: 
          { yybegin(_IMPORT); return KW_IMPORT;
          }
        case 294: break;
        case 31: 
          { yypushback(1); popState();
          }
        case 295: break;
        case 51: 
          { yypushback(yylength()); pushState(_PREDICATE_LIST); yybegin(_NODE_TEST);
          }
        case 296: break;
        case 108: 
          { popState(); return XML_COMMENT_END;
          }
        case 297: break;
        case 200: 
          { pushState(_PREDICATE_LIST); pushState(_NODE_TEST); yybegin(_COLONCOLON); return KW_FOLLOWING_SIBLING;
          }
        case 298: break;
        case 153: 
          { yybegin(_DECLARE_DEFAULT_NAMESPACE); return KW_ELEMENT;
          }
        case 299: break;
        case 3: 
          { return XQ_INTEGER_LITERAL;
          }
        case 300: break;
        case 179: 
          { pushState(_SEP); pushState(_ATLIST); yybegin(_URILITERAL); return KW_NAMESPACE;
          }
        case 301: break;
        case 109: 
          { pushState(_FLWOR_HEAD); yypushback(yylength()); yybegin(_LET_CLAUSE);
          }
        case 302: break;
        case 19: 
          { popState(); yypushback(1);
          }
        case 303: break;
        case 107: 
          { return XQ_DOUBLE_LITERAL;
          }
        case 304: break;
        case 167: 
          { yybegin(_SEP); return KW_GREATEST;
          }
        case 305: break;
        case 42: 
          { yypushback(yylength()); yybegin(_TYPESWITCH_EXPR_RETURN);
          }
        case 306: break;
        case 182: 
          { pushState(_PREDICATE_LIST); yybegin(_EXPR_LIST_IN_CURLY); return KW_UNORDERED;
          }
        case 307: break;
        case 78: 
          { popState(); return XQ_LOCAL_NAME;
          }
        case 308: break;
        case 93: 
          { pushState(_QUANT_EXPR_SATISFIES); yybegin(_EXPR_SINGLE); return KW_IN;
          }
        case 309: break;
        case 199: 
          { pushState(_PREDICATE_LIST); pushState(_NODE_TEST); yybegin(_COLONCOLON); return KW_DESCENDANT_OR_SELF;
          }
        case 310: break;
        case 149: 
          { yybegin(_SEP); return KW_ORDERED;
          }
        case 311: break;
        case 122: 
          { yybegin(_EXPR_SINGLE); return KW_ELSE;
          }
        case 312: break;
        case 66: 
          { return XML_PI_CHAR;
          }
        case 313: break;
        case 23: 
          { yypushback(1); yybegin(_CLOSE_BRACE);
          }
        case 314: break;
        case 166: 
          { yybegin(_DECLARE_DEFAULT_NAMESPACE); return KW_FUNCTION;
          }
        case 315: break;
        case 162: 
          { yybegin(DECLAREORDERING); return KW_ORDERING;
          }
        case 316: break;
        case 152: 
          { yybegin(_SEP); return KW_INHERIT;
          }
        case 317: break;
        case 191: 
          { yybegin(_DECLARE_COPYNS_); return KW_NO_PRESERVE;
          }
        case 318: break;
        case 52: 
          { yybegin(_PREDICATE_LIST); return XQ_INTEGER_LITERAL;
          }
        case 319: break;
        case 59: 
          { pushState(_PREDICATE_LIST); pushState(_CLOSE_SQUARE); pushState(_EXPR_LIST); yybegin(_EXPR_SINGLE); return OP_LSQUARE;
          }
        case 320: break;
        case 25: 
          { pushState(_CLOSE_BRACE); yypushback(1); yybegin(_STRINGLITERAL);
          }
        case 321: break;
        case 126: 
          { pushState(_PREDICATE_LIST); yybegin(XML_COMMENT); return XML_COMMENT_START;
          }
        case 322: break;
        case 143: 
          { yybegin(_IMPORT_MODULE); return KW_MODULE;
          }
        case 323: break;
        case 81: 
          { yybegin(_WILDCARD_QNAME_LOCAL); return OP_COLON;
          }
        case 324: break;
        case 147: 
          { yybegin(_ORDER_CLAUSE); return KW_STABLE;
          }
        case 325: break;
        case 74: 
          { yybegin(_QNAME); return OP_VARSTART;
          }
        case 326: break;
        case 121: 
          { pushState(_IF_EXPR_ELSE); yybegin(_EXPR_SINGLE); return KW_THEN;
          }
        case 327: break;
        case 7: 
          { yybegin(_NAMESPACEDECL_); return XQ_LOCAL_NAME;
          }
        case 328: break;
        case 102: 
          { popState(); return XML_PI_END;
          }
        case 329: break;
        case 125: 
          { pushState(_PREDICATE_LIST); pushState(_NODE_TEST); yybegin(_COLONCOLON); return KW_SELF;
          }
        case 330: break;
        case 28: 
          { pushState(_AS_AorE__); yybegin(_QNAME); return OP_COMMA;
          }
        case 331: break;
        case 94: 
          { popState(); return OP_SLASHSLASH;
          }
        case 332: break;
        case 196: 
          { pushState(_CLOSE_BRACE); pushState(_CLOSE_BRACE); pushState(_QNAME); yybegin(_OPEN_BRACE); return KW_SCHEMA_ELEMENT;
          }
        case 333: break;
        case 185: 
          { return KW_ASCENDING;
          }
        case 334: break;
        case 83: 
          { pushState(); yybegin(EXPR_COMMENT); return XQ_COMMENT_START;
          }
        case 335: break;
        case 127: 
          { yybegin(_DECLARE_DEFAULT_ORDER); return KW_ORDER;
          }
        case 336: break;
        case 82: 
          { return XQ_DECIMAL_LITERAL;
          }
        case 337: break;
        case 119: 
          { pushState(_AS_OCC); yybegin(_EMPTY_BRACES); return KW_NODE;
          }
        case 338: break;
        case 20: 
          { popState(); return OP_PLUS;
          }
        case 339: break;
        case 65: 
          { yybegin(_XML_PI_CONTENT); return XML_PI_NAME;
          }
        case 340: break;
        case 173: 
          { yybegin(_SEP); return KW_UNORDERED;
          }
        case 341: break;
        case 138: 
          { yybegin(_ORDER_CLAUSE_MODIFIER_COLLATION); return KW_LEAST;
          }
        case 342: break;
        case 46: 
          { yypushback(yylength()); yybegin(_STEP_EXPR);
          }
        case 343: break;
        case 157: 
          { pushState(_AS_OCC); yybegin(_EMPTY_BRACES); return KW_COMMENT;
          }
        case 344: break;
        case 158: 
          { pushState(_CLOSE_BRACE); pushState(_AS_AorE); yybegin(_OPEN_BRACE); return KW_ELEMENT;
          }
        case 345: break;
        case 190: 
          { return KW_DESCENDING;
          }
        case 346: break;
        case 120: 
          { yypushback(yylength()); yybegin(_QUANT_EXPR);
          }
        case 347: break;
        case 124: 
          { pushState(_TYPESWITCH_EXPR_CASE2); pushState(_TYPESWITCH_EXPR_RETURN); yybegin(_TYPESWITCH_EXPR_CASE_); return KW_CASE;
          }
        case 348: break;
        case 128: 
          { yybegin(_DECLARE_DEFAULT_ORDER_EMPTY); return KW_EMPTY;
          }
        case 349: break;
        case 192: 
          { yybegin(_PRESERVE_OR_STRIP); return KW_CONSTRUCTION;
          }
        case 350: break;
        case 110: 
          { pushState(_FLWOR_HEAD); yypushback(yylength()); yybegin(_FOR_CLAUSE);
          }
        case 351: break;
        case 45: 
          { yypushback(1); pushState(_TYPESWITCH_EXPR_CASE_AS); yybegin(_VARNAME);
          }
        case 352: break;
        case 86: 
          { return XQ_STR_ESCAPE_QUOTE;
          }
        case 353: break;
        case 164: 
          { pushState(_SEP); yybegin(_URILITERAL); return KW_BASE_URI;
          }
        case 354: break;
        case 95: 
          { yybegin(_PREDICATE_LIST); return XQ_DECIMAL_LITERAL;
          }
        case 355: break;
        case 79: 
          { popState(); return BAD_CHARACTER;
          }
        case 356: break;
        case 57: 
          { pushState(_PREDICATE_LIST); yybegin(_NODE_TEST); return OP_AT;
          }
        case 357: break;
        case 85: 
          { pushState(); return XQ_COMMENT_START;
          }
        case 358: break;
        case 48: 
          { return OP_MINUS;
          }
        case 359: break;
        case 156: 
          { pushState(_AS_OCC); pushState(_AS_AorE); yybegin(_OPEN_BRACE); return KW_ELEMENT;
          }
        case 360: break;
        case 29: 
          { yybegin(_CLOSE_BRACE); return OP_QUESTION;
          }
        case 361: break;
        case 171: 
          { pushState(_PREDICATE_LIST); pushState(_NODE_TEST); yybegin(_COLONCOLON); return KW_DESCENDANT;
          }
        case 362: break;
        case 27: 
          { yybegin(_AS_AorE_); return OP_STAR;
          }
        case 363: break;
        case 76: 
          { popState(); return OP_EQUALS;
          }
        case 364: break;
        case 77: 
          { popState(); return XQ_NCNAME;
          }
        case 365: break;
        case 183: 
          { pushState(_PREDICATE_LIST); pushState(_NODE_TEST); yybegin(_COLONCOLON); return KW_ATTRIBUTE;
          }
        case 366: break;
        case 169: 
          { yybegin(_SEP); return KW_PRESERVE;
          }
        case 367: break;
        case 140: 
          { yybegin(_MODULE); return KW_MODULE;
          }
        case 368: break;
        case 189: 
          { yybegin(_TYPESWITCH_EXPR_); return KW_TYPESWITCH;
          }
        case 369: break;
        case 91: 
          { yypushback(yylength()); yybegin(_IF_EXPR);
          }
        case 370: break;
        case 2: 
          { return WHITE_SPACE;
          }
        case 371: break;
        case 64: 
          { yypushback(1); yybegin(_ORDER_CLAUSE_MODIFIER_COLLATION);
          }
        case 372: break;
        case 11: 
          { yybegin(_DECLARE_COPYNS__); return OP_COMMA;
          }
        case 373: break;
        case 144: 
          { yybegin(_IMPORT_SCHEMA); return KW_SCHEMA;
          }
        case 374: break;
        case 21: 
          { popState(); return OP_STAR;
          }
        case 375: break;
        case 33: 
          { pushState(_CLOSE_CURLY); pushState(_EXPR_LIST); yybegin(_EXPR_SINGLE); return OP_LCURLY;
          }
        case 376: break;
        case 8: 
          { return XQ_STR_CHAR;
          }
        case 377: break;
        case 39: 
          { pushState(_QUANT_EXPR_LIST); pushState(_QUANT_EXPR_IN); yybegin(_PARAM); return OP_COMMA;
          }
        case 378: break;
        case 56: 
          { pushState(_PREDICATE_LIST); yybegin(_EXPR_LIST_OR_RBRACE); return OP_LBRACE;
          }
        case 379: break;
        case 6: 
          { return BAD_CHARACTER;
          }
        case 380: break;
        case 47: 
          { return OP_PLUS;
          }
        case 381: break;
        case 161: 
          { pushState(_SEP); yybegin(_STRINGLITERAL); return KW_ENCODING;
          }
        case 382: break;
        case 54: 
          { pushState(_PREDICATE_LIST); yypushback(1); yybegin(_VARNAME);
          }
        case 383: break;
        case 154: 
          { yybegin(_IMPORT_SCHEMA_DEFAULT); return KW_DEFAULT;
          }
        case 384: break;
        case 145: 
          { yybegin(_EXPR_SINGLE); return KW_RETURN;
          }
        case 385: break;
        case 9: 
          { popState(); return XQ_STR_END;
          }
        case 386: break;
        case 15: 
          { yypushback(yylength()); popState();
          }
        case 387: break;
        case 111: 
          { yybegin(_VALIDATE_EXPR_); return KW_LAX;
          }
        case 388: break;
        case 103: 
          { popState(); return OP_COLONCOLON;
          }
        case 389: break;
        case 17: 
          { yypushback(1); pushState(_AS); yybegin(_VARNAME);
          }
        case 390: break;
        case 136: 
          { yybegin(_ORDER_CLAUSE_BY); return KW_ORDER;
          }
        case 391: break;
        case 112: 
          { yybegin(_PREDICATE_LIST); return XQ_DOUBLE_LITERAL;
          }
        case 392: break;
        case 18: 
          { yypushback(yylength()); pushState(_AS_OCC); yybegin(_QNAME);
          }
        case 393: break;
        case 40: 
          { pushState(_TYPESWITCH_EXPR__); pushState(_EXPR_LIST); yybegin(_EXPR_SINGLE); return OP_LBRACE;
          }
        case 394: break;
        case 123: 
          { pushState(_QUANT_EXPR_IN); yybegin(_PARAM); return KW_SOME;
          }
        case 395: break;
        case 118: 
          { yybegin(_EMPTY_BRACES); return KW_VOID;
          }
        case 396: break;
        case 12: 
          { yybegin(STR_START_QUOTE); return XQ_STR_START;
          }
        case 397: break;
        case 58: 
          { yypushback(yylength()); yybegin(_WILDCARD_QNAME);
          }
        case 398: break;
        case 139: 
          { yybegin(_XQUERY); return KW_XQUERY;
          }
        case 399: break;
        case 177: 
          { pushState(_SEP); yybegin(_URILITERAL); return KW_NAMESPACE;
          }
        case 400: break;
        case 100: 
          { yybegin(_EXPR_SINGLE); return KW_IN;
          }
        case 401: break;
        case 50: 
          { 
          }
        case 402: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
