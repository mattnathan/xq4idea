/* The following code was generated by JFlex 1.4.3 on 09/04/11 16:35 */

package org.mn.plug.idea.xq4idea.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

// this lexer follows the principles set out in http://www.w3.org/TR/xquery-xpath-parsing/

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 09/04/11 16:35 from the specification file
 * <tt>C:/Users/Matt/IdeaProjects/ideaPlugins/xq4idea/source/xq4idea/src/org/mn/plug/idea/xq4idea/lang/lexer/_XQueryLexer.flex</tt>
 */
class _XQueryLexer extends AbstractLexer implements FlexLexer, XQueryTokenTypes {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int _QNAME_ = 42;
  public static final int STR_START_APOS = 10;
  public static final int _STRINGLITERAL = 36;
  public static final int _XQUERY_VERSION_END = 14;
  public static final int STR_START_QUOTE = 8;
  public static final int EXPR_COMMENT = 2;
  public static final int _DECLARE = 16;
  public static final int _DECLARE_DEFAULT_ORDER_EMPTY = 30;
  public static final int _PRESERVE_OR_STRIP = 32;
  public static final int _DECLARE_COPYNS = 20;
  public static final int _DECLARE_DEFAULT = 26;
  public static final int _QNAME_LOCAL = 44;
  public static final int _NAMESPACEDECL_ = 38;
  public static final int NAMESPACEDECL = 6;
  public static final int _DECLARE_COPYNS__ = 24;
  public static final int DECLAREORDERING = 4;
  public static final int _QNAME = 40;
  public static final int _URILITERAL = 34;
  public static final int _XQUERY = 12;
  public static final int YYINITIAL = 0;
  public static final int _DECLARE_END = 18;
  public static final int _DECLARE_COPYNS_ = 22;
  public static final int _DECLARE_DEFAULT_ORDER = 28;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\2\1\2\0\1\1\22\0\1\1\1\0\1\46\1\0\2\0"+
    "\1\0\1\47\1\45\1\44\1\0\1\5\1\42\1\13\1\3\1\0"+
    "\12\2\1\14\1\10\1\0\1\41\3\0\4\12\1\4\1\12\24\12"+
    "\4\0\1\6\1\0\1\25\1\36\1\23\1\22\1\17\1\40\1\33"+
    "\1\43\1\30\2\12\1\24\1\37\1\32\1\31\1\34\1\15\1\20"+
    "\1\27\1\35\1\16\1\26\1\12\1\11\1\21\1\12\57\0\1\50"+
    "\12\0\1\50\1\0\1\7\2\0\1\50\5\0\27\12\1\0\37\12"+
    "\1\0\72\12\2\50\13\12\2\50\10\12\1\50\65\12\1\50\104\12"+
    "\11\50\44\12\3\50\2\12\4\50\36\12\37\50\31\0\131\12\22\50"+
    "\7\12\4\0\12\50\2\51\16\0\5\50\11\0\1\50\21\0\106\7"+
    "\32\0\2\7\30\0\1\50\13\0\1\12\1\7\3\12\1\0\1\12"+
    "\1\0\24\12\1\0\54\12\1\0\7\12\3\50\1\12\1\50\1\12"+
    "\1\50\1\12\1\50\1\12\1\50\22\12\2\50\1\0\5\50\4\0"+
    "\1\50\14\12\1\50\102\12\1\50\14\12\1\50\44\12\1\0\4\7"+
    "\3\0\6\50\65\12\2\50\2\12\2\50\2\12\2\50\1\0\34\12"+
    "\2\50\10\12\2\0\2\12\6\0\20\50\41\0\46\12\2\0\1\12"+
    "\7\0\46\12\1\50\11\0\21\7\1\0\27\7\1\0\3\7\1\0"+
    "\1\7\1\0\2\7\1\0\1\7\13\0\33\12\5\0\3\12\56\0"+
    "\32\12\5\0\1\51\12\12\10\7\15\0\12\7\4\0\2\50\1\7"+
    "\107\12\2\50\5\12\1\50\17\12\1\50\4\12\1\0\1\12\17\7"+
    "\2\12\2\7\1\0\4\7\2\50\12\7\3\50\2\0\1\50\20\0"+
    "\1\50\1\0\36\50\35\0\3\50\60\0\46\50\13\0\1\50\u014f\0"+
    "\3\7\1\50\65\12\2\0\1\7\1\12\20\7\2\0\1\50\4\7"+
    "\3\0\12\12\2\7\2\0\12\7\21\0\3\7\1\0\10\12\2\0"+
    "\2\12\2\0\26\12\1\0\7\12\1\0\1\12\3\0\4\12\2\0"+
    "\1\7\1\50\7\7\2\0\2\7\2\0\3\7\11\0\1\7\4\0"+
    "\2\12\1\0\3\12\2\7\2\0\12\7\2\12\20\0\1\7\2\0"+
    "\6\12\4\0\2\12\2\0\26\12\1\0\7\12\1\0\2\12\1\0"+
    "\2\12\1\0\2\12\2\0\1\7\1\0\5\7\4\0\2\7\2\0"+
    "\3\7\13\0\4\12\1\0\1\12\7\0\12\7\2\7\3\12\14\0"+
    "\3\7\1\0\7\12\1\50\1\12\1\0\3\12\1\0\26\12\1\0"+
    "\7\12\1\0\2\12\1\0\5\12\2\0\1\7\1\12\10\7\1\0"+
    "\3\7\1\0\3\7\2\0\1\50\17\0\1\12\1\50\4\0\12\7"+
    "\21\0\3\7\1\0\10\12\2\0\2\12\2\0\26\12\1\0\7\12"+
    "\1\0\2\12\1\0\1\50\4\12\2\0\1\7\1\12\6\7\3\0"+
    "\2\7\2\0\3\7\10\0\2\7\4\0\2\12\1\0\3\12\4\0"+
    "\12\7\1\0\1\50\20\0\1\7\1\51\1\0\6\12\3\0\3\12"+
    "\1\0\4\12\3\0\2\12\1\0\1\12\1\0\2\12\3\0\2\12"+
    "\3\0\3\12\3\0\10\12\1\0\3\12\4\0\5\7\3\0\3\7"+
    "\1\0\4\7\11\0\1\7\17\0\11\7\21\0\3\7\1\0\10\12"+
    "\1\0\3\12\1\0\27\12\1\0\12\12\1\0\5\12\4\0\7\7"+
    "\1\0\3\7\1\0\4\7\7\0\2\7\11\0\2\12\4\0\12\7"+
    "\22\0\2\7\1\0\10\12\1\0\3\12\1\0\27\12\1\0\12\12"+
    "\1\0\5\12\3\0\1\50\7\7\1\0\3\7\1\0\4\7\7\0"+
    "\2\7\7\0\1\12\1\0\2\12\4\0\12\7\22\0\2\7\1\0"+
    "\10\12\1\0\3\12\1\0\27\12\1\0\20\12\4\0\6\7\2\0"+
    "\3\7\1\0\4\7\11\0\1\7\10\0\2\12\4\0\12\7\25\0"+
    "\22\50\3\0\30\50\1\0\11\50\1\0\1\50\2\0\7\50\72\0"+
    "\56\12\1\50\1\12\1\7\2\12\7\7\5\0\6\12\1\51\10\7"+
    "\1\0\12\7\47\0\2\12\1\0\1\12\2\0\2\12\1\0\1\12"+
    "\2\0\1\12\6\0\4\12\1\0\7\12\1\0\3\12\1\0\1\12"+
    "\1\0\1\12\2\0\2\12\1\0\2\12\1\50\1\12\1\7\2\12"+
    "\6\7\1\0\2\7\1\12\2\0\5\12\1\0\1\51\1\0\6\7"+
    "\2\0\12\7\2\0\2\50\42\0\1\50\27\0\2\7\6\0\12\7"+
    "\13\0\1\7\1\0\1\7\1\0\1\7\4\0\2\7\10\12\1\0"+
    "\41\12\1\50\6\0\24\7\1\0\2\7\4\51\4\0\6\7\1\0"+
    "\1\7\1\0\25\7\3\0\7\7\1\0\1\7\106\0\42\50\1\0"+
    "\5\50\1\0\2\50\45\0\6\50\112\0\46\12\12\0\47\12\2\50"+
    "\7\0\1\12\1\50\2\12\1\50\3\12\1\50\1\12\1\50\2\12"+
    "\1\50\5\12\51\50\1\12\1\50\1\12\1\50\1\12\13\50\1\12"+
    "\1\50\1\12\1\50\1\12\3\50\2\12\3\50\1\12\5\0\3\12"+
    "\1\50\1\12\1\50\1\12\1\50\1\12\1\50\1\12\3\50\2\12"+
    "\3\50\2\12\1\50\1\12\50\50\1\12\4\50\5\0\1\12\2\50"+
    "\1\12\2\50\2\12\7\50\2\12\1\50\1\12\1\50\7\12\50\50"+
    "\1\12\4\50\1\12\10\50\1\12\6\0\7\50\1\0\77\50\1\0"+
    "\1\50\1\0\4\50\2\0\7\50\1\0\1\50\1\0\4\50\2\0"+
    "\47\50\1\0\1\50\1\0\4\50\2\0\37\50\1\0\1\50\1\0"+
    "\4\50\2\0\7\50\1\0\1\50\1\0\4\50\2\0\7\50\1\0"+
    "\7\50\1\0\27\50\1\0\37\50\1\0\1\50\1\0\4\50\2\0"+
    "\7\50\1\0\47\50\1\0\23\50\105\0\125\50\14\0\u026c\50\2\0"+
    "\10\50\12\0\32\50\5\0\113\50\25\0\15\50\1\0\4\50\16\0"+
    "\22\50\16\0\22\50\16\0\15\50\1\0\3\50\17\0\64\50\43\0"+
    "\1\50\4\0\1\50\103\0\130\50\10\0\51\50\127\0\35\50\63\0"+
    "\36\50\2\0\5\50\u038b\0\154\50\224\0\234\12\4\0\132\12\6\0"+
    "\26\12\2\0\6\12\2\0\46\12\2\0\6\12\2\0\10\12\1\0"+
    "\1\12\1\0\1\12\1\0\1\12\1\0\37\12\2\0\65\12\1\0"+
    "\7\12\1\0\1\12\3\0\3\12\1\0\7\12\3\0\4\12\2\0"+
    "\6\12\4\0\15\12\5\0\3\12\1\0\7\12\164\0\1\50\15\0"+
    "\1\50\120\0\15\7\4\0\1\7\40\0\1\50\4\0\1\50\2\0"+
    "\12\50\1\0\1\50\3\0\5\50\6\0\1\50\1\0\1\12\1\0"+
    "\1\50\1\0\2\12\2\50\1\6\3\50\1\0\7\50\3\0\3\50"+
    "\5\0\5\50\66\0\3\6\u0e82\0\1\51\1\50\1\6\31\0\11\6"+
    "\6\7\1\0\5\51\5\0\2\50\4\0\124\12\2\50\2\0\2\7"+
    "\2\0\2\51\1\50\1\0\132\12\1\0\3\51\1\50\5\0\50\12"+
    "\4\0\136\50\21\0\30\50\70\0\20\50\u0200\0\u19b6\50\112\0\u51a6\12"+
    "\132\0\u048d\50\u0773\0\u2ba4\12\134\0\u0800\0\u1900\0\u012e\50\2\0\73\50"+
    "\225\0\7\50\14\0\5\50\5\0\1\50\1\0\12\50\1\0\15\50"+
    "\1\0\5\50\1\0\1\50\1\0\2\50\1\0\2\50\1\0\154\50"+
    "\41\0\u016b\50\22\0\100\50\2\0\66\50\50\0\14\50\164\0\5\50"+
    "\1\0\207\50\44\0\32\50\6\0\32\50\13\0\131\50\3\0\6\50"+
    "\2\0\6\50\2\0\6\50\2\0\3\50\41\0\2\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\26\0\1\1\1\2\1\3\1\1\3\4\1\1\3\5"+
    "\2\4\2\6\1\7\2\10\1\4\1\11\10\4\1\12"+
    "\11\4\1\13\1\14\1\15\2\16\1\17\1\20\1\16"+
    "\1\21\1\0\2\4\1\22\1\23\1\24\2\4\1\25"+
    "\1\26\24\4\1\27\1\30\1\0\16\4\1\0\2\4"+
    "\1\0\25\4\1\0\2\4\1\0\17\4\1\0\3\4"+
    "\1\0\1\4\1\0\2\4\1\0\1\4\1\31\1\32"+
    "\1\33\1\4\1\34\1\4\1\35\7\4\1\0\1\4"+
    "\1\36\1\4\1\0\1\4\1\0\2\4\1\0\3\4"+
    "\1\37\1\4\1\40\1\41\1\4\1\42\1\4\1\0"+
    "\2\4\1\0\1\4\1\0\1\4\1\43\1\0\4\4"+
    "\1\44\1\4\1\0\1\45\1\4\1\46\1\4\1\0"+
    "\1\47\1\0\1\4\1\50\1\51\1\52\1\4\1\0"+
    "\1\53\3\0\1\54\1\4\3\0\1\55\1\4\2\0"+
    "\1\56\1\57\5\0\1\60\1\61";

  private static int [] zzUnpackAction() {
    int [] result = new int[256];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\52\0\124\0\176\0\250\0\322\0\374\0\u0126"+
    "\0\u0150\0\u017a\0\u01a4\0\u01ce\0\u01f8\0\u0222\0\u024c\0\u0276"+
    "\0\u02a0\0\u02ca\0\u02f4\0\u031e\0\u0348\0\u0372\0\u039c\0\u03c6"+
    "\0\u03f0\0\u041a\0\u0444\0\u046e\0\u0498\0\u04c2\0\u039c\0\u04ec"+
    "\0\u0516\0\u0540\0\u056a\0\u0594\0\u05be\0\u039c\0\u05e8\0\u0612"+
    "\0\u063c\0\u039c\0\u0666\0\u0690\0\u06ba\0\u06e4\0\u070e\0\u0738"+
    "\0\u0762\0\u078c\0\u039c\0\u07b6\0\u07e0\0\u080a\0\u0834\0\u085e"+
    "\0\u0888\0\u08b2\0\u08dc\0\u0906\0\u039c\0\u039c\0\u039c\0\u0930"+
    "\0\u095a\0\u039c\0\u039c\0\u0984\0\u09ae\0\u09d8\0\u0a02\0\u0a2c"+
    "\0\u039c\0\u039c\0\u039c\0\u0a56\0\u0a80\0\u039c\0\u039c\0\u0aaa"+
    "\0\u0ad4\0\u0afe\0\u0b28\0\u0b52\0\u0b7c\0\u0ba6\0\u0bd0\0\u0bfa"+
    "\0\u0c24\0\u0c4e\0\u0c78\0\u0ca2\0\u0ccc\0\u0cf6\0\u0d20\0\u0d4a"+
    "\0\u0d74\0\u0d9e\0\u0dc8\0\u039c\0\u0df2\0\u0df2\0\u0e1c\0\u0e46"+
    "\0\u0e70\0\u0e9a\0\u0ec4\0\u0eee\0\u0f18\0\u0f42\0\u0f6c\0\u0f96"+
    "\0\u0fc0\0\u0fea\0\u1014\0\u103e\0\u1068\0\u1092\0\u10bc\0\u10e6"+
    "\0\u1110\0\u113a\0\u1164\0\u118e\0\u11b8\0\u11e2\0\u120c\0\u1236"+
    "\0\u1260\0\u128a\0\u12b4\0\u12de\0\u1308\0\u1332\0\u135c\0\u1386"+
    "\0\u13b0\0\u13da\0\u1404\0\u142e\0\u1458\0\u1482\0\u14ac\0\u14d6"+
    "\0\u1500\0\u152a\0\u1554\0\u157e\0\u15a8\0\u15d2\0\u15fc\0\u1626"+
    "\0\u1650\0\u167a\0\u16a4\0\u16ce\0\u16f8\0\u1722\0\u174c\0\u1776"+
    "\0\u17a0\0\u17ca\0\u17f4\0\u181e\0\u1848\0\u1872\0\u189c\0\u18c6"+
    "\0\u18f0\0\u191a\0\u1944\0\u0444\0\u0444\0\u0444\0\u196e\0\u0444"+
    "\0\u1998\0\u0444\0\u19c2\0\u19ec\0\u1a16\0\u1a40\0\u1a6a\0\u1a94"+
    "\0\u1abe\0\u1ae8\0\u1b12\0\u0444\0\u1b3c\0\u1b66\0\u1b90\0\u1bba"+
    "\0\u1be4\0\u1c0e\0\u1c38\0\u1c62\0\u1c8c\0\u1cb6\0\u0444\0\u1ce0"+
    "\0\u0444\0\u0444\0\u1d0a\0\u0444\0\u1d34\0\u1d5e\0\u1d88\0\u1db2"+
    "\0\u1ddc\0\u1e06\0\u1e30\0\u1e5a\0\u0444\0\u1e84\0\u1eae\0\u1ed8"+
    "\0\u1f02\0\u1f2c\0\u0444\0\u1f56\0\u1f80\0\u0444\0\u1faa\0\u039c"+
    "\0\u1fd4\0\u1ffe\0\u0444\0\u2028\0\u2052\0\u0444\0\u0444\0\u0444"+
    "\0\u207c\0\u20a6\0\u0444\0\u20d0\0\u20fa\0\u2124\0\u0444\0\u214e"+
    "\0\u2178\0\u21a2\0\u21cc\0\u039c\0\u21f6\0\u2220\0\u224a\0\u039c"+
    "\0\u0444\0\u2274\0\u229e\0\u22c8\0\u22f2\0\u231c\0\u039c\0\u039c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[256];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\27\1\30\1\31\1\32\1\33\4\27\1\34\1\33"+
    "\2\27\5\33\1\35\16\33\2\27\1\33\1\27\1\36"+
    "\2\27\2\33\14\37\1\40\30\37\1\41\4\37\1\27"+
    "\1\30\2\27\1\33\4\27\2\33\2\27\1\33\1\42"+
    "\12\33\1\43\7\33\2\27\1\33\1\27\1\36\2\27"+
    "\2\33\1\27\1\30\2\27\1\44\1\27\1\45\2\27"+
    "\2\44\2\27\24\44\2\27\1\44\1\27\1\36\2\27"+
    "\2\33\46\46\1\47\52\46\1\50\2\46\1\27\1\30"+
    "\2\27\1\33\4\27\2\33\2\27\11\33\1\51\12\33"+
    "\2\27\1\33\1\27\1\36\2\27\2\33\1\27\1\30"+
    "\2\27\1\33\3\27\1\52\2\33\2\27\2\33\1\53"+
    "\21\33\2\27\1\33\1\27\1\36\2\27\2\33\1\27"+
    "\1\30\2\27\1\33\4\27\2\33\2\27\5\33\1\54"+
    "\1\55\5\33\1\56\1\57\3\33\1\60\2\33\2\27"+
    "\1\33\1\27\1\36\2\27\2\33\1\27\1\30\2\27"+
    "\1\33\3\27\1\52\2\33\2\27\24\33\2\27\1\33"+
    "\1\27\1\36\2\27\2\33\1\27\1\30\2\27\1\33"+
    "\4\27\2\33\2\27\15\33\1\61\1\33\1\62\4\33"+
    "\2\27\1\33\1\27\1\36\2\27\2\33\1\27\1\30"+
    "\2\27\1\33\4\27\2\33\2\27\24\33\1\27\1\63"+
    "\1\33\1\27\1\36\2\27\2\33\1\27\1\30\2\27"+
    "\1\33\4\27\2\33\2\27\13\33\1\64\1\33\1\65"+
    "\6\33\2\27\1\33\1\27\1\36\2\27\2\33\1\27"+
    "\1\30\2\27\1\33\4\27\2\33\2\27\6\33\1\66"+
    "\5\33\1\67\7\33\2\27\1\33\1\27\1\36\2\27"+
    "\2\33\1\27\1\30\2\27\1\33\4\27\2\33\2\27"+
    "\2\33\1\70\21\33\2\27\1\33\1\27\1\36\2\27"+
    "\2\33\1\27\1\30\2\27\1\33\4\27\2\33\2\27"+
    "\7\33\1\71\6\33\1\72\5\33\2\27\1\33\1\27"+
    "\1\36\2\27\2\33\1\27\1\30\2\27\1\33\4\27"+
    "\2\33\2\27\12\33\1\73\4\33\1\74\4\33\2\27"+
    "\1\33\1\27\1\36\2\27\2\33\1\27\1\30\2\27"+
    "\1\33\4\27\2\33\2\27\24\33\2\27\1\33\1\27"+
    "\1\36\1\75\1\76\2\33\1\27\1\30\2\27\1\33"+
    "\4\27\2\33\2\27\24\33\1\77\1\27\1\33\1\27"+
    "\1\36\2\27\2\33\1\27\1\30\2\27\1\100\1\27"+
    "\1\101\2\27\2\100\2\27\24\100\2\27\1\100\1\27"+
    "\1\36\2\27\2\33\14\102\1\103\41\102\1\104\1\102"+
    "\1\104\2\102\2\104\2\102\24\104\2\102\1\104\6\102"+
    "\53\0\1\30\52\0\1\31\1\105\1\106\12\0\1\106"+
    "\34\0\1\105\53\0\1\33\4\0\2\33\2\0\24\33"+
    "\2\0\1\33\4\0\2\33\4\0\1\33\4\0\2\33"+
    "\2\0\1\107\23\33\2\0\1\33\4\0\2\33\4\0"+
    "\1\33\4\0\2\33\2\0\2\33\1\110\21\33\2\0"+
    "\1\33\4\0\2\33\14\0\1\111\101\0\1\112\21\0"+
    "\1\113\41\0\1\33\4\0\2\33\2\0\15\33\1\114"+
    "\6\33\2\0\1\33\4\0\2\33\4\0\1\33\4\0"+
    "\2\33\2\0\3\33\1\115\20\33\2\0\1\33\4\0"+
    "\2\33\2\0\2\45\1\44\1\0\2\45\1\0\2\44"+
    "\1\45\1\0\24\44\2\0\1\44\4\0\1\33\1\44"+
    "\2\0\3\45\1\0\2\45\1\0\3\45\1\0\24\45"+
    "\2\0\1\45\5\0\1\45\46\0\1\116\52\0\1\117"+
    "\6\0\1\33\4\0\2\33\2\0\2\33\1\120\21\33"+
    "\2\0\1\33\4\0\2\33\4\0\1\33\4\0\2\33"+
    "\2\0\15\33\1\121\6\33\2\0\1\33\4\0\2\33"+
    "\4\0\1\33\4\0\2\33\2\0\2\33\1\122\21\33"+
    "\2\0\1\33\4\0\2\33\4\0\1\33\4\0\2\33"+
    "\2\0\14\33\1\123\7\33\2\0\1\33\4\0\2\33"+
    "\4\0\1\33\4\0\2\33\2\0\3\33\1\124\13\33"+
    "\1\125\4\33\2\0\1\33\4\0\2\33\4\0\1\33"+
    "\4\0\2\33\2\0\10\33\1\126\13\33\2\0\1\33"+
    "\4\0\2\33\4\0\1\33\4\0\2\33\2\0\10\33"+
    "\1\127\3\33\1\130\7\33\2\0\1\33\4\0\2\33"+
    "\4\0\1\33\4\0\2\33\2\0\14\33\1\131\7\33"+
    "\2\0\1\33\4\0\2\33\4\0\1\33\4\0\2\33"+
    "\2\0\3\33\1\132\20\33\2\0\1\33\4\0\2\33"+
    "\4\0\1\33\4\0\2\33\2\0\15\33\1\133\6\33"+
    "\2\0\1\33\4\0\2\33\4\0\1\33\4\0\2\33"+
    "\2\0\14\33\1\134\7\33\2\0\1\33\4\0\2\33"+
    "\4\0\1\33\4\0\2\33\2\0\14\33\1\135\7\33"+
    "\2\0\1\33\4\0\2\33\4\0\1\33\4\0\2\33"+
    "\2\0\3\33\1\136\20\33\2\0\1\33\4\0\2\33"+
    "\4\0\1\33\4\0\2\33\2\0\22\33\1\137\1\33"+
    "\2\0\1\33\4\0\2\33\4\0\1\33\4\0\2\33"+
    "\2\0\2\33\1\140\21\33\2\0\1\33\4\0\2\33"+
    "\4\0\1\33\4\0\2\33\2\0\3\33\1\141\20\33"+
    "\2\0\1\33\4\0\2\33\4\0\1\33\4\0\2\33"+
    "\2\0\20\33\1\142\3\33\2\0\1\33\4\0\2\33"+
    "\4\0\1\33\4\0\2\33\2\0\3\33\1\143\20\33"+
    "\2\0\1\33\4\0\2\33\2\0\2\101\1\100\1\0"+
    "\2\101\1\0\2\100\1\101\1\144\24\100\2\0\1\100"+
    "\4\0\1\33\1\100\2\0\3\101\1\0\2\101\1\0"+
    "\3\101\1\144\24\101\2\0\1\101\5\0\1\101\2\0"+
    "\3\104\1\0\2\104\1\0\3\104\1\0\24\104\2\0"+
    "\1\104\5\0\1\104\2\0\1\105\1\0\1\106\12\0"+
    "\1\106\34\0\1\145\2\0\1\146\5\0\1\146\42\0"+
    "\1\33\4\0\2\33\2\0\1\33\1\147\22\33\2\0"+
    "\1\33\4\0\2\33\4\0\1\33\4\0\2\33\2\0"+
    "\6\33\1\150\15\33\2\0\1\33\4\0\2\33\4\0"+
    "\1\33\4\0\2\33\2\0\14\33\1\151\7\33\2\0"+
    "\1\33\4\0\2\33\4\0\1\33\4\0\2\33\2\0"+
    "\5\33\1\152\16\33\2\0\1\33\4\0\2\33\4\0"+
    "\1\33\4\0\2\33\2\0\3\33\1\153\20\33\2\0"+
    "\1\33\4\0\2\33\4\0\1\33\4\0\2\33\2\0"+
    "\6\33\1\154\15\33\2\0\1\33\4\0\2\33\4\0"+
    "\1\33\4\0\2\33\2\0\23\33\1\155\2\0\1\33"+
    "\4\0\2\33\4\0\1\33\4\0\2\33\2\0\15\33"+
    "\1\156\1\33\1\157\4\33\2\0\1\33\4\0\2\33"+
    "\4\0\1\33\4\0\2\33\2\0\5\33\1\160\16\33"+
    "\2\0\1\33\4\0\2\33\4\0\1\33\4\0\2\33"+
    "\2\0\20\33\1\161\3\33\2\0\1\33\4\0\2\33"+
    "\4\0\1\33\4\0\2\33\2\0\22\33\1\162\1\33"+
    "\2\0\1\33\4\0\2\33\4\0\1\33\4\0\2\33"+
    "\2\0\12\33\1\163\11\33\2\0\1\33\4\0\2\33"+
    "\4\0\1\33\4\0\2\33\2\0\1\33\1\164\22\33"+
    "\2\0\1\33\4\0\2\33\4\0\1\33\4\0\2\33"+
    "\1\165\1\0\24\33\2\0\1\33\4\0\2\33\4\0"+
    "\1\33\4\0\2\33\2\0\2\33\1\166\21\33\2\0"+
    "\1\33\4\0\2\33\4\0\1\33\4\0\2\33\2\0"+
    "\24\33\2\0\1\167\4\0\2\33\4\0\1\33\4\0"+
    "\2\33\1\170\1\0\24\33\2\0\1\33\4\0\2\33"+
    "\4\0\1\33\4\0\2\33\2\0\7\33\1\171\14\33"+
    "\2\0\1\33\4\0\2\33\4\0\1\33\4\0\2\33"+
    "\2\0\5\33\1\172\16\33\2\0\1\33\4\0\2\33"+
    "\4\0\1\33\4\0\2\33\2\0\17\33\1\173\4\33"+
    "\2\0\1\33\4\0\2\33\4\0\1\33\4\0\2\33"+
    "\2\0\10\33\1\174\13\33\2\0\1\33\4\0\2\33"+
    "\4\0\1\33\4\0\2\33\2\0\2\33\1\175\21\33"+
    "\2\0\1\33\4\0\2\33\4\0\1\33\4\0\2\33"+
    "\2\0\3\33\1\176\20\33\2\0\1\33\4\0\2\33"+
    "\4\0\1\33\4\0\2\33\2\0\2\33\1\177\21\33"+
    "\2\0\1\33\4\0\2\33\2\0\1\145\53\0\1\33"+
    "\4\0\2\33\2\0\2\33\1\200\21\33\2\0\1\33"+
    "\4\0\2\33\4\0\1\33\4\0\2\33\2\0\7\33"+
    "\1\201\14\33\2\0\1\33\4\0\2\33\4\0\1\33"+
    "\4\0\2\33\2\0\3\33\1\202\20\33\2\0\1\33"+
    "\4\0\2\33\4\0\1\33\4\0\2\33\2\0\2\33"+
    "\1\203\21\33\2\0\1\33\4\0\2\33\4\0\1\33"+
    "\4\0\2\33\2\0\12\33\1\204\11\33\2\0\1\33"+
    "\4\0\2\33\4\0\1\33\4\0\2\33\2\0\14\33"+
    "\1\205\7\33\2\0\1\33\4\0\2\33\4\0\1\33"+
    "\4\0\2\33\2\0\10\33\1\206\13\33\2\0\1\33"+
    "\4\0\2\33\4\0\1\33\4\0\2\33\2\0\12\33"+
    "\1\207\11\33\2\0\1\33\4\0\2\33\4\0\1\33"+
    "\4\0\2\33\2\0\4\33\1\210\17\33\2\0\1\33"+
    "\4\0\2\33\4\0\1\33\4\0\2\33\2\0\2\33"+
    "\1\211\21\33\2\0\1\33\4\0\2\33\4\0\1\33"+
    "\4\0\2\33\2\0\13\33\1\212\10\33\2\0\1\33"+
    "\4\0\2\33\4\0\1\33\4\0\2\33\2\0\2\33"+
    "\1\213\21\33\2\0\1\33\4\0\2\33\4\0\1\33"+
    "\4\0\2\33\2\0\2\33\1\214\21\33\2\0\1\33"+
    "\4\0\2\33\4\0\1\33\4\0\2\33\2\0\15\33"+
    "\1\215\6\33\2\0\1\33\4\0\2\33\34\0\1\216"+
    "\21\0\1\33\4\0\2\33\2\0\12\33\1\217\11\33"+
    "\2\0\1\33\4\0\2\33\4\0\1\33\4\0\2\33"+
    "\2\0\2\33\1\220\21\33\2\0\1\33\4\0\2\33"+
    "\30\0\1\221\25\0\1\33\4\0\2\33\2\0\7\33"+
    "\1\222\14\33\2\0\1\33\4\0\2\33\4\0\1\33"+
    "\4\0\2\33\2\0\2\33\1\223\21\33\2\0\1\33"+
    "\4\0\2\33\4\0\1\33\4\0\2\33\2\0\20\33"+
    "\1\224\3\33\2\0\1\33\4\0\2\33\4\0\1\33"+
    "\4\0\2\33\2\0\12\33\1\225\11\33\2\0\1\33"+
    "\4\0\2\33\4\0\1\33\4\0\2\33\2\0\10\33"+
    "\1\226\13\33\2\0\1\33\4\0\2\33\4\0\1\33"+
    "\4\0\2\33\2\0\13\33\1\227\10\33\2\0\1\33"+
    "\4\0\2\33\4\0\1\33\4\0\2\33\2\0\12\33"+
    "\1\230\11\33\2\0\1\33\4\0\2\33\4\0\1\33"+
    "\4\0\2\33\2\0\3\33\1\231\20\33\2\0\1\33"+
    "\4\0\2\33\4\0\1\33\4\0\2\33\2\0\10\33"+
    "\1\232\13\33\2\0\1\33\4\0\2\33\4\0\1\33"+
    "\4\0\2\33\2\0\5\33\1\233\16\33\2\0\1\33"+
    "\4\0\2\33\4\0\1\33\4\0\2\33\2\0\3\33"+
    "\1\234\20\33\2\0\1\33\4\0\2\33\4\0\1\33"+
    "\4\0\2\33\2\0\13\33\1\235\10\33\2\0\1\33"+
    "\4\0\2\33\4\0\1\33\4\0\2\33\2\0\5\33"+
    "\1\236\16\33\2\0\1\33\4\0\2\33\4\0\1\33"+
    "\4\0\2\33\2\0\1\33\1\237\22\33\2\0\1\33"+
    "\4\0\2\33\4\0\1\33\4\0\2\33\2\0\20\33"+
    "\1\240\3\33\2\0\1\33\4\0\2\33\4\0\1\33"+
    "\4\0\2\33\1\241\1\0\24\33\2\0\1\33\4\0"+
    "\2\33\4\0\1\33\4\0\2\33\2\0\3\33\1\242"+
    "\20\33\2\0\1\33\4\0\2\33\4\0\1\33\4\0"+
    "\2\33\2\0\14\33\1\243\7\33\2\0\1\33\4\0"+
    "\2\33\4\0\1\33\4\0\2\33\2\0\12\33\1\244"+
    "\11\33\2\0\1\33\4\0\2\33\4\0\1\33\4\0"+
    "\2\33\1\245\1\0\24\33\2\0\1\33\4\0\2\33"+
    "\4\0\1\33\4\0\2\33\2\0\5\33\1\246\16\33"+
    "\2\0\1\33\4\0\2\33\20\0\1\247\35\0\1\33"+
    "\4\0\2\33\2\0\2\33\1\250\21\33\2\0\1\33"+
    "\4\0\2\33\4\0\1\33\4\0\2\33\2\0\3\33"+
    "\1\251\20\33\2\0\1\33\4\0\2\33\32\0\1\252"+
    "\23\0\1\33\4\0\2\33\2\0\10\33\1\253\13\33"+
    "\2\0\1\33\4\0\2\33\4\0\1\33\4\0\2\33"+
    "\2\0\3\33\1\254\20\33\2\0\1\33\4\0\2\33"+
    "\4\0\1\33\4\0\2\33\2\0\4\33\1\255\17\33"+
    "\2\0\1\33\4\0\2\33\4\0\1\33\4\0\2\33"+
    "\2\0\20\33\1\256\3\33\2\0\1\33\4\0\2\33"+
    "\4\0\1\33\4\0\2\33\2\0\20\33\1\257\3\33"+
    "\2\0\1\33\4\0\2\33\4\0\1\33\4\0\2\33"+
    "\2\0\17\33\1\260\4\33\2\0\1\33\4\0\2\33"+
    "\4\0\1\33\4\0\2\33\2\0\2\33\1\261\21\33"+
    "\2\0\1\33\4\0\2\33\4\0\1\33\4\0\2\33"+
    "\2\0\4\33\1\262\17\33\2\0\1\33\4\0\2\33"+
    "\4\0\1\33\4\0\2\33\2\0\3\33\1\263\20\33"+
    "\2\0\1\33\4\0\2\33\4\0\1\33\4\0\2\33"+
    "\2\0\2\33\1\264\21\33\2\0\1\33\4\0\2\33"+
    "\4\0\1\33\4\0\2\33\2\0\2\33\1\265\21\33"+
    "\2\0\1\33\4\0\2\33\4\0\1\33\4\0\2\33"+
    "\2\0\14\33\1\266\7\33\2\0\1\33\4\0\2\33"+
    "\4\0\1\33\4\0\2\33\2\0\13\33\1\267\10\33"+
    "\2\0\1\33\4\0\2\33\4\0\1\33\4\0\2\33"+
    "\2\0\7\33\1\270\14\33\2\0\1\33\4\0\2\33"+
    "\4\0\1\33\4\0\2\33\2\0\3\33\1\271\20\33"+
    "\2\0\1\33\4\0\2\33\32\0\1\272\23\0\1\33"+
    "\4\0\2\33\2\0\13\33\1\273\10\33\2\0\1\33"+
    "\4\0\2\33\4\0\1\33\4\0\2\33\2\0\15\33"+
    "\1\274\6\33\2\0\1\33\4\0\2\33\4\0\1\33"+
    "\4\0\2\33\2\0\17\33\1\275\4\33\2\0\1\33"+
    "\4\0\2\33\16\0\1\276\37\0\1\33\4\0\2\33"+
    "\2\0\10\33\1\277\13\33\2\0\1\33\4\0\2\33"+
    "\17\0\1\300\36\0\1\33\4\0\2\33\2\0\3\33"+
    "\1\301\20\33\2\0\1\33\4\0\2\33\4\0\1\33"+
    "\4\0\2\33\2\0\13\33\1\302\10\33\2\0\1\33"+
    "\4\0\2\33\43\0\1\303\12\0\1\33\4\0\2\33"+
    "\2\0\20\33\1\304\3\33\2\0\1\33\4\0\2\33"+
    "\4\0\1\33\4\0\2\33\2\0\2\33\1\305\21\33"+
    "\2\0\1\33\4\0\2\33\4\0\1\33\4\0\2\33"+
    "\2\0\3\33\1\306\20\33\2\0\1\33\4\0\2\33"+
    "\4\0\1\33\4\0\2\33\2\0\2\33\1\307\21\33"+
    "\2\0\1\33\4\0\2\33\4\0\1\33\4\0\2\33"+
    "\2\0\3\33\1\310\20\33\2\0\1\33\4\0\2\33"+
    "\4\0\1\33\4\0\2\33\2\0\5\33\1\311\16\33"+
    "\2\0\1\33\4\0\2\33\4\0\1\33\4\0\2\33"+
    "\2\0\15\33\1\312\6\33\2\0\1\33\4\0\2\33"+
    "\4\0\1\33\4\0\2\33\2\0\15\33\1\313\6\33"+
    "\2\0\1\33\4\0\2\33\4\0\1\33\4\0\2\33"+
    "\2\0\20\33\1\314\3\33\2\0\1\33\4\0\2\33"+
    "\4\0\1\33\4\0\2\33\2\0\1\33\1\315\22\33"+
    "\2\0\1\33\4\0\2\33\25\0\1\316\30\0\1\33"+
    "\4\0\2\33\2\0\15\33\1\317\6\33\2\0\1\33"+
    "\4\0\2\33\4\0\1\33\4\0\2\33\2\0\10\33"+
    "\1\320\13\33\2\0\1\33\4\0\2\33\20\0\1\321"+
    "\35\0\1\33\4\0\2\33\2\0\3\33\1\322\20\33"+
    "\2\0\1\33\4\0\2\33\27\0\1\323\26\0\1\33"+
    "\4\0\2\33\2\0\11\33\1\324\12\33\2\0\1\33"+
    "\4\0\2\33\4\0\1\33\4\0\2\33\2\0\20\33"+
    "\1\325\3\33\2\0\1\33\4\0\2\33\17\0\1\326"+
    "\36\0\1\33\4\0\2\33\2\0\13\33\1\327\10\33"+
    "\2\0\1\33\4\0\2\33\4\0\1\33\4\0\2\33"+
    "\2\0\12\33\1\330\11\33\2\0\1\33\4\0\2\33"+
    "\4\0\1\33\4\0\2\33\2\0\11\33\1\331\12\33"+
    "\2\0\1\33\4\0\2\33\4\0\1\33\4\0\2\33"+
    "\2\0\2\33\1\332\21\33\2\0\1\33\4\0\2\33"+
    "\4\0\1\33\4\0\2\33\2\0\16\33\1\333\5\33"+
    "\2\0\1\33\4\0\2\33\4\0\1\33\4\0\2\33"+
    "\2\0\6\33\1\334\15\33\2\0\1\33\4\0\2\33"+
    "\37\0\1\335\16\0\1\33\4\0\2\33\2\0\16\33"+
    "\1\336\5\33\2\0\1\33\4\0\2\33\4\0\1\33"+
    "\4\0\2\33\2\0\6\33\1\337\15\33\2\0\1\33"+
    "\4\0\2\33\30\0\1\340\25\0\1\33\4\0\2\33"+
    "\2\0\4\33\1\341\17\33\2\0\1\33\4\0\2\33"+
    "\17\0\1\342\36\0\1\33\4\0\2\33\2\0\2\33"+
    "\1\343\21\33\2\0\1\33\4\0\2\33\20\0\1\344"+
    "\35\0\1\33\4\0\2\33\2\0\14\33\1\345\7\33"+
    "\2\0\1\33\4\0\2\33\4\0\1\33\4\0\2\33"+
    "\2\0\20\33\1\346\3\33\2\0\1\33\4\0\2\33"+
    "\4\0\1\33\4\0\2\33\2\0\2\33\1\347\21\33"+
    "\2\0\1\33\4\0\2\33\4\0\1\33\4\0\2\33"+
    "\2\0\5\33\1\350\16\33\2\0\1\33\4\0\2\33"+
    "\4\0\1\33\4\0\2\33\2\0\20\33\1\351\3\33"+
    "\2\0\1\33\4\0\2\33\17\0\1\352\36\0\1\33"+
    "\4\0\2\33\2\0\2\33\1\353\21\33\2\0\1\33"+
    "\4\0\2\33\4\0\1\33\4\0\2\33\1\354\1\0"+
    "\24\33\2\0\1\33\4\0\2\33\20\0\1\355\61\0"+
    "\1\356\25\0\1\33\4\0\2\33\2\0\15\33\1\357"+
    "\6\33\2\0\1\33\4\0\2\33\4\0\1\33\4\0"+
    "\2\33\2\0\13\33\1\360\10\33\2\0\1\33\4\0"+
    "\2\33\27\0\1\361\51\0\1\362\50\0\1\363\60\0"+
    "\1\364\20\0\1\33\4\0\2\33\2\0\14\33\1\365"+
    "\7\33\2\0\1\33\4\0\2\33\34\0\1\366\51\0"+
    "\1\367\34\0\1\370\36\0\1\33\4\0\2\33\2\0"+
    "\15\33\1\371\6\33\2\0\1\33\4\0\2\33\25\0"+
    "\1\372\51\0\1\373\47\0\1\374\51\0\1\375\45\0"+
    "\1\376\51\0\1\377\61\0\1\u0100\22\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9030];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\26\0\1\11\7\1\1\11\6\1\1\11\3\1\1\11"+
    "\10\1\1\11\11\1\3\11\2\1\2\11\2\1\1\0"+
    "\2\1\3\11\2\1\2\11\24\1\1\11\1\1\1\0"+
    "\16\1\1\0\2\1\1\0\25\1\1\0\2\1\1\0"+
    "\17\1\1\0\3\1\1\0\1\1\1\0\2\1\1\0"+
    "\17\1\1\0\3\1\1\0\1\1\1\0\2\1\1\0"+
    "\12\1\1\0\2\1\1\0\1\1\1\0\2\1\1\0"+
    "\6\1\1\0\2\1\1\11\1\1\1\0\1\1\1\0"+
    "\5\1\1\0\1\1\3\0\2\1\3\0\1\11\1\1"+
    "\2\0\1\11\1\1\5\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[256];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */


  _XQueryLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _XQueryLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1816) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 17: 
          { return XQ_DECIMAL_LITERAL;
          }
        case 50: break;
        case 5: 
          { return XQ_COMMENT_CHAR;
          }
        case 51: break;
        case 10: 
          { yybegin(_DECLARE_COPYNS__); return OP_COMMA;
          }
        case 52: break;
        case 30: 
          { pushState(_DECLARE_END); pushState(_STRINGLITERAL); yybegin(_QNAME); return KW_OPTION;
          }
        case 53: break;
        case 44: 
          { pushState(_DECLARE_END); yybegin(_URILITERAL); return KW_COLLATION;
          }
        case 54: break;
        case 43: 
          { yybegin(NAMESPACEDECL); return KW_NAMESPACE;
          }
        case 55: break;
        case 11: 
          { yybegin(STR_START_QUOTE); return XQ_STR_START;
          }
        case 56: break;
        case 34: 
          { yybegin(_DECLARE_DEFAULT); return KW_DEFAULT;
          }
        case 57: break;
        case 22: 
          { return XQ_STR_ESCAPE_APOS;
          }
        case 58: break;
        case 19: 
          { popState(); return XQ_COMMENT_END;
          }
        case 59: break;
        case 24: 
          { return XQ_DOUBLE_LITERAL;
          }
        case 60: break;
        case 21: 
          { return XQ_STR_ESCAPE_QUOTE;
          }
        case 61: break;
        case 39: 
          { yybegin(_DECLARE_COPYNS_); return KW_PRESERVE;
          }
        case 62: break;
        case 7: 
          { return XQ_STR_CHAR;
          }
        case 63: break;
        case 46: 
          { yybegin(_DECLARE_COPYNS_); return KW_NO_PRESERVE;
          }
        case 64: break;
        case 42: 
          { yybegin(_DECLARE_END); return KW_UNORDERED;
          }
        case 65: break;
        case 35: 
          { yybegin(_DECLARE_END); return KW_INHERIT;
          }
        case 66: break;
        case 47: 
          { yybegin(_PRESERVE_OR_STRIP); return KW_CONSTRUCTION;
          }
        case 67: break;
        case 31: 
          { yybegin(_DECLARE); return KW_DECLARE;
          }
        case 68: break;
        case 23: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { yybegin(_QNAME_); return XQ_PREFIX_NAME;
          }
        case 69: break;
        case 9: 
          { yybegin(YYINITIAL); return OP_SEPERATOR;
          }
        case 70: break;
        case 32: 
          { yybegin(_DECLARE_END); return KW_ORDERED;
          }
        case 71: break;
        case 20: 
          { pushState(); return XQ_COMMENT_START;
          }
        case 72: break;
        case 12: 
          { yybegin(STR_START_APOS); return XQ_STR_START;
          }
        case 73: break;
        case 18: 
          { pushState(); yybegin(EXPR_COMMENT); return XQ_COMMENT_START;
          }
        case 74: break;
        case 28: 
          { yybegin(_DECLARE_END); return KW_STRIP;
          }
        case 75: break;
        case 40: 
          { yybegin(_DECLARE_END); return KW_GREATEST;
          }
        case 76: break;
        case 14: 
          { popState(); return XQ_LOCAL_NAME;
          }
        case 77: break;
        case 33: 
          { pushState(_XQUERY_VERSION_END); yybegin(_STRINGLITERAL); return KW_VERSION;
          }
        case 78: break;
        case 13: 
          { pushState(_DECLARE_END); yybegin(_URILITERAL); return OP_EQUALS;
          }
        case 79: break;
        case 27: 
          { yybegin(_DECLARE_END); return KW_LEAST;
          }
        case 80: break;
        case 25: 
          { yybegin(_DECLARE_DEFAULT_ORDER); return KW_ORDER;
          }
        case 81: break;
        case 37: 
          { yybegin(DECLAREORDERING); return KW_ORDERING;
          }
        case 82: break;
        case 41: 
          { yybegin(_DECLARE_END); return KW_PRESERVE;
          }
        case 83: break;
        case 45: 
          { yybegin(_DECLARE_END); return KW_NO_INHERIT;
          }
        case 84: break;
        case 29: 
          { yybegin(_XQUERY); return KW_XQUERY;
          }
        case 85: break;
        case 16: 
          { yybegin(_QNAME_LOCAL); return OP_COLON;
          }
        case 86: break;
        case 15: 
          { popState(); return BAD_CHARACTER;
          }
        case 87: break;
        case 26: 
          { yybegin(_DECLARE_DEFAULT_ORDER_EMPTY); return KW_EMPTY;
          }
        case 88: break;
        case 3: 
          { return XQ_INTEGER_LITERAL;
          }
        case 89: break;
        case 8: 
          { popState(); return XQ_STR_END;
          }
        case 90: break;
        case 4: 
          { return BAD_WORD;
          }
        case 91: break;
        case 48: 
          { yybegin(_PRESERVE_OR_STRIP); return KW_BOUNDARY_SPACE;
          }
        case 92: break;
        case 1: 
          { yybegin(YYINITIAL); return BAD_CHARACTER;
          }
        case 93: break;
        case 38: 
          { pushState(_DECLARE_END); yybegin(_URILITERAL); return KW_BASE_URI;
          }
        case 94: break;
        case 36: 
          { pushState(_DECLARE_END); yybegin(_STRINGLITERAL); return KW_ENCODING;
          }
        case 95: break;
        case 49: 
          { yybegin(_DECLARE_COPYNS); return KW_COPY_NAMESPACES;
          }
        case 96: break;
        case 2: 
          { return WHITE_SPACE;
          }
        case 97: break;
        case 6: 
          { yybegin(_NAMESPACEDECL_); return XQ_LOCAL_NAME;
          }
        case 98: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
