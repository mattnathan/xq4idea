/* The following code was generated by JFlex 1.4.3 on 09/04/11 18:35 */

package org.mn.plug.idea.xq4idea.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

// this lexer follows the principles set out in http://www.w3.org/TR/xquery-xpath-parsing/
/**
 * Generated lexer
 */
@SuppressWarnings({"UnusedDeclaration", "UnusedAssignment", "FieldCanBeLocal", "AccessStaticViaInstance", "JavaDoc", "ConstantConditions"})

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 09/04/11 18:35 from the specification file
 * <tt>C:/Users/Matt/IdeaProjects/ideaPlugins/xq4idea/source/xq4idea/src/org/mn/plug/idea/xq4idea/lang/lexer/_XQueryLexer.flex</tt>
 */
class _XQueryLexer extends AbstractLexer implements FlexLexer, XQueryTokenTypes {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int _SEP = 68;
  public static final int _DECLARE = 18;
  public static final int _DECLARE_DEFAULT_ORDER_EMPTY = 30;
  public static final int _ATLIST_ = 56;
  public static final int _DECLARE_DEFAULT = 26;
  public static final int _PRESERVE_OR_STRIP = 46;
  public static final int _EMPTY_BRACES = 64;
  public static final int STR_START_QUOTE = 8;
  public static final int _STRINGLITERAL = 50;
  public static final int DECLAREORDERING = 4;
  public static final int _IMPORT_SCHEMA_DEFAULT_ELEMENT = 42;
  public static final int _IMPORT_SCHEMA = 38;
  public static final int _IMPORT_SCHEMA_DEFAULT = 40;
  public static final int _PARAM = 58;
  public static final int YYINITIAL = 0;
  public static final int NAMESPACEDECL = 6;
  public static final int _AS_ = 62;
  public static final int _DECLARE_DEFAULT_ORDER = 28;
  public static final int _URILITERAL = 48;
  public static final int _QNAME = 70;
  public static final int _NAMESPACEDECL_ = 52;
  public static final int STR_START_APOS = 10;
  public static final int _QNAME_LOCAL = 74;
  public static final int _DECLARE_COPYNS = 20;
  public static final int _ATLIST = 54;
  public static final int _DECLARE_DEFAULT_NAMESPACE = 32;
  public static final int _XQUERY = 12;
  public static final int _IMPORT_MODULE = 44;
  public static final int EXPR_COMMENT = 2;
  public static final int _XQUERY_VERSION = 14;
  public static final int _DECLARE_COPYNS_ = 22;
  public static final int _IMPORT = 36;
  public static final int _MODULE = 16;
  public static final int _AS = 60;
  public static final int _QNAME_ = 72;
  public static final int _DECLARE_VARIABLE = 34;
  public static final int _EMPTY_BRACES_ = 66;
  public static final int _DECLARE_COPYNS__ = 24;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 
    24, 24, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 30, 
    31, 31, 32, 32, 33, 33, 34, 34, 35, 35, 36, 36
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\2\1\2\0\1\1\22\0\1\1\1\0\1\47\1\0\1\44"+
    "\1\0\1\0\1\50\1\45\1\46\1\0\1\5\1\42\1\13\1\3"+
    "\1\0\12\2\1\14\1\10\1\0\1\41\3\0\4\12\1\4\1\12"+
    "\24\12\4\0\1\6\1\0\1\25\1\37\1\23\1\22\1\17\1\40"+
    "\1\36\1\43\1\30\2\12\1\24\1\26\1\35\1\27\1\31\1\15"+
    "\1\20\1\34\1\32\1\16\1\33\1\12\1\11\1\21\1\12\57\0"+
    "\1\51\12\0\1\51\1\0\1\7\2\0\1\51\5\0\27\12\1\0"+
    "\37\12\1\0\72\12\2\51\13\12\2\51\10\12\1\51\65\12\1\51"+
    "\104\12\11\51\44\12\3\51\2\12\4\51\36\12\37\51\31\0\131\12"+
    "\22\51\7\12\4\0\12\51\2\52\16\0\5\51\11\0\1\51\21\0"+
    "\106\7\32\0\2\7\30\0\1\51\13\0\1\12\1\7\3\12\1\0"+
    "\1\12\1\0\24\12\1\0\54\12\1\0\7\12\3\51\1\12\1\51"+
    "\1\12\1\51\1\12\1\51\1\12\1\51\22\12\2\51\1\0\5\51"+
    "\4\0\1\51\14\12\1\51\102\12\1\51\14\12\1\51\44\12\1\0"+
    "\4\7\3\0\6\51\65\12\2\51\2\12\2\51\2\12\2\51\1\0"+
    "\34\12\2\51\10\12\2\0\2\12\6\0\20\51\41\0\46\12\2\0"+
    "\1\12\7\0\46\12\1\51\11\0\21\7\1\0\27\7\1\0\3\7"+
    "\1\0\1\7\1\0\2\7\1\0\1\7\13\0\33\12\5\0\3\12"+
    "\56\0\32\12\5\0\1\52\12\12\10\7\15\0\12\7\4\0\2\51"+
    "\1\7\107\12\2\51\5\12\1\51\17\12\1\51\4\12\1\0\1\12"+
    "\17\7\2\12\2\7\1\0\4\7\2\51\12\7\3\51\2\0\1\51"+
    "\20\0\1\51\1\0\36\51\35\0\3\51\60\0\46\51\13\0\1\51"+
    "\u014f\0\3\7\1\51\65\12\2\0\1\7\1\12\20\7\2\0\1\51"+
    "\4\7\3\0\12\12\2\7\2\0\12\7\21\0\3\7\1\0\10\12"+
    "\2\0\2\12\2\0\26\12\1\0\7\12\1\0\1\12\3\0\4\12"+
    "\2\0\1\7\1\51\7\7\2\0\2\7\2\0\3\7\11\0\1\7"+
    "\4\0\2\12\1\0\3\12\2\7\2\0\12\7\2\12\20\0\1\7"+
    "\2\0\6\12\4\0\2\12\2\0\26\12\1\0\7\12\1\0\2\12"+
    "\1\0\2\12\1\0\2\12\2\0\1\7\1\0\5\7\4\0\2\7"+
    "\2\0\3\7\13\0\4\12\1\0\1\12\7\0\12\7\2\7\3\12"+
    "\14\0\3\7\1\0\7\12\1\51\1\12\1\0\3\12\1\0\26\12"+
    "\1\0\7\12\1\0\2\12\1\0\5\12\2\0\1\7\1\12\10\7"+
    "\1\0\3\7\1\0\3\7\2\0\1\51\17\0\1\12\1\51\4\0"+
    "\12\7\21\0\3\7\1\0\10\12\2\0\2\12\2\0\26\12\1\0"+
    "\7\12\1\0\2\12\1\0\1\51\4\12\2\0\1\7\1\12\6\7"+
    "\3\0\2\7\2\0\3\7\10\0\2\7\4\0\2\12\1\0\3\12"+
    "\4\0\12\7\1\0\1\51\20\0\1\7\1\52\1\0\6\12\3\0"+
    "\3\12\1\0\4\12\3\0\2\12\1\0\1\12\1\0\2\12\3\0"+
    "\2\12\3\0\3\12\3\0\10\12\1\0\3\12\4\0\5\7\3\0"+
    "\3\7\1\0\4\7\11\0\1\7\17\0\11\7\21\0\3\7\1\0"+
    "\10\12\1\0\3\12\1\0\27\12\1\0\12\12\1\0\5\12\4\0"+
    "\7\7\1\0\3\7\1\0\4\7\7\0\2\7\11\0\2\12\4\0"+
    "\12\7\22\0\2\7\1\0\10\12\1\0\3\12\1\0\27\12\1\0"+
    "\12\12\1\0\5\12\3\0\1\51\7\7\1\0\3\7\1\0\4\7"+
    "\7\0\2\7\7\0\1\12\1\0\2\12\4\0\12\7\22\0\2\7"+
    "\1\0\10\12\1\0\3\12\1\0\27\12\1\0\20\12\4\0\6\7"+
    "\2\0\3\7\1\0\4\7\11\0\1\7\10\0\2\12\4\0\12\7"+
    "\25\0\22\51\3\0\30\51\1\0\11\51\1\0\1\51\2\0\7\51"+
    "\72\0\56\12\1\51\1\12\1\7\2\12\7\7\5\0\6\12\1\52"+
    "\10\7\1\0\12\7\47\0\2\12\1\0\1\12\2\0\2\12\1\0"+
    "\1\12\2\0\1\12\6\0\4\12\1\0\7\12\1\0\3\12\1\0"+
    "\1\12\1\0\1\12\2\0\2\12\1\0\2\12\1\51\1\12\1\7"+
    "\2\12\6\7\1\0\2\7\1\12\2\0\5\12\1\0\1\52\1\0"+
    "\6\7\2\0\12\7\2\0\2\51\42\0\1\51\27\0\2\7\6\0"+
    "\12\7\13\0\1\7\1\0\1\7\1\0\1\7\4\0\2\7\10\12"+
    "\1\0\41\12\1\51\6\0\24\7\1\0\2\7\4\52\4\0\6\7"+
    "\1\0\1\7\1\0\25\7\3\0\7\7\1\0\1\7\106\0\42\51"+
    "\1\0\5\51\1\0\2\51\45\0\6\51\112\0\46\12\12\0\47\12"+
    "\2\51\7\0\1\12\1\51\2\12\1\51\3\12\1\51\1\12\1\51"+
    "\2\12\1\51\5\12\51\51\1\12\1\51\1\12\1\51\1\12\13\51"+
    "\1\12\1\51\1\12\1\51\1\12\3\51\2\12\3\51\1\12\5\0"+
    "\3\12\1\51\1\12\1\51\1\12\1\51\1\12\1\51\1\12\3\51"+
    "\2\12\3\51\2\12\1\51\1\12\50\51\1\12\4\51\5\0\1\12"+
    "\2\51\1\12\2\51\2\12\7\51\2\12\1\51\1\12\1\51\7\12"+
    "\50\51\1\12\4\51\1\12\10\51\1\12\6\0\7\51\1\0\77\51"+
    "\1\0\1\51\1\0\4\51\2\0\7\51\1\0\1\51\1\0\4\51"+
    "\2\0\47\51\1\0\1\51\1\0\4\51\2\0\37\51\1\0\1\51"+
    "\1\0\4\51\2\0\7\51\1\0\1\51\1\0\4\51\2\0\7\51"+
    "\1\0\7\51\1\0\27\51\1\0\37\51\1\0\1\51\1\0\4\51"+
    "\2\0\7\51\1\0\47\51\1\0\23\51\105\0\125\51\14\0\u026c\51"+
    "\2\0\10\51\12\0\32\51\5\0\113\51\25\0\15\51\1\0\4\51"+
    "\16\0\22\51\16\0\22\51\16\0\15\51\1\0\3\51\17\0\64\51"+
    "\43\0\1\51\4\0\1\51\103\0\130\51\10\0\51\51\127\0\35\51"+
    "\63\0\36\51\2\0\5\51\u038b\0\154\51\224\0\234\12\4\0\132\12"+
    "\6\0\26\12\2\0\6\12\2\0\46\12\2\0\6\12\2\0\10\12"+
    "\1\0\1\12\1\0\1\12\1\0\1\12\1\0\37\12\2\0\65\12"+
    "\1\0\7\12\1\0\1\12\3\0\3\12\1\0\7\12\3\0\4\12"+
    "\2\0\6\12\4\0\15\12\5\0\3\12\1\0\7\12\164\0\1\51"+
    "\15\0\1\51\120\0\15\7\4\0\1\7\40\0\1\51\4\0\1\51"+
    "\2\0\12\51\1\0\1\51\3\0\5\51\6\0\1\51\1\0\1\12"+
    "\1\0\1\51\1\0\2\12\2\51\1\6\3\51\1\0\7\51\3\0"+
    "\3\51\5\0\5\51\66\0\3\6\u0e82\0\1\52\1\51\1\6\31\0"+
    "\11\6\6\7\1\0\5\52\5\0\2\51\4\0\124\12\2\51\2\0"+
    "\2\7\2\0\2\52\1\51\1\0\132\12\1\0\3\52\1\51\5\0"+
    "\50\12\4\0\136\51\21\0\30\51\70\0\20\51\u0200\0\u19b6\51\112\0"+
    "\u51a6\12\132\0\u048d\51\u0773\0\u2ba4\12\134\0\u0800\0\u1900\0\u012e\51\2\0"+
    "\73\51\225\0\7\51\14\0\5\51\5\0\1\51\1\0\12\51\1\0"+
    "\15\51\1\0\5\51\1\0\1\51\1\0\2\51\1\0\2\51\1\0"+
    "\154\51\41\0\u016b\51\22\0\100\51\2\0\66\51\50\0\14\51\164\0"+
    "\5\51\1\0\207\51\44\0\32\51\6\0\32\51\13\0\131\51\3\0"+
    "\6\51\2\0\6\51\2\0\6\51\2\0\3\51\41\0\2\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\45\0\1\1\1\2\1\3\1\1\5\4\1\1\3\5"+
    "\2\4\1\6\1\7\2\10\1\4\1\11\12\4\1\12"+
    "\12\4\1\1\11\4\1\13\1\14\1\15\2\16\1\17"+
    "\1\20\1\16\6\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\24\1\27\5\0\1\30\1\31\1\32\2\0\1\33"+
    "\1\34\27\0\1\35\11\0\1\36\1\37\1\0\5\21"+
    "\1\40\1\41\50\0\6\21\47\0\1\21\1\42\1\43"+
    "\1\44\1\45\30\0\1\46\1\0\1\47\1\50\12\0"+
    "\1\51\1\21\1\52\1\0\1\53\1\54\11\0\1\55"+
    "\16\0\1\56\1\57\5\0\1\21\1\60\1\0\1\61"+
    "\1\62\2\0\1\63\11\0\1\64\1\0\1\65\5\0"+
    "\1\66\1\0\1\67\2\0\1\70\1\0\1\71\3\0"+
    "\1\72\1\73\1\0\1\74\1\0\1\75\3\0\1\76"+
    "\1\77\1\0\1\100\2\0\1\101\1\102\1\103\2\0"+
    "\1\104\3\0\1\105\1\106\1\107\1\110\4\0\1\111"+
    "\3\0\1\112\1\0\1\113\4\0\1\114\1\115";

  private static int [] zzUnpackAction() {
    int [] result = new int[411];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\53\0\126\0\201\0\254\0\327\0\u0102\0\u012d"+
    "\0\u0158\0\u0183\0\u01ae\0\u01d9\0\u0204\0\u022f\0\u025a\0\u0285"+
    "\0\u02b0\0\u02db\0\u0306\0\u0331\0\u035c\0\u0387\0\u03b2\0\u03dd"+
    "\0\u0408\0\u0433\0\u045e\0\u0489\0\u04b4\0\u04df\0\u050a\0\u0535"+
    "\0\u0560\0\u058b\0\u05b6\0\u05e1\0\u060c\0\u0637\0\u0662\0\u068d"+
    "\0\u06b8\0\u0637\0\u06e3\0\u070e\0\u0739\0\u0764\0\u078f\0\u0637"+
    "\0\u07ba\0\u07e5\0\u0810\0\u083b\0\u0866\0\u0637\0\u0891\0\u08bc"+
    "\0\u08e7\0\u0637\0\u0912\0\u093d\0\u0968\0\u0993\0\u09be\0\u09e9"+
    "\0\u0a14\0\u0a3f\0\u0a6a\0\u0a95\0\u0637\0\u0ac0\0\u0aeb\0\u0b16"+
    "\0\u0b41\0\u0b6c\0\u0b97\0\u0bc2\0\u0bed\0\u0c18\0\u0c43\0\u0c6e"+
    "\0\u0c99\0\u0cc4\0\u0cef\0\u0d1a\0\u0d45\0\u0d70\0\u0d9b\0\u0dc6"+
    "\0\u0df1\0\u0637\0\u0637\0\u0637\0\u0e1c\0\u0e47\0\u0e1c\0\u0637"+
    "\0\u0e72\0\u0e9d\0\u0ec8\0\u0ef3\0\u0f1e\0\u0f49\0\u0f74\0\u078f"+
    "\0\u0637\0\u0f9f\0\u0637\0\u0637\0\u0fca\0\u0ff5\0\u1020\0\u104b"+
    "\0\u1076\0\u10a1\0\u10cc\0\u0637\0\u0637\0\u0637\0\u10f7\0\u1122"+
    "\0\u0637\0\u0637\0\u114d\0\u1178\0\u11a3\0\u11ce\0\u11f9\0\u1224"+
    "\0\u124f\0\u127a\0\u12a5\0\u12d0\0\u12fb\0\u1326\0\u1351\0\u137c"+
    "\0\u13a7\0\u13d2\0\u13fd\0\u1428\0\u1453\0\u147e\0\u14a9\0\u14d4"+
    "\0\u14ff\0\u0637\0\u152a\0\u1555\0\u1580\0\u15ab\0\u15d6\0\u1601"+
    "\0\u162c\0\u1657\0\u1682\0\u0e1c\0\u0e1c\0\u16ad\0\u16d8\0\u1703"+
    "\0\u172e\0\u1759\0\u1784\0\u0637\0\u17af\0\u17af\0\u17da\0\u1805"+
    "\0\u1830\0\u185b\0\u1886\0\u18b1\0\u18dc\0\u1907\0\u1932\0\u195d"+
    "\0\u1988\0\u19b3\0\u19de\0\u1a09\0\u1a34\0\u1a5f\0\u1a8a\0\u1ab5"+
    "\0\u1ae0\0\u1b0b\0\u1b36\0\u1b61\0\u1b8c\0\u1bb7\0\u1be2\0\u1c0d"+
    "\0\u1c38\0\u1c63\0\u1c8e\0\u1cb9\0\u1ce4\0\u1d0f\0\u1d3a\0\u1d65"+
    "\0\u1d90\0\u1dbb\0\u1de6\0\u1e11\0\u1e3c\0\u1e67\0\u1e92\0\u1ebd"+
    "\0\u1ee8\0\u1f13\0\u1f3e\0\u1f69\0\u1f94\0\u1fbf\0\u1fea\0\u2015"+
    "\0\u2040\0\u206b\0\u2096\0\u20c1\0\u20ec\0\u2117\0\u2142\0\u216d"+
    "\0\u2198\0\u21c3\0\u21ee\0\u2219\0\u2244\0\u226f\0\u229a\0\u22c5"+
    "\0\u22f0\0\u231b\0\u2346\0\u2371\0\u239c\0\u23c7\0\u23f2\0\u241d"+
    "\0\u2448\0\u2473\0\u249e\0\u24c9\0\u24f4\0\u251f\0\u254a\0\u2575"+
    "\0\u25a0\0\u25cb\0\u25f6\0\u0e9d\0\u0e9d\0\u0e9d\0\u0e9d\0\u2621"+
    "\0\u264c\0\u2677\0\u26a2\0\u26cd\0\u26f8\0\u2723\0\u274e\0\u2779"+
    "\0\u27a4\0\u27cf\0\u27fa\0\u2825\0\u2850\0\u287b\0\u28a6\0\u28d1"+
    "\0\u28fc\0\u2927\0\u2952\0\u297d\0\u29a8\0\u29d3\0\u29fe\0\u0637"+
    "\0\u2a29\0\u0637\0\u0637\0\u2a54\0\u2a7f\0\u2aaa\0\u2ad5\0\u2b00"+
    "\0\u2b2b\0\u2b56\0\u2b81\0\u2bac\0\u2bd7\0\u0637\0\u2c02\0\u0637"+
    "\0\u2c2d\0\u0637\0\u0637\0\u2c58\0\u2c83\0\u2cae\0\u2cd9\0\u2d04"+
    "\0\u2d2f\0\u2d5a\0\u2d85\0\u2db0\0\u0637\0\u2ddb\0\u2e06\0\u2e31"+
    "\0\u2e5c\0\u2e87\0\u2eb2\0\u2edd\0\u2f08\0\u2f33\0\u2f5e\0\u2f89"+
    "\0\u2fb4\0\u2fdf\0\u300a\0\u0637\0\u0637\0\u3035\0\u3060\0\u308b"+
    "\0\u30b6\0\u30e1\0\u310c\0\u0637\0\u3137\0\u0637\0\u0637\0\u3162"+
    "\0\u318d\0\u0637\0\u31b8\0\u31e3\0\u320e\0\u3239\0\u3264\0\u328f"+
    "\0\u32ba\0\u32e5\0\u3310\0\u0637\0\u333b\0\u0637\0\u3366\0\u3391"+
    "\0\u33bc\0\u33e7\0\u3412\0\u0637\0\u343d\0\u0637\0\u3468\0\u3493"+
    "\0\u0e9d\0\u34be\0\u0637\0\u34e9\0\u3514\0\u353f\0\u0637\0\u0637"+
    "\0\u356a\0\u0637\0\u3595\0\u0637\0\u35c0\0\u35eb\0\u3616\0\u0637"+
    "\0\u0637\0\u3641\0\u0637\0\u366c\0\u3697\0\u0637\0\u0637\0\u0637"+
    "\0\u36c2\0\u36ed\0\u0637\0\u3718\0\u3743\0\u376e\0\u0637\0\u0637"+
    "\0\u0637\0\u0637\0\u3799\0\u37c4\0\u37ef\0\u381a\0\u0637\0\u3845"+
    "\0\u3870\0\u389b\0\u0637\0\u38c6\0\u0637\0\u38f1\0\u391c\0\u3947"+
    "\0\u3972\0\u0637\0\u0637";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[411];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\46\1\47\1\50\1\51\1\52\4\46\1\53\1\52"+
    "\2\46\5\52\1\54\3\52\1\55\1\52\1\56\10\52"+
    "\2\46\1\52\1\46\1\57\3\46\2\52\14\60\1\61"+
    "\30\60\1\62\5\60\1\46\1\47\2\46\1\52\4\46"+
    "\2\52\2\46\1\52\1\63\10\52\1\64\11\52\2\46"+
    "\1\52\1\46\1\57\3\46\2\52\1\46\1\47\2\46"+
    "\1\65\1\46\1\65\2\46\2\65\2\46\24\65\2\46"+
    "\1\65\1\46\1\57\3\46\2\52\47\66\1\67\53\66"+
    "\1\70\2\66\1\46\1\47\2\46\1\52\4\46\2\52"+
    "\2\46\16\52\1\71\5\52\2\46\1\52\1\46\1\57"+
    "\3\46\2\52\1\46\1\47\2\46\1\52\3\46\1\72"+
    "\2\52\2\46\2\52\1\73\21\52\2\46\1\52\1\46"+
    "\1\57\3\46\2\52\1\46\1\47\2\46\1\52\4\46"+
    "\2\52\2\46\20\52\1\74\3\52\2\46\1\52\1\46"+
    "\1\57\3\46\2\52\1\46\1\47\2\46\1\52\4\46"+
    "\2\52\2\46\5\52\1\75\1\76\3\52\1\77\3\52"+
    "\1\100\1\52\1\101\1\52\1\102\1\52\2\46\1\52"+
    "\1\46\1\57\3\46\2\52\1\46\1\47\2\46\1\52"+
    "\4\46\2\52\2\46\14\52\1\103\3\52\1\104\3\52"+
    "\2\46\1\52\1\46\1\57\3\46\2\52\1\46\1\47"+
    "\2\46\1\52\4\46\2\52\2\46\24\52\1\46\1\105"+
    "\1\52\1\46\1\57\3\46\2\52\1\46\1\47\2\46"+
    "\1\52\4\46\2\52\2\46\13\52\1\106\4\52\1\107"+
    "\3\52\2\46\1\52\1\46\1\57\3\46\2\52\1\46"+
    "\1\47\2\46\1\52\4\46\2\52\2\46\2\52\1\110"+
    "\3\52\1\111\3\52\1\112\10\52\1\113\2\46\1\52"+
    "\1\46\1\57\3\46\2\52\1\46\1\47\2\46\1\52"+
    "\4\46\2\52\2\46\2\52\1\114\21\52\2\46\1\52"+
    "\1\46\1\57\3\46\2\52\1\46\1\47\2\46\1\52"+
    "\4\46\2\52\2\46\7\52\1\115\11\52\1\116\2\52"+
    "\2\46\1\52\1\46\1\57\3\46\2\52\1\46\1\47"+
    "\2\46\1\52\4\46\2\52\2\46\20\52\1\117\3\52"+
    "\2\46\1\52\1\46\1\57\3\46\2\52\1\46\1\47"+
    "\2\46\1\52\4\46\2\52\1\46\1\120\2\52\1\121"+
    "\21\52\2\46\1\52\1\46\1\57\3\46\2\52\1\46"+
    "\1\47\2\46\1\52\4\46\2\52\2\46\11\52\1\122"+
    "\5\52\1\123\4\52\2\46\1\52\1\46\1\57\3\46"+
    "\2\52\1\46\1\47\2\46\1\52\4\46\2\52\2\46"+
    "\5\52\1\124\12\52\1\125\3\52\2\46\1\52\1\46"+
    "\1\57\3\46\2\52\1\46\1\47\2\46\1\52\4\46"+
    "\2\52\2\46\2\52\1\126\21\52\2\46\1\52\1\46"+
    "\1\57\3\46\2\52\1\46\1\47\2\46\1\52\4\46"+
    "\2\52\2\46\20\52\1\127\3\52\2\46\1\52\1\46"+
    "\1\57\3\46\2\52\1\46\1\47\2\46\1\52\4\46"+
    "\2\52\2\46\20\52\1\125\3\52\2\46\1\52\1\46"+
    "\1\57\3\46\2\52\1\46\1\47\2\46\1\52\4\46"+
    "\2\52\2\46\14\52\1\130\2\52\1\131\4\52\2\46"+
    "\1\52\1\46\1\57\3\46\2\52\1\46\1\47\2\46"+
    "\1\52\4\46\2\52\2\46\24\52\2\46\1\52\1\46"+
    "\1\57\1\46\1\132\1\133\2\52\1\46\1\47\2\46"+
    "\1\52\4\46\2\52\2\46\24\52\1\134\1\46\1\52"+
    "\1\46\1\57\3\46\2\52\1\135\1\47\23\135\1\136"+
    "\26\135\1\47\40\135\1\137\10\135\1\46\1\47\2\46"+
    "\1\52\4\46\2\52\2\46\24\52\2\46\1\52\1\140"+
    "\1\57\3\46\2\52\1\135\1\47\23\135\1\141\25\135"+
    "\1\46\1\47\2\46\1\142\1\46\1\142\2\46\2\142"+
    "\2\46\6\142\1\143\4\142\1\144\1\142\1\145\1\146"+
    "\1\142\1\147\3\142\2\46\1\142\1\46\1\57\3\46"+
    "\2\52\1\46\1\47\2\46\1\52\4\46\2\52\2\46"+
    "\24\52\2\46\1\52\1\46\1\150\3\46\2\52\1\46"+
    "\1\47\2\46\1\52\4\46\2\52\2\46\24\52\2\46"+
    "\1\52\1\46\1\57\1\151\2\46\2\52\1\46\1\47"+
    "\2\46\1\52\3\46\1\72\2\52\2\46\24\52\2\46"+
    "\1\52\1\46\1\57\3\46\2\52\1\46\1\47\2\46"+
    "\1\152\1\46\1\152\2\46\2\152\2\46\24\152\2\46"+
    "\1\152\1\46\1\57\3\46\2\52\14\153\1\154\42\153"+
    "\1\155\1\153\1\155\2\153\2\155\2\153\24\155\2\153"+
    "\1\155\7\153\54\0\1\47\53\0\1\50\1\156\1\157"+
    "\12\0\1\157\35\0\1\156\65\0\1\160\54\0\1\161"+
    "\62\0\1\162\51\0\1\163\40\0\1\164\104\0\1\165"+
    "\20\0\1\166\73\0\1\167\35\0\1\170\34\0\3\65"+
    "\1\0\2\65\1\0\3\65\1\0\24\65\2\0\1\65"+
    "\6\0\1\65\47\0\1\171\53\0\1\172\21\0\1\173"+
    "\70\0\1\174\42\0\1\175\44\0\1\176\62\0\1\177"+
    "\43\0\1\200\10\0\1\201\46\0\1\202\52\0\1\203"+
    "\52\0\1\204\1\0\1\205\43\0\1\206\61\0\1\207"+
    "\60\0\1\210\44\0\1\211\47\0\1\212\55\0\1\213"+
    "\43\0\1\214\50\0\1\215\62\0\1\216\43\0\1\217"+
    "\53\0\1\220\57\0\1\221\66\0\1\222\22\0\1\223"+
    "\70\0\1\224\46\0\1\225\46\0\1\226\60\0\1\227"+
    "\51\0\1\230\53\0\1\231\45\0\1\232\64\0\1\233"+
    "\20\0\1\135\1\0\52\135\1\0\30\135\1\234\21\135"+
    "\1\0\32\135\1\235\16\135\2\0\3\142\1\0\2\142"+
    "\1\0\3\142\1\236\24\142\2\0\1\142\6\0\1\142"+
    "\2\0\3\142\1\0\2\142\1\0\3\142\1\236\12\142"+
    "\1\237\11\142\2\0\1\142\6\0\1\142\2\0\3\142"+
    "\1\0\2\142\1\0\3\142\1\236\15\142\1\240\6\142"+
    "\2\0\1\142\6\0\1\142\2\0\3\142\1\0\2\142"+
    "\1\0\3\142\1\236\2\142\1\241\21\142\2\0\1\142"+
    "\6\0\1\142\2\0\3\142\1\0\2\142\1\0\3\142"+
    "\1\236\12\142\1\242\11\142\2\0\1\142\6\0\1\142"+
    "\2\0\3\142\1\0\2\142\1\0\3\142\1\236\12\142"+
    "\1\243\11\142\2\0\1\142\6\0\1\142\2\0\3\152"+
    "\1\0\2\152\1\0\3\152\1\244\24\152\2\0\1\152"+
    "\6\0\1\152\2\0\3\155\1\0\2\155\1\0\3\155"+
    "\1\0\24\155\2\0\1\155\6\0\1\155\2\0\1\156"+
    "\1\0\1\157\12\0\1\157\35\0\1\245\2\0\1\246"+
    "\5\0\1\246\55\0\1\247\57\0\1\250\51\0\1\251"+
    "\61\0\1\252\50\0\1\253\45\0\1\254\50\0\1\255"+
    "\55\0\1\256\55\0\1\257\64\0\1\260\43\0\1\261"+
    "\3\0\1\262\37\0\1\263\62\0\1\264\40\0\1\265"+
    "\60\0\1\266\60\0\1\267\34\0\1\270\53\0\1\271"+
    "\46\0\1\272\102\0\1\273\22\0\1\274\56\0\1\275"+
    "\57\0\1\276\50\0\1\277\65\0\1\300\46\0\1\301"+
    "\46\0\1\302\44\0\1\303\61\0\1\304\56\0\1\305"+
    "\42\0\1\306\73\0\1\307\47\0\1\310\40\0\1\311"+
    "\43\0\1\312\61\0\1\313\43\0\1\314\53\0\1\315"+
    "\36\0\1\316\1\0\1\316\2\0\2\316\2\0\24\316"+
    "\2\0\1\316\11\0\3\142\1\0\2\142\1\0\3\142"+
    "\1\236\11\142\1\317\12\142\2\0\1\142\6\0\1\142"+
    "\2\0\3\142\1\0\2\142\1\0\3\142\1\236\2\142"+
    "\1\320\21\142\2\0\1\142\6\0\1\142\2\0\3\142"+
    "\1\0\2\142\1\0\1\321\2\142\1\236\24\142\2\0"+
    "\1\142\6\0\1\142\2\0\3\142\1\0\2\142\1\0"+
    "\3\142\1\236\13\142\1\322\10\142\2\0\1\142\6\0"+
    "\1\142\2\0\3\142\1\0\2\142\1\0\3\142\1\236"+
    "\5\142\1\323\16\142\2\0\1\142\6\0\1\142\2\0"+
    "\1\245\67\0\1\324\57\0\1\325\44\0\1\326\63\0"+
    "\1\327\43\0\1\330\51\0\1\331\67\0\1\332\45\0"+
    "\1\333\42\0\1\334\60\0\1\335\46\0\1\336\65\0"+
    "\1\337\35\0\1\340\63\0\1\341\52\0\1\342\41\0"+
    "\1\343\52\0\1\344\70\0\1\345\51\0\1\346\47\0"+
    "\1\347\40\0\1\350\63\0\1\351\50\0\1\352\50\0"+
    "\1\353\45\0\1\354\56\0\1\355\61\0\1\356\54\0"+
    "\1\357\43\0\1\360\44\0\1\361\52\0\1\362\51\0"+
    "\1\363\53\0\1\364\60\0\1\365\44\0\1\366\61\0"+
    "\1\367\43\0\1\370\67\0\1\371\46\0\1\372\24\0"+
    "\3\316\1\0\2\316\1\0\3\316\1\0\24\316\2\0"+
    "\1\316\6\0\1\316\2\0\3\142\1\0\2\142\1\0"+
    "\3\142\1\236\11\142\1\373\12\142\2\0\1\142\6\0"+
    "\1\142\2\0\3\142\1\0\2\142\1\0\3\142\1\236"+
    "\11\142\1\374\12\142\2\0\1\142\6\0\1\142\2\0"+
    "\3\142\1\0\2\142\1\0\3\142\1\236\15\142\1\375"+
    "\6\142\2\0\1\142\6\0\1\142\2\0\3\142\1\0"+
    "\2\142\1\0\3\142\1\236\5\142\1\376\16\142\2\0"+
    "\1\142\6\0\1\142\2\0\3\142\1\0\2\142\1\0"+
    "\3\142\1\236\2\142\1\377\21\142\2\0\1\142\6\0"+
    "\1\142\20\0\1\u0100\57\0\1\u0101\51\0\1\u0102\46\0"+
    "\1\u0103\54\0\1\u0104\50\0\1\u0105\62\0\1\u0106\44\0"+
    "\1\u0107\64\0\1\u0108\34\0\1\u0109\47\0\1\u010a\71\0"+
    "\1\u010b\40\0\1\u010c\61\0\1\u010d\50\0\1\u010e\61\0"+
    "\1\u010f\31\0\1\u0110\61\0\1\u0111\47\0\1\u0112\53\0"+
    "\1\u0113\52\0\1\u0114\67\0\1\u0115\34\0\1\u0116\60\0"+
    "\1\u0117\45\0\1\u0118\64\0\1\u0119\41\0\1\u011a\63\0"+
    "\1\u011b\52\0\1\u011c\54\0\1\u011d\36\0\1\u011e\56\0"+
    "\1\u011f\54\0\1\u0120\42\0\1\u0121\70\0\1\u0122\35\0"+
    "\1\u0123\67\0\1\u0124\35\0\1\u0125\64\0\1\u0126\23\0"+
    "\3\142\1\0\2\142\1\0\3\142\1\236\2\142\1\u0127"+
    "\21\142\2\0\1\142\6\0\1\142\21\0\1\u0128\51\0"+
    "\1\u0129\51\0\1\u012a\65\0\1\u012b\37\0\1\u012c\52\0"+
    "\1\u012d\62\0\1\u012e\53\0\1\u012f\53\0\1\u0130\45\0"+
    "\1\u0131\63\0\1\u0132\35\0\1\u0133\62\0\1\u0134\57\0"+
    "\1\u0135\54\0\1\u0136\44\0\1\u0137\37\0\1\u0138\61\0"+
    "\1\u0139\45\0\1\u013a\51\0\1\u013b\63\0\1\u013c\65\0"+
    "\1\u013d\44\0\1\u013e\47\0\1\u013f\50\0\1\u0140\41\0"+
    "\1\u0141\64\0\1\u0142\56\0\1\u0143\34\0\1\u0144\60\0"+
    "\1\u0145\51\0\1\u0146\57\0\1\u0147\56\0\1\u0148\46\0"+
    "\1\u0149\41\0\1\u014a\34\0\3\142\1\0\2\142\1\0"+
    "\3\142\1\236\20\142\1\u014b\3\142\2\0\1\142\6\0"+
    "\1\142\17\0\1\u014c\53\0\1\u014d\54\0\1\u014e\65\0"+
    "\1\u014f\52\0\1\u0150\42\0\1\u0151\57\0\1\u0152\45\0"+
    "\1\u0153\43\0\1\u0154\71\0\1\u0155\41\0\1\u0156\53\0"+
    "\1\u0157\45\0\1\u0158\52\0\1\u0159\65\0\1\u015a\53\0"+
    "\1\u015b\50\0\1\u015c\37\0\1\u015d\65\0\1\u015e\50\0"+
    "\1\u015f\51\0\1\u0160\57\0\1\u0161\43\0\1\u0162\52\0"+
    "\1\u0163\57\0\1\u0164\45\0\1\u0165\57\0\1\u0166\45\0"+
    "\1\u0167\60\0\1\u0168\21\0\3\142\1\0\2\142\1\0"+
    "\3\142\1\236\15\142\1\u0169\6\142\2\0\1\142\6\0"+
    "\1\142\17\0\1\u016a\71\0\1\u016b\37\0\1\u016c\55\0"+
    "\1\u016d\47\0\1\u016e\65\0\1\u016f\33\0\1\u0170\56\0"+
    "\1\u0171\57\0\1\u0172\43\0\1\u0173\50\0\1\u0174\52\0"+
    "\1\u0175\53\0\1\u0176\61\0\1\u0177\60\0\1\u0178\47\0"+
    "\1\u0179\43\0\1\u017a\53\0\1\u017b\51\0\1\u017c\52\0"+
    "\1\u017d\46\0\1\u017e\55\0\1\u017f\47\0\1\u0180\52\0"+
    "\1\u0181\65\0\1\u0182\37\0\1\u0183\46\0\1\u0184\57\0"+
    "\1\u0185\62\0\1\u0186\57\0\1\u0187\34\0\1\u0188\52\0"+
    "\1\u0189\52\0\1\u018a\67\0\1\u018b\46\0\1\u018c\56\0"+
    "\1\u018d\51\0\1\u018e\51\0\1\u018f\51\0\1\u0190\50\0"+
    "\1\u0191\54\0\1\u0192\40\0\1\u0193\60\0\1\u0194\62\0"+
    "\1\u0195\42\0\1\u0196\50\0\1\u0197\52\0\1\u0198\46\0"+
    "\1\u0199\52\0\1\u019a\67\0\1\u019b\16\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14749];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\45\0\1\11\3\1\1\11\5\1\1\11\5\1\1\11"+
    "\3\1\1\11\12\1\1\11\24\1\3\11\3\1\1\11"+
    "\10\1\1\11\1\1\2\11\2\1\5\0\3\11\2\0"+
    "\2\11\27\0\1\11\11\0\2\1\1\0\5\1\1\11"+
    "\1\1\50\0\6\1\47\0\5\1\30\0\1\11\1\0"+
    "\2\11\12\0\1\11\1\1\1\11\1\0\2\11\11\0"+
    "\1\11\16\0\2\11\5\0\1\1\1\11\1\0\2\11"+
    "\2\0\1\11\11\0\1\11\1\0\1\11\5\0\1\11"+
    "\1\0\1\11\2\0\1\1\1\0\1\11\3\0\2\11"+
    "\1\0\1\11\1\0\1\11\3\0\2\11\1\0\1\11"+
    "\2\0\3\11\2\0\1\11\3\0\4\11\4\0\1\11"+
    "\3\0\1\11\1\0\1\11\4\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[411];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */


  _XQueryLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _XQueryLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1818) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 20: 
          { popState(); return XQ_LOCAL_NAME;
          }
        case 78: break;
        case 37: 
          { yybegin(_EMPTY_BRACES); return KW_NODE;
          }
        case 79: break;
        case 65: 
          { yybegin(_SEP); return KW_PRESERVE;
          }
        case 80: break;
        case 15: 
          { pushState(_ATLIST_); yybegin(_URILITERAL); return OP_COMMA;
          }
        case 81: break;
        case 56: 
          { yybegin(_EMPTY_BRACES); return KW_COMMENT;
          }
        case 82: break;
        case 12: 
          { yybegin(STR_START_APOS); return XQ_STR_START;
          }
        case 83: break;
        case 3: 
          { return XQ_INTEGER_LITERAL;
          }
        case 84: break;
        case 72: 
          { pushState(_SEP); pushState(_ATLIST); yybegin(_URILITERAL); return KW_NAMESPACE;
          }
        case 85: break;
        case 28: 
          { return XQ_STR_ESCAPE_APOS;
          }
        case 86: break;
        case 17: 
          { yypushback(yylength()); yybegin(_QNAME);
          }
        case 87: break;
        case 60: 
          { pushState(_SEP); yybegin(_URILITERAL); return KW_BASE_URI;
          }
        case 88: break;
        case 8: 
          { popState(); return XQ_STR_END;
          }
        case 89: break;
        case 33: 
          { return XQ_DOUBLE_LITERAL;
          }
        case 90: break;
        case 32: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { yybegin(_QNAME_); return XQ_PREFIX_NAME;
          }
        case 91: break;
        case 26: 
          { pushState(); return XQ_COMMENT_START;
          }
        case 92: break;
        case 43: 
          { yybegin(_MODULE); return KW_MODULE;
          }
        case 93: break;
        case 68: 
          { pushState(_SEP); yybegin(NAMESPACEDECL); return KW_NAMESPACE;
          }
        case 94: break;
        case 67: 
          { pushState(_SEP); yybegin(NAMESPACEDECL); return KW_MODULE;
          }
        case 95: break;
        case 71: 
          { pushState(_SEP); pushState(_ATLIST); yybegin(NAMESPACEDECL); return KW_NAMESPACE;
          }
        case 96: break;
        case 59: 
          { pushState(_SEP); pushState(_DECLARE_VARIABLE); yybegin(_PARAM); return KW_VARIABLE;
          }
        case 97: break;
        case 46: 
          { yybegin(_IMPORT_MODULE); return KW_MODULE;
          }
        case 98: break;
        case 58: 
          { yybegin(DECLAREORDERING); return KW_ORDERING;
          }
        case 99: break;
        case 11: 
          { yybegin(STR_START_QUOTE); return XQ_STR_START;
          }
        case 100: break;
        case 24: 
          { pushState(); yybegin(EXPR_COMMENT); return XQ_COMMENT_START;
          }
        case 101: break;
        case 45: 
          { pushState(_SEP); pushState(_STRINGLITERAL); yybegin(_QNAME); return KW_OPTION;
          }
        case 102: break;
        case 21: 
          { popState(); return BAD_CHARACTER;
          }
        case 103: break;
        case 16: 
          { pushState(_AS); yybegin(_QNAME); return OP_VARSTART;
          }
        case 104: break;
        case 66: 
          { yybegin(_SEP); return KW_UNORDERED;
          }
        case 105: break;
        case 61: 
          { yybegin(_DECLARE_COPYNS_); return KW_PRESERVE;
          }
        case 106: break;
        case 53: 
          { yybegin(_DECLARE_DEFAULT_NAMESPACE); return KW_ELEMENT;
          }
        case 107: break;
        case 48: 
          { yybegin(_DECLARE); return KW_DECLARE;
          }
        case 108: break;
        case 47: 
          { yybegin(_IMPORT_SCHEMA); return KW_SCHEMA;
          }
        case 109: break;
        case 38: 
          { yybegin(_DECLARE_DEFAULT_ORDER); return KW_ORDER;
          }
        case 110: break;
        case 31: 
          { yybegin(_AS_); return KW_AS;
          }
        case 111: break;
        case 77: 
          { yybegin(_DECLARE_COPYNS); return KW_COPY_NAMESPACES;
          }
        case 112: break;
        case 62: 
          { yybegin(_DECLARE_DEFAULT_NAMESPACE); return KW_FUNCTION;
          }
        case 113: break;
        case 64: 
          { popState(); return KW_EXTERNAL;
          }
        case 114: break;
        case 57: 
          { pushState(_SEP); yybegin(_STRINGLITERAL); return KW_ENCODING;
          }
        case 115: break;
        case 51: 
          { yybegin(_DECLARE_DEFAULT); return KW_DEFAULT;
          }
        case 116: break;
        case 44: 
          { yybegin(_IMPORT); return KW_IMPORT;
          }
        case 117: break;
        case 14: 
          { yypushback(yylength()); popState();
          }
        case 118: break;
        case 69: 
          { pushState(_SEP); yybegin(_URILITERAL); return KW_COLLATION;
          }
        case 119: break;
        case 36: 
          { yybegin(_EMPTY_BRACES); return KW_VOID;
          }
        case 120: break;
        case 63: 
          { yybegin(_SEP); return KW_GREATEST;
          }
        case 121: break;
        case 35: 
          { yybegin(_EMPTY_BRACES); return KW_TEXT;
          }
        case 122: break;
        case 7: 
          { return XQ_STR_CHAR;
          }
        case 123: break;
        case 27: 
          { return XQ_STR_ESCAPE_QUOTE;
          }
        case 124: break;
        case 54: 
          { yybegin(_IMPORT_SCHEMA_DEFAULT); return KW_DEFAULT;
          }
        case 125: break;
        case 13: 
          { yybegin(_URILITERAL); return OP_EQUALS;
          }
        case 126: break;
        case 23: 
          { return XQ_DECIMAL_LITERAL;
          }
        case 127: break;
        case 52: 
          { yybegin(_SEP); return KW_INHERIT;
          }
        case 128: break;
        case 19: 
          { popState(); return OP_RBRACE;
          }
        case 129: break;
        case 42: 
          { yybegin(_XQUERY); return KW_XQUERY;
          }
        case 130: break;
        case 55: 
          { yybegin(_IMPORT_SCHEMA_DEFAULT_ELEMENT); return KW_ELEMENT;
          }
        case 131: break;
        case 29: 
          { popState(); return OP_ASSIGN;
          }
        case 132: break;
        case 70: 
          { pushState(_SEP); yybegin(_URILITERAL); return KW_NAMESPACE;
          }
        case 133: break;
        case 41: 
          { yybegin(_SEP); return KW_STRIP;
          }
        case 134: break;
        case 9: 
          { yybegin(YYINITIAL); return OP_SEPERATOR;
          }
        case 135: break;
        case 50: 
          { pushState(_XQUERY_VERSION); yybegin(_STRINGLITERAL); return KW_VERSION;
          }
        case 136: break;
        case 73: 
          { yybegin(_SEP); return KW_NO_INHERIT;
          }
        case 137: break;
        case 1: 
          { yybegin(YYINITIAL); return BAD_CHARACTER;
          }
        case 138: break;
        case 49: 
          { yybegin(_SEP); return KW_ORDERED;
          }
        case 139: break;
        case 34: 
          { yybegin(_EMPTY_BRACES); return KW_ITEM;
          }
        case 140: break;
        case 2: 
          { return WHITE_SPACE;
          }
        case 141: break;
        case 30: 
          { pushState(_ATLIST_); yybegin(_URILITERAL); return KW_AT;
          }
        case 142: break;
        case 6: 
          { yybegin(_NAMESPACEDECL_); return XQ_LOCAL_NAME;
          }
        case 143: break;
        case 74: 
          { yybegin(_DECLARE_COPYNS_); return KW_NO_PRESERVE;
          }
        case 144: break;
        case 39: 
          { yybegin(_DECLARE_DEFAULT_ORDER_EMPTY); return KW_EMPTY;
          }
        case 145: break;
        case 4: 
          { return BAD_WORD;
          }
        case 146: break;
        case 18: 
          { yybegin(_EMPTY_BRACES_); return OP_LBRACE;
          }
        case 147: break;
        case 76: 
          { yybegin(_PRESERVE_OR_STRIP); return KW_BOUNDARY_SPACE;
          }
        case 148: break;
        case 75: 
          { yybegin(_PRESERVE_OR_STRIP); return KW_CONSTRUCTION;
          }
        case 149: break;
        case 22: 
          { yybegin(_QNAME_LOCAL); return OP_COLON;
          }
        case 150: break;
        case 25: 
          { popState(); return XQ_COMMENT_END;
          }
        case 151: break;
        case 5: 
          { return XQ_COMMENT_CHAR;
          }
        case 152: break;
        case 40: 
          { yybegin(_SEP); return KW_LEAST;
          }
        case 153: break;
        case 10: 
          { yybegin(_DECLARE_COPYNS__); return OP_COMMA;
          }
        case 154: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
