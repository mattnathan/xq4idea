/* The following code was generated by JFlex 1.4.3 on 09/04/11 19:52 */

package org.mn.plug.idea.xq4idea.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

// this lexer follows the principles set out in http://www.w3.org/TR/xquery-xpath-parsing/
/**
 * Generated lexer
 */
@SuppressWarnings({"UnusedDeclaration", "UnusedAssignment", "FieldCanBeLocal", "AccessStaticViaInstance", "JavaDoc", "ConstantConditions"})

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 09/04/11 19:52 from the specification file
 * <tt>C:/Users/Matt/IdeaProjects/ideaPlugins/xq4idea/source/xq4idea/src/org/mn/plug/idea/xq4idea/lang/lexer/_XQueryLexer.flex</tt>
 */
class _XQueryLexer extends AbstractLexer implements FlexLexer, XQueryTokenTypes {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int _SEP = 90;
  public static final int _CLOSE_BRACE = 88;
  public static final int _DECLARE = 18;
  public static final int _OPEN_BRACE = 86;
  public static final int _DECLARE_DEFAULT_ORDER_EMPTY = 30;
  public static final int _ATLIST_ = 56;
  public static final int _AS_ATTR = 70;
  public static final int _AS_AorE__ = 78;
  public static final int _DECLARE_DEFAULT = 26;
  public static final int _PRESERVE_OR_STRIP = 46;
  public static final int _EMPTY_BRACES = 82;
  public static final int STR_START_QUOTE = 8;
  public static final int _STRINGLITERAL = 50;
  public static final int DECLAREORDERING = 4;
  public static final int _IMPORT_SCHEMA_DEFAULT_ELEMENT = 42;
  public static final int _AS_SELEM = 80;
  public static final int _IMPORT_SCHEMA = 38;
  public static final int _IMPORT_SCHEMA_DEFAULT = 40;
  public static final int _PARAM = 58;
  public static final int _AS_DN = 66;
  public static final int _AS_AorE = 74;
  public static final int YYINITIAL = 0;
  public static final int _AS_OCC = 64;
  public static final int NAMESPACEDECL = 6;
  public static final int _AS_ = 62;
  public static final int _AS_PI = 68;
  public static final int _DECLARE_DEFAULT_ORDER = 28;
  public static final int _URILITERAL = 48;
  public static final int _QNAME = 94;
  public static final int _NAMESPACEDECL_ = 52;
  public static final int STR_START_APOS = 10;
  public static final int _QNAME_LOCAL = 98;
  public static final int _DECLARE_COPYNS = 20;
  public static final int _ATLIST = 54;
  public static final int _DECLARE_DEFAULT_NAMESPACE = 32;
  public static final int _XQUERY = 12;
  public static final int _IMPORT_MODULE = 44;
  public static final int EXPR_COMMENT = 2;
  public static final int _AS_SATTR = 72;
  public static final int _XQUERY_VERSION = 14;
  public static final int _NCNAME = 92;
  public static final int _DECLARE_COPYNS_ = 22;
  public static final int _AS_AorE_ = 76;
  public static final int _IMPORT = 36;
  public static final int _MODULE = 16;
  public static final int _AS = 60;
  public static final int _QNAME_ = 96;
  public static final int _DECLARE_VARIABLE = 34;
  public static final int _EMPTY_BRACES_ = 84;
  public static final int _DECLARE_COPYNS__ = 24;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 
    24, 24, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 30, 
    31, 31, 32, 32, 33, 33, 34, 34, 34, 34, 35, 35, 36, 36, 37, 37, 
    34, 34, 38, 38, 39, 39, 40, 40, 39, 39, 41, 41, 42, 42, 43, 43, 
    44, 44, 45, 45
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\2\1\2\0\1\1\22\0\1\1\1\0\1\47\1\0\1\44"+
    "\1\0\1\0\1\50\1\52\1\51\1\46\1\5\1\42\1\13\1\3"+
    "\1\0\12\2\1\14\1\10\1\0\1\41\1\0\1\45\1\0\4\12"+
    "\1\4\1\12\24\12\4\0\1\6\1\0\1\25\1\37\1\23\1\22"+
    "\1\17\1\40\1\36\1\43\1\30\2\12\1\24\1\26\1\35\1\27"+
    "\1\31\1\15\1\20\1\34\1\32\1\16\1\33\1\12\1\11\1\21"+
    "\1\12\57\0\1\53\12\0\1\53\1\0\1\7\2\0\1\53\5\0"+
    "\27\12\1\0\37\12\1\0\72\12\2\53\13\12\2\53\10\12\1\53"+
    "\65\12\1\53\104\12\11\53\44\12\3\53\2\12\4\53\36\12\37\53"+
    "\31\0\131\12\22\53\7\12\4\0\12\53\2\54\16\0\5\53\11\0"+
    "\1\53\21\0\106\7\32\0\2\7\30\0\1\53\13\0\1\12\1\7"+
    "\3\12\1\0\1\12\1\0\24\12\1\0\54\12\1\0\7\12\3\53"+
    "\1\12\1\53\1\12\1\53\1\12\1\53\1\12\1\53\22\12\2\53"+
    "\1\0\5\53\4\0\1\53\14\12\1\53\102\12\1\53\14\12\1\53"+
    "\44\12\1\0\4\7\3\0\6\53\65\12\2\53\2\12\2\53\2\12"+
    "\2\53\1\0\34\12\2\53\10\12\2\0\2\12\6\0\20\53\41\0"+
    "\46\12\2\0\1\12\7\0\46\12\1\53\11\0\21\7\1\0\27\7"+
    "\1\0\3\7\1\0\1\7\1\0\2\7\1\0\1\7\13\0\33\12"+
    "\5\0\3\12\56\0\32\12\5\0\1\54\12\12\10\7\15\0\12\7"+
    "\4\0\2\53\1\7\107\12\2\53\5\12\1\53\17\12\1\53\4\12"+
    "\1\0\1\12\17\7\2\12\2\7\1\0\4\7\2\53\12\7\3\53"+
    "\2\0\1\53\20\0\1\53\1\0\36\53\35\0\3\53\60\0\46\53"+
    "\13\0\1\53\u014f\0\3\7\1\53\65\12\2\0\1\7\1\12\20\7"+
    "\2\0\1\53\4\7\3\0\12\12\2\7\2\0\12\7\21\0\3\7"+
    "\1\0\10\12\2\0\2\12\2\0\26\12\1\0\7\12\1\0\1\12"+
    "\3\0\4\12\2\0\1\7\1\53\7\7\2\0\2\7\2\0\3\7"+
    "\11\0\1\7\4\0\2\12\1\0\3\12\2\7\2\0\12\7\2\12"+
    "\20\0\1\7\2\0\6\12\4\0\2\12\2\0\26\12\1\0\7\12"+
    "\1\0\2\12\1\0\2\12\1\0\2\12\2\0\1\7\1\0\5\7"+
    "\4\0\2\7\2\0\3\7\13\0\4\12\1\0\1\12\7\0\12\7"+
    "\2\7\3\12\14\0\3\7\1\0\7\12\1\53\1\12\1\0\3\12"+
    "\1\0\26\12\1\0\7\12\1\0\2\12\1\0\5\12\2\0\1\7"+
    "\1\12\10\7\1\0\3\7\1\0\3\7\2\0\1\53\17\0\1\12"+
    "\1\53\4\0\12\7\21\0\3\7\1\0\10\12\2\0\2\12\2\0"+
    "\26\12\1\0\7\12\1\0\2\12\1\0\1\53\4\12\2\0\1\7"+
    "\1\12\6\7\3\0\2\7\2\0\3\7\10\0\2\7\4\0\2\12"+
    "\1\0\3\12\4\0\12\7\1\0\1\53\20\0\1\7\1\54\1\0"+
    "\6\12\3\0\3\12\1\0\4\12\3\0\2\12\1\0\1\12\1\0"+
    "\2\12\3\0\2\12\3\0\3\12\3\0\10\12\1\0\3\12\4\0"+
    "\5\7\3\0\3\7\1\0\4\7\11\0\1\7\17\0\11\7\21\0"+
    "\3\7\1\0\10\12\1\0\3\12\1\0\27\12\1\0\12\12\1\0"+
    "\5\12\4\0\7\7\1\0\3\7\1\0\4\7\7\0\2\7\11\0"+
    "\2\12\4\0\12\7\22\0\2\7\1\0\10\12\1\0\3\12\1\0"+
    "\27\12\1\0\12\12\1\0\5\12\3\0\1\53\7\7\1\0\3\7"+
    "\1\0\4\7\7\0\2\7\7\0\1\12\1\0\2\12\4\0\12\7"+
    "\22\0\2\7\1\0\10\12\1\0\3\12\1\0\27\12\1\0\20\12"+
    "\4\0\6\7\2\0\3\7\1\0\4\7\11\0\1\7\10\0\2\12"+
    "\4\0\12\7\25\0\22\53\3\0\30\53\1\0\11\53\1\0\1\53"+
    "\2\0\7\53\72\0\56\12\1\53\1\12\1\7\2\12\7\7\5\0"+
    "\6\12\1\54\10\7\1\0\12\7\47\0\2\12\1\0\1\12\2\0"+
    "\2\12\1\0\1\12\2\0\1\12\6\0\4\12\1\0\7\12\1\0"+
    "\3\12\1\0\1\12\1\0\1\12\2\0\2\12\1\0\2\12\1\53"+
    "\1\12\1\7\2\12\6\7\1\0\2\7\1\12\2\0\5\12\1\0"+
    "\1\54\1\0\6\7\2\0\12\7\2\0\2\53\42\0\1\53\27\0"+
    "\2\7\6\0\12\7\13\0\1\7\1\0\1\7\1\0\1\7\4\0"+
    "\2\7\10\12\1\0\41\12\1\53\6\0\24\7\1\0\2\7\4\54"+
    "\4\0\6\7\1\0\1\7\1\0\25\7\3\0\7\7\1\0\1\7"+
    "\106\0\42\53\1\0\5\53\1\0\2\53\45\0\6\53\112\0\46\12"+
    "\12\0\47\12\2\53\7\0\1\12\1\53\2\12\1\53\3\12\1\53"+
    "\1\12\1\53\2\12\1\53\5\12\51\53\1\12\1\53\1\12\1\53"+
    "\1\12\13\53\1\12\1\53\1\12\1\53\1\12\3\53\2\12\3\53"+
    "\1\12\5\0\3\12\1\53\1\12\1\53\1\12\1\53\1\12\1\53"+
    "\1\12\3\53\2\12\3\53\2\12\1\53\1\12\50\53\1\12\4\53"+
    "\5\0\1\12\2\53\1\12\2\53\2\12\7\53\2\12\1\53\1\12"+
    "\1\53\7\12\50\53\1\12\4\53\1\12\10\53\1\12\6\0\7\53"+
    "\1\0\77\53\1\0\1\53\1\0\4\53\2\0\7\53\1\0\1\53"+
    "\1\0\4\53\2\0\47\53\1\0\1\53\1\0\4\53\2\0\37\53"+
    "\1\0\1\53\1\0\4\53\2\0\7\53\1\0\1\53\1\0\4\53"+
    "\2\0\7\53\1\0\7\53\1\0\27\53\1\0\37\53\1\0\1\53"+
    "\1\0\4\53\2\0\7\53\1\0\47\53\1\0\23\53\105\0\125\53"+
    "\14\0\u026c\53\2\0\10\53\12\0\32\53\5\0\113\53\25\0\15\53"+
    "\1\0\4\53\16\0\22\53\16\0\22\53\16\0\15\53\1\0\3\53"+
    "\17\0\64\53\43\0\1\53\4\0\1\53\103\0\130\53\10\0\51\53"+
    "\127\0\35\53\63\0\36\53\2\0\5\53\u038b\0\154\53\224\0\234\12"+
    "\4\0\132\12\6\0\26\12\2\0\6\12\2\0\46\12\2\0\6\12"+
    "\2\0\10\12\1\0\1\12\1\0\1\12\1\0\1\12\1\0\37\12"+
    "\2\0\65\12\1\0\7\12\1\0\1\12\3\0\3\12\1\0\7\12"+
    "\3\0\4\12\2\0\6\12\4\0\15\12\5\0\3\12\1\0\7\12"+
    "\164\0\1\53\15\0\1\53\120\0\15\7\4\0\1\7\40\0\1\53"+
    "\4\0\1\53\2\0\12\53\1\0\1\53\3\0\5\53\6\0\1\53"+
    "\1\0\1\12\1\0\1\53\1\0\2\12\2\53\1\6\3\53\1\0"+
    "\7\53\3\0\3\53\5\0\5\53\66\0\3\6\u0e82\0\1\54\1\53"+
    "\1\6\31\0\11\6\6\7\1\0\5\54\5\0\2\53\4\0\124\12"+
    "\2\53\2\0\2\7\2\0\2\54\1\53\1\0\132\12\1\0\3\54"+
    "\1\53\5\0\50\12\4\0\136\53\21\0\30\53\70\0\20\53\u0200\0"+
    "\u19b6\53\112\0\u51a6\12\132\0\u048d\53\u0773\0\u2ba4\12\134\0\u0800\0\u1900\0"+
    "\u012e\53\2\0\73\53\225\0\7\53\14\0\5\53\5\0\1\53\1\0"+
    "\12\53\1\0\15\53\1\0\5\53\1\0\1\53\1\0\2\53\1\0"+
    "\2\53\1\0\154\53\41\0\u016b\53\22\0\100\53\2\0\66\53\50\0"+
    "\14\53\164\0\5\53\1\0\207\53\44\0\32\53\6\0\32\53\13\0"+
    "\131\53\3\0\6\53\2\0\6\53\2\0\6\53\2\0\3\53\41\0"+
    "\2\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\56\0\1\1\1\2\1\3\1\1\5\4\1\1\3\5"+
    "\2\4\1\6\1\7\2\10\1\4\1\11\12\4\1\12"+
    "\12\4\1\1\11\4\1\13\1\14\1\15\2\16\1\17"+
    "\1\20\1\16\13\21\1\22\1\23\1\24\1\25\1\22"+
    "\2\4\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\41"+
    "\1\44\5\0\1\45\1\46\1\47\2\0\1\50\1\51"+
    "\27\0\1\52\11\0\1\53\1\54\1\0\12\21\3\0"+
    "\1\55\1\56\50\0\13\21\2\0\1\31\47\0\4\21"+
    "\1\57\1\21\1\60\1\61\1\21\1\62\32\0\1\63"+
    "\1\0\1\64\1\65\12\0\1\66\6\21\2\0\1\67"+
    "\1\0\1\70\1\71\11\0\1\72\16\0\1\73\1\74"+
    "\5\0\6\21\2\0\1\75\1\0\1\76\1\77\2\0"+
    "\1\100\11\0\1\101\1\0\1\102\5\0\1\103\1\0"+
    "\1\104\2\0\1\105\1\21\1\106\3\21\1\107\2\0"+
    "\1\110\3\0\1\111\1\112\1\0\1\113\1\0\1\114"+
    "\3\0\1\115\1\116\1\0\1\117\2\0\1\120\5\21"+
    "\1\0\1\121\1\122\2\0\1\123\3\0\1\124\1\125"+
    "\1\126\1\127\1\21\1\130\3\21\5\0\1\131\4\21"+
    "\4\0\1\132\4\21\2\0\1\133\1\0\4\21\3\0"+
    "\1\134\3\21\2\0\1\135\1\21\1\136\1\21\1\137"+
    "\1\140\3\21\1\141\5\21\1\142";

  private static int [] zzUnpackAction() {
    int [] result = new int[531];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\132\0\207\0\264\0\341\0\u010e\0\u013b"+
    "\0\u0168\0\u0195\0\u01c2\0\u01ef\0\u021c\0\u0249\0\u0276\0\u02a3"+
    "\0\u02d0\0\u02fd\0\u032a\0\u0357\0\u0384\0\u03b1\0\u03de\0\u040b"+
    "\0\u0438\0\u0465\0\u0492\0\u04bf\0\u04ec\0\u0519\0\u0546\0\u0573"+
    "\0\u05a0\0\u05cd\0\u05fa\0\u0627\0\u0654\0\u0681\0\u06ae\0\u06db"+
    "\0\u0708\0\u0735\0\u0762\0\u078f\0\u07bc\0\u07e9\0\u0816\0\u0843"+
    "\0\u0870\0\u089d\0\u0816\0\u08ca\0\u08f7\0\u0924\0\u0951\0\u097e"+
    "\0\u0816\0\u09ab\0\u09d8\0\u0a05\0\u0a32\0\u0a5f\0\u0816\0\u0a8c"+
    "\0\u0ab9\0\u0ae6\0\u0816\0\u0b13\0\u0b40\0\u0b6d\0\u0b9a\0\u0bc7"+
    "\0\u0bf4\0\u0c21\0\u0c4e\0\u0c7b\0\u0ca8\0\u0816\0\u0cd5\0\u0d02"+
    "\0\u0d2f\0\u0d5c\0\u0d89\0\u0db6\0\u0de3\0\u0e10\0\u0e3d\0\u0e6a"+
    "\0\u0e97\0\u0ec4\0\u0ef1\0\u0f1e\0\u0f4b\0\u0f78\0\u0fa5\0\u0fd2"+
    "\0\u0fff\0\u102c\0\u0816\0\u0816\0\u0816\0\u1059\0\u1086\0\u1059"+
    "\0\u0816\0\u10b3\0\u10e0\0\u110d\0\u113a\0\u1167\0\u1194\0\u11c1"+
    "\0\u11ee\0\u121b\0\u1248\0\u1275\0\u12a2\0\u0816\0\u0816\0\u0816"+
    "\0\u0816\0\u097e\0\u12cf\0\u12fc\0\u0816\0\u1329\0\u0816\0\u1356"+
    "\0\u0816\0\u0816\0\u0816\0\u097e\0\u0816\0\u097e\0\u1383\0\u13b0"+
    "\0\u0816\0\u0816\0\u13dd\0\u140a\0\u1437\0\u1464\0\u1491\0\u14be"+
    "\0\u14eb\0\u0816\0\u0816\0\u0816\0\u1518\0\u1545\0\u0816\0\u0816"+
    "\0\u1572\0\u159f\0\u15cc\0\u15f9\0\u1626\0\u1653\0\u1680\0\u16ad"+
    "\0\u16da\0\u1707\0\u1734\0\u1761\0\u178e\0\u17bb\0\u17e8\0\u1815"+
    "\0\u1842\0\u186f\0\u189c\0\u18c9\0\u18f6\0\u1923\0\u1950\0\u0816"+
    "\0\u197d\0\u19aa\0\u19d7\0\u1a04\0\u1a31\0\u1a5e\0\u1a8b\0\u1ab8"+
    "\0\u1ae5\0\u1059\0\u1059\0\u1b12\0\u1b3f\0\u1b6c\0\u1b99\0\u1bc6"+
    "\0\u1bf3\0\u1c20\0\u1c4d\0\u1c7a\0\u1ca7\0\u1cd4\0\u1d01\0\u1d2e"+
    "\0\u1d5b\0\u0816\0\u1d88\0\u1d88\0\u1db5\0\u1de2\0\u1e0f\0\u1e3c"+
    "\0\u1e69\0\u1e96\0\u1ec3\0\u1ef0\0\u1f1d\0\u1f4a\0\u1f77\0\u1fa4"+
    "\0\u1fd1\0\u1ffe\0\u202b\0\u2058\0\u2085\0\u20b2\0\u20df\0\u210c"+
    "\0\u2139\0\u2166\0\u2193\0\u21c0\0\u21ed\0\u221a\0\u2247\0\u2274"+
    "\0\u22a1\0\u22ce\0\u22fb\0\u2328\0\u2355\0\u2382\0\u23af\0\u23dc"+
    "\0\u2409\0\u2436\0\u2463\0\u2490\0\u24bd\0\u24ea\0\u2517\0\u2544"+
    "\0\u2571\0\u259e\0\u25cb\0\u25f8\0\u2625\0\u2652\0\u267f\0\u26ac"+
    "\0\u26d9\0\u2706\0\u2733\0\u2760\0\u278d\0\u27ba\0\u27e7\0\u2814"+
    "\0\u2841\0\u286e\0\u289b\0\u28c8\0\u28f5\0\u2922\0\u294f\0\u297c"+
    "\0\u29a9\0\u29d6\0\u2a03\0\u2a30\0\u2a5d\0\u2a8a\0\u2ab7\0\u2ae4"+
    "\0\u2b11\0\u2b3e\0\u2b6b\0\u2b98\0\u2bc5\0\u2bf2\0\u2c1f\0\u2c4c"+
    "\0\u2c79\0\u2ca6\0\u2cd3\0\u2d00\0\u2d2d\0\u2d5a\0\u2d87\0\u2db4"+
    "\0\u2de1\0\u2e0e\0\u2e3b\0\u2e68\0\u10e0\0\u2e95\0\u10e0\0\u10e0"+
    "\0\u2ec2\0\u10e0\0\u2eef\0\u2f1c\0\u2f49\0\u2f76\0\u2fa3\0\u2fd0"+
    "\0\u2ffd\0\u302a\0\u3057\0\u3084\0\u30b1\0\u30de\0\u310b\0\u3138"+
    "\0\u3165\0\u3192\0\u31bf\0\u31ec\0\u3219\0\u3246\0\u3273\0\u32a0"+
    "\0\u32cd\0\u32fa\0\u3327\0\u3354\0\u0816\0\u3381\0\u0816\0\u0816"+
    "\0\u33ae\0\u33db\0\u3408\0\u3435\0\u3462\0\u348f\0\u34bc\0\u34e9"+
    "\0\u3516\0\u3543\0\u0816\0\u3570\0\u359d\0\u35ca\0\u35f7\0\u3624"+
    "\0\u3651\0\u367e\0\u36ab\0\u0816\0\u36d8\0\u0816\0\u0816\0\u3705"+
    "\0\u3732\0\u375f\0\u378c\0\u37b9\0\u37e6\0\u3813\0\u3840\0\u386d"+
    "\0\u0816\0\u389a\0\u38c7\0\u38f4\0\u3921\0\u394e\0\u397b\0\u39a8"+
    "\0\u39d5\0\u3a02\0\u3a2f\0\u3a5c\0\u3a89\0\u3ab6\0\u3ae3\0\u0816"+
    "\0\u0816\0\u3b10\0\u3b3d\0\u3b6a\0\u3b97\0\u3bc4\0\u3bf1\0\u3c1e"+
    "\0\u3c4b\0\u3c78\0\u3ca5\0\u3cd2\0\u3cff\0\u3d2c\0\u0816\0\u3d59"+
    "\0\u0816\0\u0816\0\u3d86\0\u3db3\0\u0816\0\u3de0\0\u3e0d\0\u3e3a"+
    "\0\u3e67\0\u3e94\0\u3ec1\0\u3eee\0\u3f1b\0\u3f48\0\u0816\0\u3f75"+
    "\0\u0816\0\u3fa2\0\u3fcf\0\u3ffc\0\u4029\0\u4056\0\u0816\0\u4083"+
    "\0\u0816\0\u40b0\0\u40dd\0\u10e0\0\u410a\0\u10e0\0\u4137\0\u4164"+
    "\0\u4191\0\u0816\0\u41be\0\u41eb\0\u0816\0\u4218\0\u4245\0\u4272"+
    "\0\u0816\0\u0816\0\u429f\0\u0816\0\u42cc\0\u0816\0\u42f9\0\u4326"+
    "\0\u4353\0\u0816\0\u0816\0\u4380\0\u0816\0\u43ad\0\u43da\0\u0816"+
    "\0\u4407\0\u4434\0\u4461\0\u448e\0\u44bb\0\u44e8\0\u0816\0\u0816"+
    "\0\u4515\0\u4542\0\u0816\0\u456f\0\u459c\0\u45c9\0\u0816\0\u0816"+
    "\0\u0816\0\u0816\0\u45f6\0\u10e0\0\u4623\0\u4650\0\u467d\0\u46aa"+
    "\0\u46d7\0\u4704\0\u4731\0\u475e\0\u0816\0\u478b\0\u47b8\0\u47e5"+
    "\0\u4812\0\u483f\0\u486c\0\u4899\0\u48c6\0\u0816\0\u48f3\0\u4920"+
    "\0\u494d\0\u497a\0\u49a7\0\u49d4\0\u0816\0\u4a01\0\u4a2e\0\u4a5b"+
    "\0\u4a88\0\u4ab5\0\u4ae2\0\u4b0f\0\u4b3c\0\u10e0\0\u4b69\0\u4b96"+
    "\0\u4bc3\0\u4bf0\0\u4c1d\0\u0816\0\u4c4a\0\u10e0\0\u4c77\0\u0816"+
    "\0\u0816\0\u4ca4\0\u4cd1\0\u4cfe\0\u10e0\0\u4d2b\0\u4d58\0\u4d85"+
    "\0\u4db2\0\u4ddf\0\u10e0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[531];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\57\1\60\1\61\1\62\1\63\4\57\1\64\1\63"+
    "\2\57\5\63\1\65\3\63\1\66\1\63\1\67\10\63"+
    "\2\57\1\63\6\57\1\70\2\63\14\71\1\72\35\71"+
    "\1\73\2\71\1\57\1\60\2\57\1\63\4\57\2\63"+
    "\2\57\1\63\1\74\10\63\1\75\11\63\2\57\1\63"+
    "\6\57\1\70\2\63\1\57\1\60\2\57\1\76\1\57"+
    "\1\76\2\57\2\76\2\57\24\76\2\57\1\76\6\57"+
    "\1\70\2\63\47\77\1\100\55\77\1\101\4\77\1\57"+
    "\1\60\2\57\1\63\4\57\2\63\2\57\16\63\1\102"+
    "\5\63\2\57\1\63\6\57\1\70\2\63\1\57\1\60"+
    "\2\57\1\63\3\57\1\103\2\63\2\57\2\63\1\104"+
    "\21\63\2\57\1\63\6\57\1\70\2\63\1\57\1\60"+
    "\2\57\1\63\4\57\2\63\2\57\20\63\1\105\3\63"+
    "\2\57\1\63\6\57\1\70\2\63\1\57\1\60\2\57"+
    "\1\63\4\57\2\63\2\57\5\63\1\106\1\107\3\63"+
    "\1\110\3\63\1\111\1\63\1\112\1\63\1\113\1\63"+
    "\2\57\1\63\6\57\1\70\2\63\1\57\1\60\2\57"+
    "\1\63\4\57\2\63\2\57\14\63\1\114\3\63\1\115"+
    "\3\63\2\57\1\63\6\57\1\70\2\63\1\57\1\60"+
    "\2\57\1\63\4\57\2\63\2\57\24\63\1\57\1\116"+
    "\1\63\6\57\1\70\2\63\1\57\1\60\2\57\1\63"+
    "\4\57\2\63\2\57\13\63\1\117\4\63\1\120\3\63"+
    "\2\57\1\63\6\57\1\70\2\63\1\57\1\60\2\57"+
    "\1\63\4\57\2\63\2\57\2\63\1\121\3\63\1\122"+
    "\3\63\1\123\10\63\1\124\2\57\1\63\6\57\1\70"+
    "\2\63\1\57\1\60\2\57\1\63\4\57\2\63\2\57"+
    "\2\63\1\125\21\63\2\57\1\63\6\57\1\70\2\63"+
    "\1\57\1\60\2\57\1\63\4\57\2\63\2\57\7\63"+
    "\1\126\11\63\1\127\2\63\2\57\1\63\6\57\1\70"+
    "\2\63\1\57\1\60\2\57\1\63\4\57\2\63\2\57"+
    "\20\63\1\130\3\63\2\57\1\63\6\57\1\70\2\63"+
    "\1\57\1\60\2\57\1\63\4\57\2\63\1\57\1\131"+
    "\2\63\1\132\21\63\2\57\1\63\6\57\1\70\2\63"+
    "\1\57\1\60\2\57\1\63\4\57\2\63\2\57\11\63"+
    "\1\133\5\63\1\134\4\63\2\57\1\63\6\57\1\70"+
    "\2\63\1\57\1\60\2\57\1\63\4\57\2\63\2\57"+
    "\5\63\1\135\12\63\1\136\3\63\2\57\1\63\6\57"+
    "\1\70\2\63\1\57\1\60\2\57\1\63\4\57\2\63"+
    "\2\57\2\63\1\137\21\63\2\57\1\63\6\57\1\70"+
    "\2\63\1\57\1\60\2\57\1\63\4\57\2\63\2\57"+
    "\20\63\1\140\3\63\2\57\1\63\6\57\1\70\2\63"+
    "\1\57\1\60\2\57\1\63\4\57\2\63\2\57\20\63"+
    "\1\136\3\63\2\57\1\63\6\57\1\70\2\63\1\57"+
    "\1\60\2\57\1\63\4\57\2\63\2\57\14\63\1\141"+
    "\2\63\1\142\4\63\2\57\1\63\6\57\1\70\2\63"+
    "\1\57\1\60\2\57\1\63\4\57\2\63\2\57\24\63"+
    "\2\57\1\63\3\57\1\143\1\144\1\57\1\70\2\63"+
    "\1\57\1\60\2\57\1\63\4\57\2\63\2\57\24\63"+
    "\1\145\1\57\1\63\6\57\1\70\2\63\1\146\1\60"+
    "\23\146\1\147\30\146\1\60\40\146\1\150\12\146\1\57"+
    "\1\60\2\57\1\63\4\57\2\63\2\57\24\63\2\57"+
    "\1\63\1\151\5\57\1\70\2\63\1\146\1\60\23\146"+
    "\1\152\27\146\1\57\1\60\2\57\1\153\1\57\1\153"+
    "\2\57\2\153\2\57\2\153\1\154\2\153\1\155\1\156"+
    "\1\153\1\157\2\153\1\160\1\161\1\162\1\163\1\164"+
    "\1\165\3\153\2\57\1\153\6\57\1\70\2\63\1\166"+
    "\1\60\3\166\1\167\37\166\1\170\1\171\3\166\1\172"+
    "\2\166\1\57\1\60\2\57\1\63\4\57\2\63\2\57"+
    "\2\63\1\173\14\63\1\174\4\63\2\57\1\63\5\57"+
    "\1\175\1\70\2\63\1\57\1\60\2\57\1\176\1\57"+
    "\1\176\2\57\2\176\2\57\24\176\2\57\1\176\3\57"+
    "\2\177\1\175\1\70\2\63\1\57\1\60\2\57\1\63"+
    "\4\57\2\63\2\57\24\63\2\57\1\63\6\57\1\70"+
    "\2\63\1\57\1\60\2\57\1\200\1\57\1\200\2\57"+
    "\2\200\2\57\24\200\2\57\1\200\2\57\1\201\2\57"+
    "\1\175\1\70\2\63\1\57\1\60\2\57\1\63\4\57"+
    "\2\63\2\57\24\63\1\57\1\202\1\63\5\57\1\175"+
    "\1\70\2\63\1\57\1\60\2\57\1\63\4\57\2\63"+
    "\2\57\24\63\2\57\1\63\1\57\1\203\3\57\1\175"+
    "\1\70\2\63\1\57\1\60\2\57\1\63\4\57\2\63"+
    "\2\57\24\63\2\57\1\63\6\57\1\204\2\63\1\57"+
    "\1\60\2\57\1\63\4\57\2\63\2\57\24\63\2\57"+
    "\1\63\5\57\1\205\1\70\2\63\1\57\1\60\2\57"+
    "\1\63\4\57\2\63\2\57\24\63\2\57\1\63\6\57"+
    "\1\206\2\63\1\57\1\60\2\57\1\63\3\57\1\103"+
    "\2\63\2\57\24\63\2\57\1\63\6\57\1\70\2\63"+
    "\1\57\1\60\2\57\1\207\1\57\1\207\2\57\2\207"+
    "\2\57\24\207\2\57\1\207\6\57\1\70\2\63\1\57"+
    "\1\60\2\57\1\210\1\57\1\210\2\57\2\210\2\57"+
    "\24\210\2\57\1\210\6\57\1\70\2\63\14\211\1\212"+
    "\44\211\1\213\1\211\1\213\2\211\2\213\2\211\24\213"+
    "\2\211\1\213\11\211\56\0\1\60\55\0\1\61\1\214"+
    "\1\215\12\0\1\215\37\0\1\214\67\0\1\216\56\0"+
    "\1\217\64\0\1\220\53\0\1\221\42\0\1\222\111\0"+
    "\1\223\17\0\1\224\75\0\1\225\37\0\1\226\36\0"+
    "\3\76\1\0\2\76\1\0\3\76\1\0\24\76\2\0"+
    "\1\76\10\0\1\76\47\0\1\227\55\0\1\230\23\0"+
    "\1\231\72\0\1\232\44\0\1\233\46\0\1\234\64\0"+
    "\1\235\45\0\1\236\10\0\1\237\50\0\1\240\54\0"+
    "\1\241\54\0\1\242\1\0\1\243\45\0\1\244\63\0"+
    "\1\245\62\0\1\246\46\0\1\247\51\0\1\250\57\0"+
    "\1\251\45\0\1\252\52\0\1\253\64\0\1\254\45\0"+
    "\1\255\55\0\1\256\61\0\1\257\70\0\1\260\24\0"+
    "\1\261\72\0\1\262\50\0\1\263\50\0\1\264\62\0"+
    "\1\265\53\0\1\266\55\0\1\267\47\0\1\270\66\0"+
    "\1\271\22\0\1\146\1\0\54\146\1\0\30\146\1\272"+
    "\23\146\1\0\32\146\1\273\20\146\2\0\3\153\1\0"+
    "\2\153\1\0\3\153\1\274\24\153\2\0\1\153\10\0"+
    "\1\153\2\0\3\153\1\0\2\153\1\0\3\153\1\274"+
    "\7\153\1\275\14\153\2\0\1\153\10\0\1\153\2\0"+
    "\3\153\1\0\2\153\1\0\3\153\1\274\12\153\1\276"+
    "\11\153\2\0\1\153\10\0\1\153\2\0\3\153\1\0"+
    "\2\153\1\0\3\153\1\274\12\153\1\277\11\153\2\0"+
    "\1\153\10\0\1\153\2\0\3\153\1\0\2\153\1\0"+
    "\3\153\1\274\15\153\1\300\6\153\2\0\1\153\10\0"+
    "\1\153\2\0\3\153\1\0\2\153\1\0\3\153\1\274"+
    "\15\153\1\301\6\153\2\0\1\153\10\0\1\153\2\0"+
    "\3\153\1\0\2\153\1\0\3\153\1\274\3\153\1\302"+
    "\20\153\2\0\1\153\10\0\1\153\2\0\3\153\1\0"+
    "\2\153\1\0\3\153\1\274\2\153\1\303\21\153\2\0"+
    "\1\153\10\0\1\153\2\0\3\153\1\0\2\153\1\0"+
    "\3\153\1\274\12\153\1\304\11\153\2\0\1\153\10\0"+
    "\1\153\2\0\3\153\1\0\2\153\1\0\3\153\1\274"+
    "\6\153\1\305\15\153\2\0\1\153\10\0\1\153\2\0"+
    "\3\153\1\0\2\153\1\0\3\153\1\274\12\153\1\306"+
    "\11\153\2\0\1\153\10\0\1\153\24\0\1\307\53\0"+
    "\1\310\33\0\3\176\1\0\2\176\1\0\3\176\1\0"+
    "\24\176\2\0\1\176\10\0\1\176\2\0\3\200\1\0"+
    "\2\200\1\0\3\200\1\311\24\200\2\0\1\200\10\0"+
    "\1\200\2\0\3\207\1\0\2\207\1\0\3\207\1\0"+
    "\24\207\2\0\1\207\10\0\1\207\2\0\3\210\1\0"+
    "\2\210\1\0\3\210\1\312\24\210\2\0\1\210\10\0"+
    "\1\210\2\0\3\213\1\0\2\213\1\0\3\213\1\0"+
    "\24\213\2\0\1\213\10\0\1\213\2\0\1\214\1\0"+
    "\1\215\12\0\1\215\37\0\1\313\2\0\1\314\5\0"+
    "\1\314\57\0\1\315\61\0\1\316\53\0\1\317\63\0"+
    "\1\320\52\0\1\321\47\0\1\322\52\0\1\323\57\0"+
    "\1\324\57\0\1\325\66\0\1\326\45\0\1\327\3\0"+
    "\1\330\41\0\1\331\64\0\1\332\42\0\1\333\62\0"+
    "\1\334\62\0\1\335\36\0\1\336\55\0\1\337\50\0"+
    "\1\340\104\0\1\341\24\0\1\342\60\0\1\343\61\0"+
    "\1\344\52\0\1\345\67\0\1\346\50\0\1\347\50\0"+
    "\1\350\46\0\1\351\63\0\1\352\60\0\1\353\44\0"+
    "\1\354\75\0\1\355\51\0\1\356\42\0\1\357\45\0"+
    "\1\360\63\0\1\361\45\0\1\362\55\0\1\363\40\0"+
    "\1\364\1\0\1\364\2\0\2\364\2\0\24\364\2\0"+
    "\1\364\13\0\3\153\1\0\2\153\1\0\3\153\1\274"+
    "\2\153\1\365\21\153\2\0\1\153\10\0\1\153\2\0"+
    "\3\153\1\0\2\153\1\0\3\153\1\274\6\153\1\366"+
    "\15\153\2\0\1\153\10\0\1\153\2\0\3\153\1\0"+
    "\2\153\1\0\3\153\1\274\11\153\1\367\12\153\2\0"+
    "\1\153\10\0\1\153\2\0\3\153\1\0\2\153\1\0"+
    "\3\153\1\274\15\153\1\370\6\153\2\0\1\153\10\0"+
    "\1\153\2\0\3\153\1\0\2\153\1\0\3\153\1\274"+
    "\2\153\1\371\21\153\2\0\1\153\10\0\1\153\2\0"+
    "\3\153\1\0\2\153\1\0\3\153\1\274\12\153\1\372"+
    "\11\153\2\0\1\153\10\0\1\153\2\0\3\153\1\0"+
    "\2\153\1\0\1\373\2\153\1\274\24\153\2\0\1\153"+
    "\10\0\1\153\2\0\3\153\1\0\2\153\1\0\3\153"+
    "\1\274\13\153\1\374\10\153\2\0\1\153\10\0\1\153"+
    "\2\0\3\153\1\0\2\153\1\0\3\153\1\274\24\153"+
    "\2\0\1\375\10\0\1\153\2\0\3\153\1\0\2\153"+
    "\1\0\3\153\1\274\5\153\1\376\16\153\2\0\1\153"+
    "\10\0\1\153\17\0\1\377\100\0\1\u0100\15\0\1\u0101"+
    "\1\0\1\u0101\2\0\2\u0101\2\0\24\u0101\2\0\1\u0101"+
    "\13\0\1\313\71\0\1\u0102\61\0\1\u0103\46\0\1\u0104"+
    "\65\0\1\u0105\45\0\1\u0106\53\0\1\u0107\71\0\1\u0108"+
    "\47\0\1\u0109\44\0\1\u010a\62\0\1\u010b\50\0\1\u010c"+
    "\67\0\1\u010d\37\0\1\u010e\65\0\1\u010f\54\0\1\u0110"+
    "\43\0\1\u0111\54\0\1\u0112\72\0\1\u0113\53\0\1\u0114"+
    "\51\0\1\u0115\42\0\1\u0116\65\0\1\u0117\52\0\1\u0118"+
    "\52\0\1\u0119\47\0\1\u011a\60\0\1\u011b\63\0\1\u011c"+
    "\56\0\1\u011d\45\0\1\u011e\46\0\1\u011f\54\0\1\u0120"+
    "\53\0\1\u0121\55\0\1\u0122\62\0\1\u0123\46\0\1\u0124"+
    "\63\0\1\u0125\45\0\1\u0126\71\0\1\u0127\50\0\1\u0128"+
    "\26\0\3\364\1\0\2\364\1\0\3\364\1\0\24\364"+
    "\2\0\1\364\10\0\1\364\2\0\3\153\1\0\2\153"+
    "\1\0\3\153\1\274\11\153\1\u0129\12\153\2\0\1\153"+
    "\10\0\1\153\2\0\3\153\1\0\2\153\1\0\3\153"+
    "\1\274\1\153\1\u012a\22\153\2\0\1\153\10\0\1\153"+
    "\2\0\3\153\1\0\2\153\1\0\3\153\1\274\11\153"+
    "\1\u012b\12\153\2\0\1\153\10\0\1\153\2\0\3\153"+
    "\1\0\2\153\1\0\3\153\1\274\3\153\1\u012c\20\153"+
    "\2\0\1\153\10\0\1\153\2\0\3\153\1\0\2\153"+
    "\1\0\3\153\1\274\11\153\1\u012d\12\153\2\0\1\153"+
    "\10\0\1\153\2\0\3\153\1\0\2\153\1\0\3\153"+
    "\1\274\6\153\1\u012e\15\153\2\0\1\153\10\0\1\153"+
    "\2\0\3\153\1\0\2\153\1\0\3\153\1\274\15\153"+
    "\1\u012f\6\153\2\0\1\153\10\0\1\153\2\0\3\153"+
    "\1\0\2\153\1\0\3\153\1\274\5\153\1\u0130\16\153"+
    "\2\0\1\153\10\0\1\153\2\0\3\153\1\0\2\153"+
    "\1\0\3\153\1\274\2\153\1\u0131\21\153\2\0\1\153"+
    "\10\0\1\153\2\0\3\153\1\0\2\153\1\0\3\153"+
    "\1\274\2\153\1\u0132\21\153\2\0\1\153\10\0\1\153"+
    "\26\0\1\u0133\45\0\1\u0134\37\0\3\u0101\1\0\2\u0101"+
    "\1\0\3\u0101\1\0\24\u0101\2\0\1\u0101\10\0\1\u0101"+
    "\20\0\1\u0135\61\0\1\u0136\53\0\1\u0137\50\0\1\u0138"+
    "\56\0\1\u0139\52\0\1\u013a\64\0\1\u013b\46\0\1\u013c"+
    "\66\0\1\u013d\36\0\1\u013e\51\0\1\u013f\73\0\1\u0140"+
    "\42\0\1\u0141\63\0\1\u0142\52\0\1\u0143\63\0\1\u0144"+
    "\33\0\1\u0145\63\0\1\u0146\51\0\1\u0147\55\0\1\u0148"+
    "\54\0\1\u0149\71\0\1\u014a\36\0\1\u014b\62\0\1\u014c"+
    "\47\0\1\u014d\66\0\1\u014e\43\0\1\u014f\65\0\1\u0150"+
    "\54\0\1\u0151\56\0\1\u0152\40\0\1\u0153\60\0\1\u0154"+
    "\56\0\1\u0155\44\0\1\u0156\72\0\1\u0157\37\0\1\u0158"+
    "\71\0\1\u0159\37\0\1\u015a\66\0\1\u015b\25\0\3\153"+
    "\1\0\2\153\1\0\3\153\1\274\2\153\1\u015c\21\153"+
    "\2\0\1\153\10\0\1\153\2\0\3\153\1\0\2\153"+
    "\1\0\3\153\1\274\11\153\1\u015d\12\153\2\0\1\153"+
    "\10\0\1\153\2\0\3\153\1\0\2\153\1\0\3\153"+
    "\1\274\2\153\1\u015e\21\153\2\0\1\153\10\0\1\153"+
    "\2\0\3\153\1\0\2\153\1\0\3\153\1\274\13\153"+
    "\1\u015f\10\153\2\0\1\153\10\0\1\153\2\0\3\153"+
    "\1\0\2\153\1\0\3\153\1\274\2\153\1\u0160\21\153"+
    "\2\0\1\153\10\0\1\153\2\0\3\153\1\0\2\153"+
    "\1\0\3\153\1\274\11\153\1\u0161\12\153\2\0\1\153"+
    "\10\0\1\153\17\0\1\u0162\63\0\1\u0163\47\0\1\u0164"+
    "\53\0\1\u0165\53\0\1\u0166\67\0\1\u0167\41\0\1\u0168"+
    "\54\0\1\u0169\64\0\1\u016a\55\0\1\u016b\55\0\1\u016c"+
    "\47\0\1\u016d\65\0\1\u016e\37\0\1\u016f\64\0\1\u0170"+
    "\61\0\1\u0171\56\0\1\u0172\46\0\1\u0173\41\0\1\u0174"+
    "\63\0\1\u0175\47\0\1\u0176\53\0\1\u0177\65\0\1\u0178"+
    "\67\0\1\u0179\46\0\1\u017a\51\0\1\u017b\52\0\1\u017c"+
    "\43\0\1\u017d\66\0\1\u017e\60\0\1\u017f\36\0\1\u0180"+
    "\62\0\1\u0181\53\0\1\u0182\61\0\1\u0183\60\0\1\u0184"+
    "\50\0\1\u0185\43\0\1\u0186\36\0\3\153\1\0\2\153"+
    "\1\0\3\153\1\274\20\153\1\u0187\3\153\2\0\1\153"+
    "\10\0\1\153\2\0\3\153\1\0\2\153\1\0\3\153"+
    "\1\274\2\153\1\u0188\21\153\2\0\1\153\10\0\1\153"+
    "\2\0\3\153\1\0\2\153\1\0\3\153\1\274\20\153"+
    "\1\u0189\3\153\2\0\1\153\10\0\1\153\2\0\3\153"+
    "\1\0\2\153\1\0\3\153\1\274\22\153\1\u018a\1\153"+
    "\2\0\1\153\10\0\1\153\2\0\3\153\1\0\2\153"+
    "\1\0\3\153\1\274\17\153\1\u018b\4\153\2\0\1\153"+
    "\10\0\1\153\2\0\3\153\1\0\2\153\1\0\3\153"+
    "\1\274\10\153\1\u018c\13\153\2\0\1\153\10\0\1\153"+
    "\35\0\1\u018d\44\0\1\u018e\46\0\1\u018f\55\0\1\u0190"+
    "\56\0\1\u0191\67\0\1\u0192\54\0\1\u0193\44\0\1\u0194"+
    "\61\0\1\u0195\47\0\1\u0196\45\0\1\u0197\73\0\1\u0198"+
    "\43\0\1\u0199\55\0\1\u019a\47\0\1\u019b\54\0\1\u019c"+
    "\67\0\1\u019d\55\0\1\u019e\52\0\1\u019f\41\0\1\u01a0"+
    "\67\0\1\u01a1\52\0\1\u01a2\53\0\1\u01a3\61\0\1\u01a4"+
    "\45\0\1\u01a5\54\0\1\u01a6\61\0\1\u01a7\47\0\1\u01a8"+
    "\61\0\1\u01a9\47\0\1\u01aa\62\0\1\u01ab\23\0\3\153"+
    "\1\0\2\153\1\0\3\153\1\274\15\153\1\u01ac\6\153"+
    "\2\0\1\153\10\0\1\153\2\0\3\153\1\0\2\153"+
    "\1\0\3\153\1\274\20\153\1\u01ad\3\153\2\0\1\153"+
    "\10\0\1\153\2\0\3\153\1\0\2\153\1\0\3\153"+
    "\1\274\15\153\1\u01ae\6\153\2\0\1\153\10\0\1\153"+
    "\2\0\3\153\1\0\2\153\1\0\3\153\1\274\1\153"+
    "\1\u01af\22\153\2\0\1\153\10\0\1\153\2\0\3\153"+
    "\1\0\2\153\1\0\3\153\1\274\17\153\1\u01b0\4\153"+
    "\2\0\1\153\10\0\1\153\2\0\3\153\1\0\2\153"+
    "\1\0\2\153\1\u01b1\1\274\24\153\2\0\1\153\10\0"+
    "\1\153\32\0\1\u01b2\35\0\1\u01b3\60\0\1\u01b4\73\0"+
    "\1\u01b5\41\0\1\u01b6\57\0\1\u01b7\51\0\1\u01b8\67\0"+
    "\1\u01b9\35\0\1\u01ba\60\0\1\u01bb\61\0\1\u01bc\45\0"+
    "\1\u01bd\52\0\1\u01be\54\0\1\u01bf\55\0\1\u01c0\63\0"+
    "\1\u01c1\62\0\1\u01c2\51\0\1\u01c3\45\0\1\u01c4\55\0"+
    "\1\u01c5\53\0\1\u01c6\54\0\1\u01c7\50\0\1\u01c8\37\0"+
    "\3\153\1\0\2\153\1\0\3\153\1\274\15\153\1\u01c9"+
    "\6\153\2\0\1\153\10\0\1\153\2\0\3\153\1\0"+
    "\2\153\1\0\3\153\1\274\15\153\1\u01ca\6\153\2\0"+
    "\1\153\10\0\1\153\2\0\3\153\1\0\2\153\1\0"+
    "\3\153\1\274\13\153\1\u01cb\10\153\2\0\1\153\10\0"+
    "\1\153\2\0\3\153\1\0\2\153\1\0\3\153\1\274"+
    "\2\153\1\u01cc\5\153\1\u01cd\13\153\2\0\1\153\10\0"+
    "\1\153\17\0\1\u01ce\57\0\1\u01cf\51\0\1\u01d0\54\0"+
    "\1\u01d1\67\0\1\u01d2\41\0\1\u01d3\50\0\1\u01d4\61\0"+
    "\1\u01d5\64\0\1\u01d6\61\0\1\u01d7\36\0\1\u01d8\54\0"+
    "\1\u01d9\54\0\1\u01da\37\0\3\153\1\0\2\153\1\0"+
    "\2\153\1\u01db\1\274\24\153\2\0\1\153\10\0\1\153"+
    "\2\0\3\153\1\0\2\153\1\0\3\153\1\274\2\153"+
    "\1\u01dc\21\153\2\0\1\153\10\0\1\153\2\0\3\153"+
    "\1\0\2\153\1\0\3\153\1\274\20\153\1\u01dd\3\153"+
    "\2\0\1\153\10\0\1\153\2\0\3\153\1\0\2\153"+
    "\1\0\3\153\1\274\7\153\1\u01de\14\153\2\0\1\153"+
    "\10\0\1\153\2\0\3\153\1\0\2\153\1\0\3\153"+
    "\1\274\15\153\1\u01df\6\153\2\0\1\153\10\0\1\153"+
    "\24\0\1\u01e0\64\0\1\u01e1\50\0\1\u01e2\60\0\1\u01e3"+
    "\53\0\1\u01e4\53\0\1\u01e5\24\0\3\153\1\0\2\153"+
    "\1\0\3\153\1\274\20\153\1\u01e6\3\153\2\0\1\153"+
    "\10\0\1\153\2\0\3\153\1\0\2\153\1\0\3\153"+
    "\1\274\21\153\1\u01e7\2\153\2\0\1\153\10\0\1\153"+
    "\2\0\3\153\1\0\2\153\1\0\3\153\1\274\2\153"+
    "\1\u01e8\21\153\2\0\1\153\10\0\1\153\2\0\3\153"+
    "\1\0\2\153\1\0\3\153\1\274\15\153\1\u01e9\6\153"+
    "\2\0\1\153\10\0\1\153\17\0\1\u01ea\66\0\1\u01eb"+
    "\52\0\1\u01ec\56\0\1\u01ed\42\0\1\u01ee\37\0\3\153"+
    "\1\0\2\153\1\0\3\153\1\274\12\153\1\u01ef\11\153"+
    "\2\0\1\153\10\0\1\153\2\0\3\153\1\0\2\153"+
    "\1\0\2\153\1\u01f0\1\274\24\153\2\0\1\153\10\0"+
    "\1\153\2\0\3\153\1\0\2\153\1\0\3\153\1\274"+
    "\11\153\1\u01f1\12\153\2\0\1\153\10\0\1\153\2\0"+
    "\3\153\1\0\2\153\1\0\3\153\1\274\3\153\1\u01f2"+
    "\20\153\2\0\1\153\10\0\1\153\26\0\1\u01f3\53\0"+
    "\1\u01f4\64\0\1\u01f5\44\0\1\u01f6\31\0\3\153\1\0"+
    "\2\153\1\0\3\153\1\274\5\153\1\u01f7\16\153\2\0"+
    "\1\153\10\0\1\153\2\0\3\153\1\0\2\153\1\0"+
    "\3\153\1\274\13\153\1\u01f8\10\153\2\0\1\153\10\0"+
    "\1\153\2\0\3\153\1\0\2\153\1\0\3\153\1\274"+
    "\2\153\1\u01f9\21\153\2\0\1\153\10\0\1\153\2\0"+
    "\3\153\1\0\2\153\1\0\3\153\1\274\13\153\1\u01fa"+
    "\10\153\2\0\1\153\10\0\1\153\17\0\1\u01fb\60\0"+
    "\1\u01fc\54\0\1\u01fd\33\0\3\153\1\0\2\153\1\0"+
    "\3\153\1\274\2\153\1\u01fe\21\153\2\0\1\153\10\0"+
    "\1\153\2\0\3\153\1\0\2\153\1\0\3\153\1\274"+
    "\20\153\1\u01ff\3\153\2\0\1\153\10\0\1\153\2\0"+
    "\3\153\1\0\2\153\1\0\3\153\1\274\20\153\1\u0200"+
    "\3\153\2\0\1\153\10\0\1\153\2\0\3\153\1\0"+
    "\2\153\1\0\3\153\1\274\22\153\1\u0201\1\153\2\0"+
    "\1\153\10\0\1\153\35\0\1\u0202\36\0\1\u0203\54\0"+
    "\1\u0204\37\0\3\153\1\0\2\153\1\0\3\153\1\274"+
    "\17\153\1\u0205\4\153\2\0\1\153\10\0\1\153\2\0"+
    "\3\153\1\0\2\153\1\0\3\153\1\274\15\153\1\u0206"+
    "\6\153\2\0\1\153\10\0\1\153\2\0\3\153\1\0"+
    "\2\153\1\0\3\153\1\274\1\153\1\u0207\22\153\2\0"+
    "\1\153\10\0\1\153\32\0\1\u0208\56\0\1\u0209\22\0"+
    "\3\153\1\0\2\153\1\0\3\153\1\274\15\153\1\u020a"+
    "\6\153\2\0\1\153\10\0\1\153\2\0\3\153\1\0"+
    "\2\153\1\0\3\153\1\274\15\153\1\u020b\6\153\2\0"+
    "\1\153\10\0\1\153\2\0\3\153\1\0\2\153\1\0"+
    "\3\153\1\274\3\153\1\u020c\20\153\2\0\1\153\10\0"+
    "\1\153\2\0\3\153\1\0\2\153\1\0\3\153\1\274"+
    "\2\153\1\u020d\21\153\2\0\1\153\10\0\1\153\2\0"+
    "\3\153\1\0\2\153\1\0\3\153\1\274\1\153\1\u020e"+
    "\22\153\2\0\1\153\10\0\1\153\2\0\3\153\1\0"+
    "\2\153\1\0\3\153\1\274\6\153\1\u020f\15\153\2\0"+
    "\1\153\10\0\1\153\2\0\3\153\1\0\2\153\1\0"+
    "\3\153\1\274\15\153\1\u0210\6\153\2\0\1\153\10\0"+
    "\1\153\2\0\3\153\1\0\2\153\1\0\3\153\1\274"+
    "\13\153\1\u0211\10\153\2\0\1\153\10\0\1\153\2\0"+
    "\3\153\1\0\2\153\1\0\3\153\1\274\12\153\1\u0212"+
    "\11\153\2\0\1\153\10\0\1\153\2\0\3\153\1\0"+
    "\2\153\1\0\3\153\1\274\20\153\1\u0213\3\153\2\0"+
    "\1\153\10\0\1\153";

  private static int [] zzUnpackTrans() {
    int [] result = new int[19980];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\56\0\1\11\3\1\1\11\5\1\1\11\5\1\1\11"+
    "\3\1\1\11\12\1\1\11\24\1\3\11\3\1\1\11"+
    "\14\1\4\11\3\1\1\11\1\1\1\11\1\1\3\11"+
    "\1\1\1\11\3\1\2\11\2\1\5\0\3\11\2\0"+
    "\2\11\27\0\1\11\11\0\2\1\1\0\12\1\3\0"+
    "\1\11\1\1\50\0\13\1\2\0\1\1\47\0\12\1"+
    "\32\0\1\11\1\0\2\11\12\0\1\11\6\1\2\0"+
    "\1\11\1\0\2\11\11\0\1\11\16\0\2\11\5\0"+
    "\6\1\2\0\1\11\1\0\2\11\2\0\1\11\11\0"+
    "\1\11\1\0\1\11\5\0\1\11\1\0\1\11\2\0"+
    "\6\1\1\11\2\0\1\11\3\0\2\11\1\0\1\11"+
    "\1\0\1\11\3\0\2\11\1\0\1\11\2\0\1\11"+
    "\5\1\1\0\2\11\2\0\1\11\3\0\4\11\5\1"+
    "\5\0\1\11\4\1\4\0\1\11\4\1\2\0\1\11"+
    "\1\0\4\1\3\0\4\1\2\0\1\11\3\1\2\11"+
    "\12\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[531];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */


  _XQueryLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _XQueryLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1822) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 33: 
          { popState(); return XQ_LOCAL_NAME;
          }
        case 99: break;
        case 80: 
          { yybegin(_SEP); return KW_PRESERVE;
          }
        case 100: break;
        case 70: 
          { pushState(_AS_OCC); yybegin(_EMPTY_BRACES); return KW_COMMENT;
          }
        case 101: break;
        case 24: 
          { pushState(_CLOSE_BRACE); yypushback(1); yybegin(_STRINGLITERAL);
          }
        case 102: break;
        case 26: 
          { yybegin(_AS_AorE_); return OP_STAR;
          }
        case 103: break;
        case 15: 
          { pushState(_ATLIST_); yybegin(_URILITERAL); return OP_COMMA;
          }
        case 104: break;
        case 12: 
          { yybegin(STR_START_APOS); return XQ_STR_START;
          }
        case 105: break;
        case 3: 
          { return XQ_INTEGER_LITERAL;
          }
        case 106: break;
        case 87: 
          { pushState(_SEP); pushState(_ATLIST); yybegin(_URILITERAL); return KW_NAMESPACE;
          }
        case 107: break;
        case 41: 
          { return XQ_STR_ESCAPE_APOS;
          }
        case 108: break;
        case 75: 
          { pushState(_SEP); yybegin(_URILITERAL); return KW_BASE_URI;
          }
        case 109: break;
        case 8: 
          { popState(); return XQ_STR_END;
          }
        case 110: break;
        case 46: 
          { return XQ_DOUBLE_LITERAL;
          }
        case 111: break;
        case 19: 
          { popState(); return OP_PLUS;
          }
        case 112: break;
        case 32: 
          { popState(); return XQ_NCNAME;
          }
        case 113: break;
        case 45: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { yybegin(_QNAME_); return XQ_PREFIX_NAME;
          }
        case 114: break;
        case 17: 
          { yypushback(yylength()); pushState(_AS_OCC); yybegin(_QNAME);
          }
        case 115: break;
        case 39: 
          { pushState(); return XQ_COMMENT_START;
          }
        case 116: break;
        case 98: 
          { pushState(_AS_OCC); pushState(_AS_PI); yybegin(_OPEN_BRACE); return KW_PROCESSING_INSTRUCTION;
          }
        case 117: break;
        case 18: 
          { popState(); yypushback(1);
          }
        case 118: break;
        case 83: 
          { pushState(_SEP); yybegin(NAMESPACEDECL); return KW_NAMESPACE;
          }
        case 119: break;
        case 82: 
          { pushState(_SEP); yybegin(NAMESPACEDECL); return KW_MODULE;
          }
        case 120: break;
        case 56: 
          { yybegin(_MODULE); return KW_MODULE;
          }
        case 121: break;
        case 88: 
          { pushState(_AS_OCC); pushState(_AS_AorE); yybegin(_OPEN_BRACE); return KW_ATTRIBUTE;
          }
        case 122: break;
        case 86: 
          { pushState(_SEP); pushState(_ATLIST); yybegin(NAMESPACEDECL); return KW_NAMESPACE;
          }
        case 123: break;
        case 71: 
          { pushState(_CLOSE_BRACE); pushState(_AS_AorE); yybegin(_OPEN_BRACE); return KW_ELEMENT;
          }
        case 124: break;
        case 74: 
          { pushState(_SEP); pushState(_DECLARE_VARIABLE); yybegin(_PARAM); return KW_VARIABLE;
          }
        case 125: break;
        case 73: 
          { yybegin(DECLAREORDERING); return KW_ORDERING;
          }
        case 126: break;
        case 59: 
          { yybegin(_IMPORT_MODULE); return KW_MODULE;
          }
        case 127: break;
        case 11: 
          { yybegin(STR_START_QUOTE); return XQ_STR_START;
          }
        case 128: break;
        case 37: 
          { pushState(); yybegin(EXPR_COMMENT); return XQ_COMMENT_START;
          }
        case 129: break;
        case 58: 
          { pushState(_SEP); pushState(_STRINGLITERAL); yybegin(_QNAME); return KW_OPTION;
          }
        case 130: break;
        case 34: 
          { popState(); return BAD_CHARACTER;
          }
        case 131: break;
        case 16: 
          { pushState(_AS); yybegin(_QNAME); return OP_VARSTART;
          }
        case 132: break;
        case 81: 
          { yybegin(_SEP); return KW_UNORDERED;
          }
        case 133: break;
        case 76: 
          { yybegin(_DECLARE_COPYNS_); return KW_PRESERVE;
          }
        case 134: break;
        case 66: 
          { yybegin(_DECLARE_DEFAULT_NAMESPACE); return KW_ELEMENT;
          }
        case 135: break;
        case 61: 
          { yybegin(_DECLARE); return KW_DECLARE;
          }
        case 136: break;
        case 60: 
          { yybegin(_IMPORT_SCHEMA); return KW_SCHEMA;
          }
        case 137: break;
        case 51: 
          { yybegin(_DECLARE_DEFAULT_ORDER); return KW_ORDER;
          }
        case 138: break;
        case 44: 
          { yybegin(_AS_); return KW_AS;
          }
        case 139: break;
        case 96: 
          { yybegin(_DECLARE_COPYNS); return KW_COPY_NAMESPACES;
          }
        case 140: break;
        case 77: 
          { yybegin(_DECLARE_DEFAULT_NAMESPACE); return KW_FUNCTION;
          }
        case 141: break;
        case 25: 
          { yypushback(yylength()); pushState(_AS_AorE_); yybegin(_QNAME);
          }
        case 142: break;
        case 20: 
          { popState(); return OP_QUESTION;
          }
        case 143: break;
        case 27: 
          { pushState(_AS_AorE__); yybegin(_QNAME); return OP_COMMA;
          }
        case 144: break;
        case 92: 
          { pushState(_AS_OCC); pushState(_AS_DN); yybegin(_OPEN_BRACE); return KW_DOCUMENT_NODE;
          }
        case 145: break;
        case 79: 
          { popState(); return KW_EXTERNAL;
          }
        case 146: break;
        case 69: 
          { pushState(_AS_OCC); pushState(_AS_AorE); yybegin(_OPEN_BRACE); return KW_ELEMENT;
          }
        case 147: break;
        case 72: 
          { pushState(_SEP); yybegin(_STRINGLITERAL); return KW_ENCODING;
          }
        case 148: break;
        case 64: 
          { yybegin(_DECLARE_DEFAULT); return KW_DEFAULT;
          }
        case 149: break;
        case 57: 
          { yybegin(_IMPORT); return KW_IMPORT;
          }
        case 150: break;
        case 48: 
          { pushState(_AS_OCC); yybegin(_EMPTY_BRACES); return KW_TEXT;
          }
        case 151: break;
        case 14: 
          { yypushback(yylength()); popState();
          }
        case 152: break;
        case 84: 
          { pushState(_SEP); yybegin(_URILITERAL); return KW_COLLATION;
          }
        case 153: break;
        case 49: 
          { yybegin(_EMPTY_BRACES); return KW_VOID;
          }
        case 154: break;
        case 78: 
          { yybegin(_SEP); return KW_GREATEST;
          }
        case 155: break;
        case 21: 
          { popState(); return OP_STAR;
          }
        case 156: break;
        case 7: 
          { return XQ_STR_CHAR;
          }
        case 157: break;
        case 40: 
          { return XQ_STR_ESCAPE_QUOTE;
          }
        case 158: break;
        case 67: 
          { yybegin(_IMPORT_SCHEMA_DEFAULT); return KW_DEFAULT;
          }
        case 159: break;
        case 13: 
          { yybegin(_URILITERAL); return OP_EQUALS;
          }
        case 160: break;
        case 36: 
          { return XQ_DECIMAL_LITERAL;
          }
        case 161: break;
        case 65: 
          { yybegin(_SEP); return KW_INHERIT;
          }
        case 162: break;
        case 30: 
          { popState(); return OP_RBRACE;
          }
        case 163: break;
        case 55: 
          { yybegin(_XQUERY); return KW_XQUERY;
          }
        case 164: break;
        case 97: 
          { pushState(_AS_OCC); pushState(_CLOSE_BRACE); pushState(_QNAME); yybegin(_OPEN_BRACE);  return KW_SCHEMA_ATTRIBUTE;
          }
        case 165: break;
        case 68: 
          { yybegin(_IMPORT_SCHEMA_DEFAULT_ELEMENT); return KW_ELEMENT;
          }
        case 166: break;
        case 31: 
          { popState(); return OP_LBRACE;
          }
        case 167: break;
        case 42: 
          { popState(); return OP_ASSIGN;
          }
        case 168: break;
        case 85: 
          { pushState(_SEP); yybegin(_URILITERAL); return KW_NAMESPACE;
          }
        case 169: break;
        case 54: 
          { yybegin(_SEP); return KW_STRIP;
          }
        case 170: break;
        case 47: 
          { pushState(_AS_OCC); yybegin(_EMPTY_BRACES); return KW_ITEM;
          }
        case 171: break;
        case 9: 
          { yybegin(YYINITIAL); return OP_SEPERATOR;
          }
        case 172: break;
        case 63: 
          { pushState(_XQUERY_VERSION); yybegin(_STRINGLITERAL); return KW_VERSION;
          }
        case 173: break;
        case 89: 
          { yybegin(_SEP); return KW_NO_INHERIT;
          }
        case 174: break;
        case 22: 
          { yypushback(1); yybegin(_CLOSE_BRACE);
          }
        case 175: break;
        case 1: 
          { yybegin(YYINITIAL); return BAD_CHARACTER;
          }
        case 176: break;
        case 62: 
          { yybegin(_SEP); return KW_ORDERED;
          }
        case 177: break;
        case 95: 
          { pushState(_CLOSE_BRACE); pushState(_CLOSE_BRACE); pushState(_QNAME); yybegin(_OPEN_BRACE); return KW_SCHEMA_ELEMENT;
          }
        case 178: break;
        case 2: 
          { return WHITE_SPACE;
          }
        case 179: break;
        case 43: 
          { pushState(_ATLIST_); yybegin(_URILITERAL); return KW_AT;
          }
        case 180: break;
        case 94: 
          { pushState(_AS_OCC); pushState(_CLOSE_BRACE); pushState(_QNAME); yybegin(_OPEN_BRACE); return KW_SCHEMA_ELEMENT;
          }
        case 181: break;
        case 6: 
          { yybegin(_NAMESPACEDECL_); return XQ_LOCAL_NAME;
          }
        case 182: break;
        case 90: 
          { yybegin(_DECLARE_COPYNS_); return KW_NO_PRESERVE;
          }
        case 183: break;
        case 23: 
          { pushState(_CLOSE_BRACE); yypushback(yylength()); yybegin(_NCNAME);
          }
        case 184: break;
        case 52: 
          { yybegin(_DECLARE_DEFAULT_ORDER_EMPTY); return KW_EMPTY;
          }
        case 185: break;
        case 4: 
          { return BAD_WORD;
          }
        case 186: break;
        case 29: 
          { yybegin(_EMPTY_BRACES_); return OP_LBRACE;
          }
        case 187: break;
        case 93: 
          { yybegin(_PRESERVE_OR_STRIP); return KW_BOUNDARY_SPACE;
          }
        case 188: break;
        case 91: 
          { yybegin(_PRESERVE_OR_STRIP); return KW_CONSTRUCTION;
          }
        case 189: break;
        case 28: 
          { yybegin(_CLOSE_BRACE); return OP_QUESTION;
          }
        case 190: break;
        case 35: 
          { yybegin(_QNAME_LOCAL); return OP_COLON;
          }
        case 191: break;
        case 50: 
          { pushState(_AS_OCC); yybegin(_EMPTY_BRACES); return KW_NODE;
          }
        case 192: break;
        case 38: 
          { popState(); return XQ_COMMENT_END;
          }
        case 193: break;
        case 5: 
          { return XQ_COMMENT_CHAR;
          }
        case 194: break;
        case 53: 
          { yybegin(_SEP); return KW_LEAST;
          }
        case 195: break;
        case 10: 
          { yybegin(_DECLARE_COPYNS__); return OP_COMMA;
          }
        case 196: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
