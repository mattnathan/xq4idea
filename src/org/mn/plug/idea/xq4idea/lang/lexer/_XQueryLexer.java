/* The following code was generated by JFlex 1.4.3 on 10/04/11 20:00 */

package org.mn.plug.idea.xq4idea.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

// this lexer follows the principles set out in http://www.w3.org/TR/xquery-xpath-parsing/
/**
 * Generated lexer
 */
@SuppressWarnings({"UnusedDeclaration", "UnusedAssignment", "FieldCanBeLocal", "AccessStaticViaInstance", "JavaDoc", "ConstantConditions"})

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 10/04/11 20:00 from the specification file
 * <tt>C:/Users/Matt/IdeaProjects/ideaPlugins/xq4idea/source/xq4idea/src/org/mn/plug/idea/xq4idea/lang/lexer/_XQueryLexer.flex</tt>
 */
class _XQueryLexer extends AbstractLexer implements FlexLexer, XQueryTokenTypes {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int XML_COMMENT = 4;
  public static final int _WILDCARD_QNAME = 260;
  public static final int _IF_EXPR_THEN = 100;
  public static final int _IF_EXPR__ = 98;
  public static final int _DECLARE_DEFAULT = 28;
  public static final int _FOR_CLAUSE_VAR_POS = 196;
  public static final int _AS = 62;
  public static final int _AS_SELEM = 82;
  public static final int _PATH_EXPR = 166;
  public static final int _CLOSE_BRACE = 232;
  public static final int _XQUERY_VERSION = 16;
  public static final int _IMPORT_SCHEMA = 40;
  public static final int _WHERE_CLAUSE = 208;
  public static final int _AS_AorE = 76;
  public static final int _EXPR_LIST = 86;
  public static final int _OPEN_CURLY = 234;
  public static final int _VALIDATE_EXPR__ = 164;
  public static final int _ADD_EXPR = 138;
  public static final int _ATLIST = 56;
  public static final int NAMESPACEDECL = 8;
  public static final int _DECLARE_VARIABLE = 36;
  public static final int _TYPESWITCH_EXPR_RETURN = 130;
  public static final int _FLWOR_BODY3 = 188;
  public static final int _FLWOR_BODY2 = 186;
  public static final int _VALIDATE_EXPR_X = 160;
  public static final int _FLWOR_BODY1 = 184;
  public static final int _TYPESWITCH_EXPR = 112;
  public static final int _FOR_CLAUSE = 190;
  public static final int _INSTANCEOF_EXPR = 154;
  public static final int _FOR_CLAUSE_VAR_IN = 200;
  public static final int _STEP_EXPR = 176;
  public static final int _AS_SATTR = 74;
  public static final int _LET_CLAUSE_VAR = 206;
  public static final int _MULT_EXPR = 140;
  public static final int _EMPTY_BRACES = 226;
  public static final int _AS_AorE_ = 78;
  public static final int _URILITERAL = 50;
  public static final int _DECLARE_DEFAULT_NAMESPACE = 34;
  public static final int _VALIDATE_EXPR_ = 162;
  public static final int _SEP = 242;
  public static final int _OPEN_SQUARE = 238;
  public static final int _IF_EXPR_ELSE = 102;
  public static final int _VALUE_EXPR = 156;
  public static final int _FOR_CLAUSE_VAR_POS_ = 198;
  public static final int _QUANT_EXPR_LIST = 106;
  public static final int _AS_DN = 68;
  public static final int _AS_OCC = 66;
  public static final int _COLONCOLON = 250;
  public static final int _OPEN_BRACE = 230;
  public static final int STR_START_APOS = 12;
  public static final int _ORDER_CLAUSE_LIST = 214;
  public static final int _AND_EXPR = 134;
  public static final int _FLWOR_HEAD = 182;
  public static final int _AS_PI = 70;
  public static final int _TYPESWITCH_EXPR_ = 114;
  public static final int _IMPORT_MODULE = 46;
  public static final int _IMPORT_SCHEMA_DEFAULT_ELEMENT = 44;
  public static final int _QUANT_EXPR_SATISFIES = 110;
  public static final int _TYPESWITCH_EXPR_DEFAULT_ = 120;
  public static final int STR_START_QUOTE = 10;
  public static final int _TYPESWITCH_EXPR_CASE_AS = 128;
  public static final int _STABLE_ORDER_CLAUSE = 224;
  public static final int _QUANT_EXPR = 104;
  public static final int _AS_ = 64;
  public static final int _CLOSE_SQUARE = 240;
  public static final int _DECLARE_COPYNS_ = 24;
  public static final int DECLAREORDERING = 6;
  public static final int _ORDER_CLAUSE_MODIFIER_COLLATION = 222;
  public static final int _FOR_CLAUSE_ = 192;
  public static final int _OPT_EXPR_LIST_IN_BRACE = 90;
  public static final int _TYPESWITCH_EXPR__ = 116;
  public static final int _DECLARE_DEFAULT_ORDER_EMPTY = 32;
  public static final int _ORDER_CLAUSE = 210;
  public static final int _QNAME_LOCAL = 258;
  public static final int _WILDCARD_QNAME_LOCAL = 264;
  public static final int _LET_CLAUSE_ = 204;
  public static final int _INTERSECT_EXPR = 144;
  public static final int _STRINGLITERAL = 52;
  public static final int _QNAME_ = 256;
  public static final int _NODE_TEST = 178;
  public static final int _MODULE = 18;
  public static final int _AS_AorE__ = 80;
  public static final int _DECLARE_DEFAULT_ORDER = 30;
  public static final int _DECLARE = 20;
  public static final int _PREDICATE_LIST = 180;
  public static final int YYINITIAL = 0;
  public static final int _EMPTY_BRACES_ = 228;
  public static final int _RANGE_EXPR = 136;
  public static final int _COLON = 248;
  public static final int _EXPR_LIST_OR_RBRACE = 92;
  public static final int _EXPR_SINGLE = 84;
  public static final int _STAR = 246;
  public static final int _VALIDATE_EXPR = 158;
  public static final int _ATLIST_ = 58;
  public static final int _LET_CLAUSE = 202;
  public static final int _QNAME = 254;
  public static final int _ORDER_CLAUSE_MODIFIER = 216;
  public static final int _PARENTHESIZED_EXPR = 172;
  public static final int _TYPESWITCH_EXPR_DEFAULT = 118;
  public static final int _IMPORT_SCHEMA_DEFAULT = 42;
  public static final int _TYPESWITCH_EXPR_CASE = 122;
  public static final int _NCNAME = 252;
  public static final int _TYPESWITCH_EXPR_CASE_ = 126;
  public static final int _AS_ATTR = 72;
  public static final int _FORWARD_STEP = 174;
  public static final int _IMPORT = 38;
  public static final int _ORDER_CLAUSE_MODIFIER_EMPTY = 218;
  public static final int _XQUERY = 14;
  public static final int _PRESERVE_OR_STRIP = 48;
  public static final int _ORDER_CLAUSE_BY = 212;
  public static final int _OR_EXPR = 132;
  public static final int _PRIMARY_EXPR = 170;
  public static final int _CASTABLE_EXPR = 150;
  public static final int _VARNAME = 244;
  public static final int _TREAT_EXPR = 148;
  public static final int _UNION_EXPR = 142;
  public static final int _CLOSE_CURLY = 236;
  public static final int _ORDER_CLAUSE_MODIFIER_EMPTY_ = 220;
  public static final int _QUANT_EXPR_IN = 108;
  public static final int _EXPR_LIST_IN_CURLY = 88;
  public static final int EXPR_COMMENT = 2;
  public static final int _INSTANCE_OF_EXPR = 146;
  public static final int _NAMESPACEDECL_ = 54;
  public static final int _PARAM = 60;
  public static final int _IF_EXPR_ = 96;
  public static final int _FOR_CLAUSE_VAR = 194;
  public static final int _IF_EXPR = 94;
  public static final int _DECLARE_COPYNS = 22;
  public static final int _DECLARE_COPYNS__ = 26;
  public static final int _CAST_EXPR = 152;
  public static final int _TYPESWITCH_EXPR_CASE2 = 124;
  public static final int _FILTER_EXPR = 168;
  public static final int _WILDCARD_QNAME_ = 262;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 
    24, 24, 25, 25, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 30, 
    31, 31, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 36, 36, 37, 37, 
    38, 38, 35, 35, 39, 39, 40, 40, 41, 41, 42, 42, 43, 43, 44, 44, 
    45, 45, 46, 46, 47, 47, 48, 48, 49, 49, 50, 50, 51, 51, 52, 52, 
    53, 53, 54, 54, 55, 55, 56, 56, 57, 57, 58, 58, 59, 59, 60, 60, 
    61, 61, 62, 62, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 
    35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 63, 63, 35, 35, 35, 35, 
    64, 64, 41, 41, 35, 35, 35, 35, 65, 65, 35, 35, 35, 35, 35, 35, 
    66, 66, 67, 67, 68, 68, 69, 69, 70, 70, 71, 71, 72, 72, 73, 73, 
    74, 74, 35, 35, 75, 75, 35, 35, 76, 76, 77, 77, 78, 78, 79, 79, 
    80, 80, 81, 81, 82, 82, 83, 83, 84, 84, 85, 85, 86, 86, 87, 87, 
    88, 88, 89, 89, 90, 90, 91, 91, 90, 90, 92, 92, 93, 93, 35, 35, 
    94, 94, 95, 95, 96, 96, 97, 97, 98, 98, 99, 99, 100, 100, 101, 101, 
    102, 102, 103, 103, 104, 104, 105, 105, 106, 106
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\2\1\2\0\1\1\22\0\1\1\1\57\1\46\1\0\1\44"+
    "\1\0\1\0\1\47\1\52\1\50\1\14\1\5\1\42\1\12\1\3"+
    "\1\53\12\2\1\13\1\10\1\56\1\41\1\64\1\45\1\60\4\6"+
    "\1\4\1\6\24\6\1\61\1\0\1\63\1\0\1\6\1\0\1\25"+
    "\1\37\1\23\1\22\1\17\1\40\1\36\1\43\1\30\2\6\1\24"+
    "\1\26\1\35\1\27\1\31\1\15\1\20\1\34\1\32\1\16\1\33"+
    "\1\51\1\11\1\21\1\6\1\54\1\0\1\62\1\55\70\0\1\7"+
    "\10\0\27\6\1\0\37\6\1\0\72\6\2\0\13\6\2\0\10\6"+
    "\1\0\65\6\1\0\104\6\11\0\44\6\3\0\2\6\4\0\36\6"+
    "\70\0\131\6\22\0\7\6\16\0\2\7\56\0\106\7\32\0\2\7"+
    "\44\0\1\6\1\7\3\6\1\0\1\6\1\0\24\6\1\0\54\6"+
    "\1\0\7\6\3\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\22\6\15\0\14\6\1\0\102\6\1\0\14\6\1\0\44\6"+
    "\1\0\4\7\11\0\65\6\2\0\2\6\2\0\2\6\3\0\34\6"+
    "\2\0\10\6\2\0\2\6\67\0\46\6\2\0\1\6\7\0\46\6"+
    "\12\0\21\7\1\0\27\7\1\0\3\7\1\0\1\7\1\0\2\7"+
    "\1\0\1\7\13\0\33\6\5\0\3\6\56\0\32\6\5\0\1\7"+
    "\12\6\10\7\15\0\12\7\6\0\1\7\107\6\2\0\5\6\1\0"+
    "\17\6\1\0\4\6\1\0\1\6\17\7\2\6\2\7\1\0\4\7"+
    "\2\0\12\7\u0207\0\3\7\1\0\65\6\2\0\1\7\1\6\20\7"+
    "\3\0\4\7\3\0\12\6\2\7\2\0\12\7\21\0\3\7\1\0"+
    "\10\6\2\0\2\6\2\0\26\6\1\0\7\6\1\0\1\6\3\0"+
    "\4\6\2\0\1\7\1\0\7\7\2\0\2\7\2\0\3\7\11\0"+
    "\1\7\4\0\2\6\1\0\3\6\2\7\2\0\12\7\2\6\20\0"+
    "\1\7\2\0\6\6\4\0\2\6\2\0\26\6\1\0\7\6\1\0"+
    "\2\6\1\0\2\6\1\0\2\6\2\0\1\7\1\0\5\7\4\0"+
    "\2\7\2\0\3\7\13\0\4\6\1\0\1\6\7\0\12\7\2\7"+
    "\3\6\14\0\3\7\1\0\7\6\1\0\1\6\1\0\3\6\1\0"+
    "\26\6\1\0\7\6\1\0\2\6\1\0\5\6\2\0\1\7\1\6"+
    "\10\7\1\0\3\7\1\0\3\7\22\0\1\6\5\0\12\7\21\0"+
    "\3\7\1\0\10\6\2\0\2\6\2\0\26\6\1\0\7\6\1\0"+
    "\2\6\2\0\4\6\2\0\1\7\1\6\6\7\3\0\2\7\2\0"+
    "\3\7\10\0\2\7\4\0\2\6\1\0\3\6\4\0\12\7\22\0"+
    "\2\7\1\0\6\6\3\0\3\6\1\0\4\6\3\0\2\6\1\0"+
    "\1\6\1\0\2\6\3\0\2\6\3\0\3\6\3\0\10\6\1\0"+
    "\3\6\4\0\5\7\3\0\3\7\1\0\4\7\11\0\1\7\17\0"+
    "\11\7\21\0\3\7\1\0\10\6\1\0\3\6\1\0\27\6\1\0"+
    "\12\6\1\0\5\6\4\0\7\7\1\0\3\7\1\0\4\7\7\0"+
    "\2\7\11\0\2\6\4\0\12\7\22\0\2\7\1\0\10\6\1\0"+
    "\3\6\1\0\27\6\1\0\12\6\1\0\5\6\4\0\7\7\1\0"+
    "\3\7\1\0\4\7\7\0\2\7\7\0\1\6\1\0\2\6\4\0"+
    "\12\7\22\0\2\7\1\0\10\6\1\0\3\6\1\0\27\6\1\0"+
    "\20\6\4\0\6\7\2\0\3\7\1\0\4\7\11\0\1\7\10\0"+
    "\2\6\4\0\12\7\221\0\56\6\1\0\1\6\1\7\2\6\7\7"+
    "\5\0\6\6\1\7\10\7\1\0\12\7\47\0\2\6\1\0\1\6"+
    "\2\0\2\6\1\0\1\6\2\0\1\6\6\0\4\6\1\0\7\6"+
    "\1\0\3\6\1\0\1\6\1\0\1\6\2\0\2\6\1\0\2\6"+
    "\1\0\1\6\1\7\2\6\6\7\1\0\2\7\1\6\2\0\5\6"+
    "\1\0\1\7\1\0\6\7\2\0\12\7\76\0\2\7\6\0\12\7"+
    "\13\0\1\7\1\0\1\7\1\0\1\7\4\0\2\7\10\6\1\0"+
    "\41\6\7\0\24\7\1\0\6\7\4\0\6\7\1\0\1\7\1\0"+
    "\25\7\3\0\7\7\1\0\1\7\346\0\46\6\12\0\47\6\11\0"+
    "\1\6\1\0\2\6\1\0\3\6\1\0\1\6\1\0\2\6\1\0"+
    "\5\6\51\0\1\6\1\0\1\6\1\0\1\6\13\0\1\6\1\0"+
    "\1\6\1\0\1\6\3\0\2\6\3\0\1\6\5\0\3\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\3\0\2\6\3\0"+
    "\2\6\1\0\1\6\50\0\1\6\11\0\1\6\2\0\1\6\2\0"+
    "\2\6\7\0\2\6\1\0\1\6\1\0\7\6\50\0\1\6\4\0"+
    "\1\6\10\0\1\6\u0c06\0\234\6\4\0\132\6\6\0\26\6\2\0"+
    "\6\6\2\0\46\6\2\0\6\6\2\0\10\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\37\6\2\0\65\6\1\0\7\6\1\0"+
    "\1\6\3\0\3\6\1\0\7\6\3\0\4\6\2\0\6\6\4\0"+
    "\15\6\5\0\3\6\1\0\7\6\323\0\15\7\4\0\1\7\104\0"+
    "\1\6\3\0\2\6\2\0\1\6\121\0\3\6\u0e82\0\1\7\1\0"+
    "\1\6\31\0\11\6\6\7\1\0\5\7\13\0\124\6\4\0\2\7"+
    "\2\0\2\7\2\0\132\6\1\0\3\7\6\0\50\6\u1cd3\0\u51a6\6"+
    "\u0c5a\0\u2ba4\6\134\0\u0800\0\u1ffe\0\2\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\153\0\1\1\1\2\1\3\6\1\3\4\1\5\1\6"+
    "\2\1\1\7\1\10\2\11\1\1\1\12\12\1\1\13"+
    "\24\1\1\14\1\15\1\16\2\17\1\20\1\21\1\17"+
    "\13\22\1\23\1\24\1\25\1\26\2\1\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\10\36\1\37\1\40"+
    "\1\37\1\41\1\42\1\43\1\44\1\1\1\45\1\46"+
    "\4\1\1\47\3\1\1\50\1\51\1\1\1\52\1\53"+
    "\1\1\1\54\1\55\2\1\2\56\1\57\1\60\2\56"+
    "\1\61\2\1\1\62\1\63\1\64\1\65\11\63\1\66"+
    "\1\67\1\70\1\63\1\71\1\72\1\25\12\72\1\17"+
    "\1\73\6\1\1\74\1\17\2\1\1\75\3\1\1\76"+
    "\4\77\3\100\2\1\1\37\1\1\1\101\1\102\1\103"+
    "\1\104\1\105\1\106\1\107\1\1\1\110\1\111\1\112"+
    "\1\113\2\111\1\1\1\114\1\115\5\0\1\116\1\117"+
    "\1\120\3\0\1\121\1\122\27\0\1\123\11\0\1\124"+
    "\1\125\1\0\12\22\5\0\1\126\3\0\1\127\4\0"+
    "\1\130\4\0\1\125\2\0\1\131\2\0\1\132\1\0"+
    "\1\133\1\134\1\0\12\134\3\0\12\72\4\0\1\135"+
    "\1\136\3\0\1\137\7\0\1\140\1\141\1\142\1\143"+
    "\1\144\5\0\1\145\43\0\13\22\2\0\1\32\1\0"+
    "\1\146\2\0\1\147\12\0\1\150\1\0\1\151\1\0"+
    "\13\134\1\0\14\72\3\0\1\152\1\153\60\0\4\22"+
    "\1\154\1\22\1\155\1\156\1\22\1\157\4\0\1\160"+
    "\1\161\1\162\1\0\1\163\3\0\1\164\3\0\10\134"+
    "\1\165\1\134\1\166\4\72\1\154\1\72\1\155\1\156"+
    "\1\72\1\157\44\0\1\167\1\0\1\170\1\171\12\0"+
    "\1\172\6\22\3\0\1\173\6\0\2\134\1\174\6\134"+
    "\6\72\1\175\1\0\1\176\1\177\1\200\2\0\1\201"+
    "\1\202\3\0\1\203\1\0\1\204\1\205\11\0\1\206"+
    "\16\0\1\207\1\210\5\0\6\22\6\0\1\211\1\0"+
    "\1\212\7\134\6\72\4\0\1\213\1\214\1\0\1\215"+
    "\1\216\2\0\1\217\11\0\1\220\1\0\1\221\5\0"+
    "\1\222\1\0\1\223\2\0\1\224\1\22\1\225\3\22"+
    "\1\226\4\0\1\227\1\0\4\134\1\230\2\134\1\224"+
    "\1\72\1\225\3\72\5\0\1\231\3\0\1\232\1\233"+
    "\1\0\1\234\1\0\1\235\3\0\1\236\1\237\1\0"+
    "\1\240\2\0\1\241\5\22\4\0\1\242\3\134\1\243"+
    "\2\134\5\72\2\0\1\244\1\0\1\245\1\246\2\0"+
    "\1\247\3\0\1\250\1\251\1\252\1\253\1\22\1\254"+
    "\3\22\2\0\1\255\1\0\1\256\1\134\1\257\2\134"+
    "\1\260\1\72\1\254\3\72\1\0\1\261\1\262\4\0"+
    "\1\263\4\22\1\0\1\264\1\265\1\134\1\165\1\134"+
    "\4\72\1\266\3\0\1\267\4\22\1\0\3\134\4\72"+
    "\1\0\1\270\1\0\4\22\1\0\3\134\4\72\2\0"+
    "\1\271\3\22\1\0\3\134\1\271\3\72\1\0\1\272"+
    "\1\22\1\273\1\22\1\274\3\134\1\72\1\273\1\72"+
    "\1\275\2\22\3\134\2\72\1\22\1\276\1\277\2\134"+
    "\1\72\1\276\1\22\1\134\1\133\1\72\1\22\1\72"+
    "\1\22\1\72\1\22\1\72\1\22\1\72\2\300";

  private static int [] zzUnpackAction() {
    int [] result = new int[1052];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\u013e\0\u0173"+
    "\0\u01a8\0\u01dd\0\u0212\0\u0247\0\u027c\0\u02b1\0\u02e6\0\u031b"+
    "\0\u0350\0\u0385\0\u03ba\0\u03ef\0\u0424\0\u0459\0\u048e\0\u04c3"+
    "\0\u04f8\0\u052d\0\u0562\0\u0597\0\u05cc\0\u0601\0\u0636\0\u066b"+
    "\0\u06a0\0\u06d5\0\u070a\0\u073f\0\u0774\0\u07a9\0\u07de\0\u0813"+
    "\0\u0848\0\u087d\0\u08b2\0\u08e7\0\u091c\0\u0951\0\u0986\0\u09bb"+
    "\0\u09f0\0\u0a25\0\u0a5a\0\u0a8f\0\u0ac4\0\u0af9\0\u0b2e\0\u0b63"+
    "\0\u0b98\0\u0bcd\0\u0c02\0\u0c37\0\u0c6c\0\u0ca1\0\u0cd6\0\u0d0b"+
    "\0\u0d40\0\u0d75\0\u0daa\0\u0ddf\0\u0e14\0\u0e49\0\u0e7e\0\u0eb3"+
    "\0\u0ee8\0\u0f1d\0\u0f52\0\u0f87\0\u0fbc\0\u0ff1\0\u1026\0\u105b"+
    "\0\u1090\0\u10c5\0\u10fa\0\u112f\0\u1164\0\u1199\0\u11ce\0\u1203"+
    "\0\u1238\0\u126d\0\u12a2\0\u12d7\0\u130c\0\u1341\0\u1376\0\u13ab"+
    "\0\u13e0\0\u1415\0\u144a\0\u147f\0\u14b4\0\u14e9\0\u151e\0\u1553"+
    "\0\u1588\0\u15bd\0\u15f2\0\u1627\0\u165c\0\u1691\0\u16c6\0\u16fb"+
    "\0\u1730\0\u1765\0\u179a\0\u17cf\0\u1627\0\u1804\0\u1839\0\u1627"+
    "\0\u186e\0\u18a3\0\u18d8\0\u190d\0\u1627\0\u1942\0\u1977\0\u19ac"+
    "\0\u1627\0\u19e1\0\u1a16\0\u1a4b\0\u1a80\0\u1ab5\0\u1aea\0\u1b1f"+
    "\0\u1b54\0\u1b89\0\u1bbe\0\u1627\0\u1bf3\0\u1c28\0\u1c5d\0\u1c92"+
    "\0\u1cc7\0\u1cfc\0\u1d31\0\u1d66\0\u1d9b\0\u1dd0\0\u1e05\0\u1e3a"+
    "\0\u1e6f\0\u1ea4\0\u1ed9\0\u1f0e\0\u1f43\0\u1f78\0\u1fad\0\u1fe2"+
    "\0\u1627\0\u1627\0\u1627\0\u2017\0\u204c\0\u2017\0\u1627\0\u2081"+
    "\0\u20b6\0\u20eb\0\u2120\0\u2155\0\u218a\0\u21bf\0\u21f4\0\u2229"+
    "\0\u225e\0\u2293\0\u22c8\0\u1627\0\u1627\0\u1627\0\u1627\0\u22fd"+
    "\0\u2332\0\u1627\0\u2367\0\u1627\0\u239c\0\u1627\0\u1627\0\u1627"+
    "\0\u1627\0\u23d1\0\u2406\0\u243b\0\u2470\0\u24a5\0\u24da\0\u17cf"+
    "\0\u1627\0\u1627\0\u17cf\0\u1627\0\u17cf\0\u250f\0\u1627\0\u2544"+
    "\0\u17cf\0\u1627\0\u2579\0\u25ae\0\u25e3\0\u2618\0\u1627\0\u264d"+
    "\0\u2682\0\u26b7\0\u17cf\0\u1627\0\u26ec\0\u2721\0\u1627\0\u2756"+
    "\0\u278b\0\u1627\0\u27c0\0\u27f5\0\u1627\0\u165c\0\u1627\0\u1627"+
    "\0\u282a\0\u17cf\0\u285f\0\u2894\0\u28c9\0\u1627\0\u1627\0\u28fe"+
    "\0\u2933\0\u2968\0\u299d\0\u29d2\0\u2a07\0\u2a3c\0\u2a71\0\u2aa6"+
    "\0\u2adb\0\u2b10\0\u1627\0\u1627\0\u17cf\0\u2b45\0\u1627\0\u2b7a"+
    "\0\u2baf\0\u2be4\0\u2c19\0\u2c4e\0\u2c83\0\u2cb8\0\u2ced\0\u2d22"+
    "\0\u2d57\0\u2d8c\0\u2dc1\0\u2df6\0\u1627\0\u2406\0\u2e2b\0\u2e60"+
    "\0\u24da\0\u2e95\0\u2eca\0\u2017\0\u2eff\0\u2f34\0\u2f69\0\u2017"+
    "\0\u2f9e\0\u2fd3\0\u3008\0\u1627\0\u1627\0\u303d\0\u3072\0\u17cf"+
    "\0\u1627\0\u30a7\0\u17cf\0\u30dc\0\u3111\0\u3146\0\u317b\0\u17cf"+
    "\0\u17cf\0\u1627\0\u1627\0\u1627\0\u1627\0\u1627\0\u31b0\0\u31e5"+
    "\0\u321a\0\u1627\0\u1627\0\u324f\0\u3284\0\u32b9\0\u1627\0\u32ee"+
    "\0\u3323\0\u3358\0\u338d\0\u33c2\0\u33f7\0\u1627\0\u1627\0\u1627"+
    "\0\u342c\0\u3461\0\u3496\0\u1627\0\u1627\0\u34cb\0\u3500\0\u3535"+
    "\0\u356a\0\u359f\0\u35d4\0\u3609\0\u363e\0\u3673\0\u36a8\0\u36dd"+
    "\0\u3712\0\u3747\0\u377c\0\u37b1\0\u37e6\0\u381b\0\u3850\0\u3885"+
    "\0\u38ba\0\u38ef\0\u3924\0\u3959\0\u1627\0\u398e\0\u39c3\0\u39f8"+
    "\0\u3a2d\0\u3a62\0\u3a97\0\u3acc\0\u3b01\0\u3b36\0\u2017\0\u2017"+
    "\0\u3b6b\0\u3ba0\0\u3bd5\0\u3c0a\0\u3c3f\0\u3c74\0\u3ca9\0\u3cde"+
    "\0\u3d13\0\u3d48\0\u3d7d\0\u3db2\0\u3de7\0\u3e1c\0\u3e51\0\u3e86"+
    "\0\u1627\0\u3ebb\0\u3ef0\0\u3f25\0\u1627\0\u3f5a\0\u3f8f\0\u3fc4"+
    "\0\u3ff9\0\u1627\0\u402e\0\u4063\0\u4098\0\u40cd\0\u1627\0\u4102"+
    "\0\u4137\0\u1627\0\u416c\0\u41a1\0\u41d6\0\u420b\0\u1627\0\u2968"+
    "\0\u4240\0\u4275\0\u42aa\0\u42df\0\u4314\0\u4349\0\u437e\0\u43b3"+
    "\0\u43e8\0\u441d\0\u4452\0\u4487\0\u44bc\0\u44f1\0\u4526\0\u455b"+
    "\0\u4590\0\u45c5\0\u45fa\0\u462f\0\u4664\0\u4699\0\u46ce\0\u4703"+
    "\0\u4738\0\u476d\0\u47a2\0\u47d7\0\u2017\0\u1627\0\u480c\0\u4841"+
    "\0\u4876\0\u1627\0\u48ab\0\u48e0\0\u4915\0\u494a\0\u497f\0\u49b4"+
    "\0\u49e9\0\u1627\0\u1627\0\u1627\0\u1627\0\u4a1e\0\u4a1e\0\u4a53"+
    "\0\u4a88\0\u4abd\0\u4af2\0\u1627\0\u4b27\0\u4b5c\0\u4b91\0\u4bc6"+
    "\0\u4bfb\0\u4c30\0\u4c65\0\u4c9a\0\u4ccf\0\u4d04\0\u4d39\0\u4d6e"+
    "\0\u4da3\0\u4dd8\0\u4e0d\0\u4e42\0\u4e77\0\u4eac\0\u4ee1\0\u4f16"+
    "\0\u4f4b\0\u4f80\0\u4fb5\0\u4fea\0\u501f\0\u5054\0\u5089\0\u50be"+
    "\0\u50f3\0\u5128\0\u515d\0\u5192\0\u51c7\0\u51fc\0\u5231\0\u5266"+
    "\0\u529b\0\u52d0\0\u5305\0\u533a\0\u536f\0\u53a4\0\u53d9\0\u540e"+
    "\0\u5443\0\u5478\0\u54ad\0\u54e2\0\u5517\0\u554c\0\u1627\0\u5581"+
    "\0\u55b6\0\u1627\0\u55eb\0\u5620\0\u5655\0\u568a\0\u56bf\0\u56f4"+
    "\0\u5729\0\u575e\0\u5793\0\u57c8\0\u1627\0\u57fd\0\u5832\0\u5832"+
    "\0\u5867\0\u589c\0\u58d1\0\u5906\0\u593b\0\u5970\0\u59a5\0\u59da"+
    "\0\u5a0f\0\u5a44\0\u5a79\0\u5aae\0\u5ae3\0\u1627\0\u5b18\0\u5b4d"+
    "\0\u5b82\0\u5bb7\0\u5bec\0\u5c21\0\u5c56\0\u5c8b\0\u5cc0\0\u5cf5"+
    "\0\u5d2a\0\u5d5f\0\u5d94\0\u1627\0\u1627\0\u5dc9\0\u5dfe\0\u5e33"+
    "\0\u5e68\0\u5e9d\0\u5ed2\0\u5f07\0\u5f3c\0\u5f71\0\u5fa6\0\u5fdb"+
    "\0\u6010\0\u6045\0\u607a\0\u60af\0\u60e4\0\u6119\0\u614e\0\u6183"+
    "\0\u61b8\0\u61ed\0\u6222\0\u6257\0\u628c\0\u62c1\0\u62f6\0\u632b"+
    "\0\u6360\0\u6395\0\u63ca\0\u63ff\0\u6434\0\u6469\0\u649e\0\u64d3"+
    "\0\u6508\0\u653d\0\u6572\0\u65a7\0\u65dc\0\u6611\0\u6646\0\u667b"+
    "\0\u66b0\0\u66e5\0\u671a\0\u674f\0\u6784\0\u67b9\0\u67ee\0\u6823"+
    "\0\u6858\0\u20b6\0\u688d\0\u20b6\0\u20b6\0\u68c2\0\u20b6\0\u68f7"+
    "\0\u692c\0\u6961\0\u6996\0\u1627\0\u1627\0\u1627\0\u69cb\0\u1627"+
    "\0\u6a00\0\u6a35\0\u6a6a\0\u1627\0\u6a9f\0\u6ad4\0\u6b09\0\u6b3e"+
    "\0\u6b73\0\u6ba8\0\u6bdd\0\u6c12\0\u6c47\0\u6c7c\0\u6cb1\0\u2968"+
    "\0\u6ce6\0\u1627\0\u6d1b\0\u6d50\0\u6d85\0\u6dba\0\u2b7a\0\u6def"+
    "\0\u2b7a\0\u2b7a\0\u6e24\0\u2b7a\0\u6e59\0\u6e8e\0\u6ec3\0\u6ef8"+
    "\0\u6f2d\0\u6f62\0\u6f97\0\u6fcc\0\u7001\0\u7036\0\u706b\0\u70a0"+
    "\0\u70d5\0\u710a\0\u713f\0\u7174\0\u71a9\0\u71de\0\u7213\0\u7248"+
    "\0\u727d\0\u72b2\0\u72e7\0\u731c\0\u7351\0\u7386\0\u73bb\0\u73f0"+
    "\0\u7425\0\u745a\0\u748f\0\u74c4\0\u74f9\0\u752e\0\u7563\0\u7598"+
    "\0\u1627\0\u75cd\0\u1627\0\u1627\0\u7602\0\u7637\0\u766c\0\u76a1"+
    "\0\u76d6\0\u770b\0\u7740\0\u7775\0\u77aa\0\u77df\0\u1627\0\u7814"+
    "\0\u7849\0\u787e\0\u78b3\0\u78e8\0\u791d\0\u7952\0\u7987\0\u79bc"+
    "\0\u1627\0\u79f1\0\u7a26\0\u7a5b\0\u7a90\0\u7ac5\0\u7afa\0\u7b2f"+
    "\0\u7b64\0\u2968\0\u7b99\0\u7bce\0\u7c03\0\u7c38\0\u7c6d\0\u7ca2"+
    "\0\u7cd7\0\u7d0c\0\u7d41\0\u7d76\0\u7dab\0\u7de0\0\u1627\0\u7e15"+
    "\0\u1627\0\u1627\0\u1627\0\u7e4a\0\u7e7f\0\u1627\0\u1627\0\u7eb4"+
    "\0\u7ee9\0\u7f1e\0\u1627\0\u7f53\0\u1627\0\u1627\0\u7f88\0\u7fbd"+
    "\0\u7ff2\0\u8027\0\u805c\0\u8091\0\u80c6\0\u80fb\0\u8130\0\u1627"+
    "\0\u8165\0\u819a\0\u81cf\0\u8204\0\u8239\0\u826e\0\u82a3\0\u82d8"+
    "\0\u830d\0\u8342\0\u8377\0\u83ac\0\u83e1\0\u8416\0\u1627\0\u1627"+
    "\0\u844b\0\u8480\0\u84b5\0\u84ea\0\u851f\0\u8554\0\u8589\0\u85be"+
    "\0\u85f3\0\u8628\0\u865d\0\u8692\0\u86c7\0\u86fc\0\u8731\0\u8766"+
    "\0\u879b\0\u1627\0\u87d0\0\u1627\0\u8805\0\u883a\0\u886f\0\u88a4"+
    "\0\u88d9\0\u890e\0\u8943\0\u8978\0\u89ad\0\u89e2\0\u8a17\0\u8a4c"+
    "\0\u8a81\0\u8ab6\0\u8aeb\0\u8b20\0\u8b55\0\u1627\0\u1627\0\u8b8a"+
    "\0\u1627\0\u1627\0\u8bbf\0\u8bf4\0\u1627\0\u8c29\0\u8c5e\0\u8c93"+
    "\0\u8cc8\0\u8cfd\0\u8d32\0\u8d67\0\u8d9c\0\u8dd1\0\u1627\0\u8e06"+
    "\0\u1627\0\u8e3b\0\u8e70\0\u8ea5\0\u8eda\0\u8f0f\0\u1627\0\u8f44"+
    "\0\u1627\0\u8f79\0\u8fae\0\u20b6\0\u8fe3\0\u20b6\0\u9018\0\u904d"+
    "\0\u9082\0\u1627\0\u90b7\0\u90ec\0\u9121\0\u9156\0\u1627\0\u918b"+
    "\0\u91c0\0\u91f5\0\u922a\0\u925f\0\u2968\0\u9294\0\u92c9\0\u2b7a"+
    "\0\u92fe\0\u2b7a\0\u9333\0\u9368\0\u939d\0\u93d2\0\u9407\0\u943c"+
    "\0\u9471\0\u94a6\0\u1627\0\u94db\0\u9510\0\u9545\0\u1627\0\u1627"+
    "\0\u957a\0\u1627\0\u95af\0\u1627\0\u95e4\0\u9619\0\u964e\0\u1627"+
    "\0\u1627\0\u9683\0\u1627\0\u96b8\0\u96ed\0\u1627\0\u9722\0\u9757"+
    "\0\u978c\0\u97c1\0\u97f6\0\u982b\0\u9860\0\u9895\0\u98ca\0\u1627"+
    "\0\u98ff\0\u9934\0\u9969\0\u999e\0\u99d3\0\u9a08\0\u9a3d\0\u9a72"+
    "\0\u9aa7\0\u9adc\0\u9b11\0\u9b46\0\u9b7b\0\u1627\0\u9bb0\0\u1627"+
    "\0\u1627\0\u9be5\0\u9c1a\0\u1627\0\u9c4f\0\u9c84\0\u9cb9\0\u1627"+
    "\0\u1627\0\u1627\0\u1627\0\u9cee\0\u20b6\0\u9d23\0\u9d58\0\u9d8d"+
    "\0\u9dc2\0\u9df7\0\u1627\0\u9e2c\0\u2968\0\u9e61\0\u2968\0\u9e96"+
    "\0\u9ecb\0\u9f00\0\u9f35\0\u2b7a\0\u9f6a\0\u9f9f\0\u9fd4\0\ua009"+
    "\0\u1627\0\u1627\0\ua03e\0\ua073\0\ua0a8\0\ua0dd\0\u1627\0\ua112"+
    "\0\ua147\0\ua17c\0\ua1b1\0\ua1e6\0\u1627\0\u1627\0\ua21b\0\ua250"+
    "\0\ua285\0\ua2ba\0\ua2ef\0\ua324\0\ua359\0\u1627\0\ua38e\0\ua3c3"+
    "\0\ua3f8\0\u1627\0\ua42d\0\ua462\0\ua497\0\ua4cc\0\ua501\0\ua536"+
    "\0\ua56b\0\ua5a0\0\ua5d5\0\ua60a\0\ua63f\0\ua674\0\ua6a9\0\u1627"+
    "\0\ua6de\0\ua713\0\ua748\0\ua77d\0\ua7b2\0\ua7e7\0\ua81c\0\ua851"+
    "\0\ua886\0\ua8bb\0\ua8f0\0\ua925\0\ua95a\0\ua98f\0\ua9c4\0\u20b6"+
    "\0\ua9f9\0\uaa2e\0\uaa63\0\uaa98\0\uaacd\0\uab02\0\uab37\0\u2b7a"+
    "\0\uab6c\0\uaba1\0\uabd6\0\uac0b\0\u1627\0\uac40\0\u20b6\0\uac75"+
    "\0\u1627\0\uacaa\0\uacdf\0\uad14\0\uad49\0\u2b7a\0\uad7e\0\u1627"+
    "\0\uadb3\0\uade8\0\uae1d\0\uae52\0\uae87\0\uaebc\0\uaef1\0\uaf26"+
    "\0\u20b6\0\u2968\0\uaf5b\0\uaf90\0\uafc5\0\u2b7a\0\uaffa\0\ub02f"+
    "\0\u2968\0\ub064\0\ub099\0\ub0ce\0\ub103\0\ub138\0\ub16d\0\ub1a2"+
    "\0\ub1d7\0\ub20c\0\u20b6\0\u2b7a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[1052];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\154\1\155\1\156\1\157\5\154\1\160\10\154\1\161"+
    "\3\154\1\162\1\154\1\163\21\154\1\164\12\154\13\165"+
    "\1\166\36\165\1\167\12\165\12\170\1\171\52\170\1\154"+
    "\1\155\14\154\1\172\10\154\1\173\22\154\1\164\13\154"+
    "\1\155\2\154\1\174\1\154\1\174\2\154\1\174\3\154"+
    "\24\174\2\154\1\174\5\154\1\174\1\164\12\154\46\175"+
    "\1\176\65\175\1\177\15\175\1\154\1\155\31\154\1\200"+
    "\16\154\1\164\13\154\1\155\6\154\1\201\6\154\1\202"+
    "\32\154\1\164\13\154\1\155\33\154\1\203\14\154\1\164"+
    "\13\154\1\155\20\154\1\204\1\205\3\154\1\206\3\154"+
    "\1\207\1\154\1\210\1\154\1\211\12\154\1\164\13\154"+
    "\1\155\27\154\1\212\3\154\1\213\14\154\1\164\13\154"+
    "\1\155\40\154\1\214\7\154\1\164\13\154\1\155\26\154"+
    "\1\215\4\154\1\216\14\154\1\164\13\154\1\155\15\154"+
    "\1\217\3\154\1\220\3\154\1\221\10\154\1\222\11\154"+
    "\1\164\13\154\1\155\15\154\1\223\32\154\1\164\13\154"+
    "\1\155\22\154\1\224\11\154\1\225\13\154\1\164\13\154"+
    "\1\155\33\154\1\226\14\154\1\164\13\154\1\155\11\154"+
    "\1\227\3\154\1\230\32\154\1\164\13\154\1\155\24\154"+
    "\1\231\5\154\1\232\15\154\1\164\13\154\1\155\20\154"+
    "\1\233\12\154\1\234\14\154\1\164\13\154\1\155\15\154"+
    "\1\235\32\154\1\164\13\154\1\155\33\154\1\236\14\154"+
    "\1\164\13\154\1\155\33\154\1\234\14\154\1\164\13\154"+
    "\1\155\27\154\1\237\2\154\1\240\15\154\1\164\13\154"+
    "\1\155\44\154\1\241\1\242\2\154\1\164\13\154\1\155"+
    "\37\154\1\243\10\154\1\164\12\154\1\244\1\155\23\244"+
    "\1\245\40\244\1\155\40\244\1\246\22\244\1\154\1\155"+
    "\42\154\1\247\5\154\1\164\12\154\1\244\1\155\23\244"+
    "\1\250\37\244\1\154\1\155\2\154\1\251\1\154\1\251"+
    "\2\154\1\251\3\154\2\251\1\252\2\251\1\253\1\254"+
    "\1\251\1\255\2\251\1\256\1\257\1\260\1\261\1\262"+
    "\1\263\3\251\2\154\1\251\5\154\1\251\1\164\12\154"+
    "\5\264\1\265\6\264\1\266\30\264\1\267\17\264\1\154"+
    "\1\155\15\154\1\270\14\154\1\271\13\154\1\272\1\154"+
    "\1\164\13\154\1\155\2\154\1\273\1\154\1\273\2\154"+
    "\1\273\3\154\24\273\2\154\1\273\2\154\2\274\1\272"+
    "\1\273\1\164\13\154\1\155\50\154\1\164\13\154\1\155"+
    "\2\154\1\275\1\154\1\275\2\154\1\275\2\154\1\276"+
    "\24\275\2\154\1\275\4\154\1\272\1\275\1\164\13\154"+
    "\1\155\40\154\1\277\5\154\1\272\1\154\1\164\13\154"+
    "\1\155\43\154\1\300\2\154\1\272\1\154\1\164\12\154"+
    "\1\301\1\155\15\301\1\302\4\301\1\303\3\301\1\304"+
    "\1\301\1\305\1\301\1\306\3\301\1\307\11\301\1\310"+
    "\12\301\1\311\1\155\40\311\1\312\7\311\1\313\12\311"+
    "\1\154\1\155\50\154\1\164\1\154\1\314\11\154\1\155"+
    "\50\154\1\315\12\154\1\316\1\155\46\316\1\317\14\316"+
    "\1\154\1\155\26\154\1\320\21\154\1\164\13\154\1\155"+
    "\50\154\1\321\13\154\1\155\46\154\1\322\1\154\1\164"+
    "\13\154\1\155\30\154\1\323\17\154\1\164\13\154\1\155"+
    "\15\154\1\324\32\154\1\164\13\154\1\155\15\154\1\325"+
    "\14\154\1\326\15\154\1\164\12\154\1\311\1\155\40\311"+
    "\1\327\7\311\1\313\12\311\1\154\1\155\26\154\1\330"+
    "\21\154\1\164\13\154\1\155\32\154\1\331\15\154\1\164"+
    "\13\154\1\155\30\154\1\332\17\154\1\164\13\154\1\155"+
    "\50\154\1\333\13\154\1\155\46\154\1\334\1\154\1\164"+
    "\13\154\1\155\20\154\1\335\27\154\1\164\12\154\1\336"+
    "\1\155\42\336\1\337\20\336\1\154\1\155\21\154\1\340"+
    "\26\154\1\164\13\154\1\155\20\154\1\335\1\340\26\154"+
    "\1\164\12\154\1\341\1\155\42\341\1\342\20\341\1\154"+
    "\1\155\23\154\1\343\24\154\1\164\13\154\1\155\16\154"+
    "\1\344\31\154\1\164\12\154\1\345\1\346\3\345\1\347"+
    "\4\345\1\350\20\345\1\351\16\345\1\352\1\353\11\345"+
    "\1\154\1\155\22\154\1\354\7\154\1\355\15\154\1\164"+
    "\1\154\1\314\11\154\1\155\50\154\1\164\2\154\1\356"+
    "\7\154\1\357\1\155\1\360\1\361\1\362\1\357\1\362"+
    "\2\357\1\362\3\357\1\362\1\363\3\362\1\364\1\365"+
    "\1\362\1\366\1\362\1\367\1\362\1\370\2\362\1\371"+
    "\3\362\1\372\2\357\1\362\1\373\1\357\2\374\1\357"+
    "\1\362\1\375\3\357\1\376\1\357\1\377\4\357\1\154"+
    "\1\155\2\154\1\u0100\1\154\1\u0100\2\154\1\u0100\2\154"+
    "\1\u0101\2\u0100\1\u0102\2\u0100\1\u0103\1\u0104\1\u0100\1\u0105"+
    "\2\u0100\1\u0106\1\u0107\1\u0108\1\u0109\1\u010a\1\u010b\3\u0100"+
    "\2\154\1\u0100\5\154\1\u0100\1\164\12\154\1\u010c\1\155"+
    "\57\u010c\1\u010d\3\u010c\1\154\1\155\16\154\1\344\3\154"+
    "\1\u010e\2\154\1\u010f\4\154\1\u0110\3\154\1\u0111\10\154"+
    "\1\u0112\1\164\13\154\1\155\47\154\1\u0112\1\164\13\154"+
    "\1\155\25\154\1\u010f\4\154\1\u0110\14\154\1\u0112\1\164"+
    "\13\154\1\155\16\154\1\344\6\154\1\u010f\4\154\1\u0110"+
    "\14\154\1\u0112\1\164\13\154\1\155\36\154\1\u0113\11\154"+
    "\1\164\12\154\1\244\1\155\40\244\1\u0114\23\244\1\155"+
    "\23\244\1\u0115\37\244\1\154\1\155\26\154\1\u0116\21\154"+
    "\1\164\13\154\1\155\22\154\1\u0117\25\154\1\164\12\154"+
    "\1\244\1\155\40\244\1\u0118\22\244\1\154\1\155\11\154"+
    "\1\227\36\154\1\164\13\154\1\155\47\154\1\u0119\1\164"+
    "\13\154\1\155\25\154\1\u011a\22\154\1\164\13\154\1\155"+
    "\35\154\1\u011b\12\154\1\164\12\154\1\311\1\155\40\311"+
    "\1\u011c\7\311\1\313\12\311\1\u011d\1\155\20\u011d\1\u011e"+
    "\2\u011d\1\u011f\24\u011d\1\u0120\12\u011d\1\u0121\1\155\15\u0121"+
    "\1\u0122\32\u0121\1\u0123\12\u0121\1\154\1\155\22\154\1\u0124"+
    "\11\154\1\u0125\13\154\1\164\12\154\1\311\1\155\21\311"+
    "\1\u0126\26\311\1\313\12\311\1\154\1\155\32\154\1\u0127"+
    "\15\154\1\164\13\154\1\155\50\154\1\u0128\13\154\1\155"+
    "\46\154\1\317\1\154\1\164\13\154\1\155\50\154\1\u0129"+
    "\13\154\1\155\50\154\1\164\1\154\1\u012a\11\154\1\155"+
    "\50\154\1\164\7\154\1\u012b\3\154\1\155\50\154\1\164"+
    "\10\154\1\u012c\2\154\1\155\6\154\1\201\41\154\1\164"+
    "\13\154\1\155\42\154\1\u012d\5\154\1\164\13\154\1\155"+
    "\12\154\1\266\35\154\1\164\13\154\1\155\11\154\1\u012e"+
    "\36\154\1\164\13\154\1\155\11\154\1\u012f\36\154\1\164"+
    "\13\154\1\155\2\154\1\u0130\1\154\1\u0130\2\154\1\u0130"+
    "\3\154\24\u0130\2\154\1\u0130\5\154\1\u0130\1\164\13\154"+
    "\1\155\2\154\1\u0131\1\154\1\u0131\2\154\1\u0131\3\154"+
    "\24\u0131\2\154\1\u0131\5\154\1\u0131\1\164\12\154\13\u0132"+
    "\1\u0133\55\u0132\1\u0134\1\u0132\1\u0134\2\u0132\1\u0134\3\u0132"+
    "\24\u0134\2\u0132\1\u0134\5\u0132\1\u0134\13\u0132\1\154\1\155"+
    "\2\154\1\u0135\1\154\1\u0135\2\154\1\u0135\2\154\1\u0136"+
    "\24\u0135\2\154\1\u0135\5\154\1\u0135\1\164\12\154\13\u0132"+
    "\1\u0137\55\u0132\1\u0134\1\u0132\1\u0134\2\u0132\1\u0134\2\u0132"+
    "\1\266\24\u0134\2\u0132\1\u0134\5\u0132\1\u0134\13\u0132\66\0"+
    "\1\155\65\0\1\156\1\u0138\1\u0139\12\0\1\u0139\47\0"+
    "\1\u0138\77\0\1\u013a\66\0\1\u013b\74\0\1\u013c\63\0"+
    "\1\u013d\51\0\1\u013e\121\0\1\u013f\27\0\1\u0140\51\0"+
    "\12\170\1\u0141\52\170\35\0\1\u0142\47\0\1\u0143\46\0"+
    "\3\174\1\0\2\174\1\0\2\174\2\0\24\174\2\0"+
    "\1\174\5\0\1\174\61\0\1\u0144\65\0\1\u0145\34\0"+
    "\1\u0146\102\0\1\u0147\54\0\1\u0148\56\0\1\u0149\74\0"+
    "\1\u014a\55\0\1\u014b\10\0\1\u014c\60\0\1\u014d\64\0"+
    "\1\u014e\64\0\1\u014f\1\0\1\u0150\55\0\1\u0151\73\0"+
    "\1\u0152\72\0\1\u0153\56\0\1\u0154\61\0\1\u0155\67\0"+
    "\1\u0156\55\0\1\u0157\62\0\1\u0158\74\0\1\u0159\55\0"+
    "\1\u015a\65\0\1\u015b\71\0\1\u015c\100\0\1\u015d\34\0"+
    "\1\u015e\102\0\1\u015f\60\0\1\u0160\60\0\1\u0161\72\0"+
    "\1\u0162\63\0\1\u0163\65\0\1\u0164\57\0\1\u0165\76\0"+
    "\1\u0166\32\0\1\244\1\0\64\244\1\0\30\244\1\u0167"+
    "\33\244\1\0\32\244\1\u0168\30\244\2\0\3\251\1\0"+
    "\2\251\1\0\2\251\1\u0169\1\0\24\251\2\0\1\251"+
    "\5\0\1\251\15\0\3\251\1\0\2\251\1\0\2\251"+
    "\1\u0169\1\0\7\251\1\u016a\14\251\2\0\1\251\5\0"+
    "\1\251\15\0\3\251\1\0\2\251\1\0\2\251\1\u0169"+
    "\1\0\12\251\1\u016b\11\251\2\0\1\251\5\0\1\251"+
    "\15\0\3\251\1\0\2\251\1\0\2\251\1\u0169\1\0"+
    "\12\251\1\u016c\11\251\2\0\1\251\5\0\1\251\15\0"+
    "\3\251\1\0\2\251\1\0\2\251\1\u0169\1\0\15\251"+
    "\1\u016d\6\251\2\0\1\251\5\0\1\251\15\0\3\251"+
    "\1\0\2\251\1\0\2\251\1\u0169\1\0\15\251\1\u016e"+
    "\6\251\2\0\1\251\5\0\1\251\15\0\3\251\1\0"+
    "\2\251\1\0\2\251\1\u0169\1\0\3\251\1\u016f\20\251"+
    "\2\0\1\251\5\0\1\251\15\0\3\251\1\0\2\251"+
    "\1\0\2\251\1\u0169\1\0\2\251\1\u0170\21\251\2\0"+
    "\1\251\5\0\1\251\15\0\3\251\1\0\2\251\1\0"+
    "\2\251\1\u0169\1\0\12\251\1\u0171\11\251\2\0\1\251"+
    "\5\0\1\251\15\0\3\251\1\0\2\251\1\0\2\251"+
    "\1\u0169\1\0\6\251\1\u0172\15\251\2\0\1\251\5\0"+
    "\1\251\15\0\3\251\1\0\2\251\1\0\2\251\1\u0169"+
    "\1\0\12\251\1\u0173\11\251\2\0\1\251\5\0\1\251"+
    "\37\0\1\u0174\63\0\1\u0175\43\0\3\273\1\0\2\273"+
    "\1\0\2\273\2\0\24\273\2\0\1\273\5\0\1\273"+
    "\15\0\3\275\1\0\2\275\1\0\2\275\1\u0176\1\0"+
    "\24\275\2\0\1\275\5\0\1\275\46\0\1\u0177\50\0"+
    "\1\u0178\105\0\1\u0179\45\0\1\u017a\72\0\1\u017b\64\0"+
    "\1\u017c\35\0\1\316\1\0\46\316\1\0\14\316\40\0"+
    "\1\u017d\67\0\1\u017e\45\0\1\u017f\73\0\1\u0180\60\0"+
    "\1\u0181\72\0\1\u0182\54\0\1\u0183\60\0\1\u0184\62\0"+
    "\1\u0185\45\0\1\336\1\0\42\336\1\0\20\336\25\0"+
    "\1\u0186\37\0\1\341\1\0\42\341\1\0\20\341\34\0"+
    "\1\u0187\47\0\1\u0188\72\0\1\u0189\112\0\1\u018a\36\0"+
    "\1\u018b\71\0\1\u018c\34\0\1\360\1\u018d\1\u018e\12\0"+
    "\1\u018e\47\0\1\u018d\1\u018f\63\0\3\u0190\1\0\2\u0190"+
    "\1\0\2\u0190\1\u0191\1\0\24\u0190\2\0\1\u0190\5\0"+
    "\1\u0190\15\0\3\u0190\1\0\2\u0190\1\0\2\u0190\1\u0191"+
    "\1\0\20\u0190\1\u0192\3\u0190\2\0\1\u0190\5\0\1\u0190"+
    "\15\0\3\u0190\1\0\2\u0190\1\0\2\u0190\1\u0191\1\0"+
    "\2\u0190\1\u0193\21\u0190\2\0\1\u0190\5\0\1\u0190\15\0"+
    "\3\u0190\1\0\2\u0190\1\0\2\u0190\1\u0191\1\0\24\u0190"+
    "\2\0\1\u0194\5\0\1\u0190\15\0\3\u0190\1\0\2\u0190"+
    "\1\0\2\u0190\1\u0191\1\0\15\u0190\1\u0195\2\u0190\1\u0196"+
    "\3\u0190\2\0\1\u0190\5\0\1\u0190\15\0\3\u0190\1\0"+
    "\2\u0190\1\0\2\u0190\1\u0191\1\0\3\u0190\1\u0197\20\u0190"+
    "\2\0\1\u0190\5\0\1\u0190\15\0\3\u0190\1\0\2\u0190"+
    "\1\0\2\u0190\1\u0191\1\0\3\u0190\1\u0198\4\u0190\1\u0199"+
    "\13\u0190\2\0\1\u0190\5\0\1\u0190\15\0\3\u0190\1\0"+
    "\2\u0190\1\0\2\u0190\1\u0191\1\0\2\u0190\1\u019a\21\u0190"+
    "\2\0\1\u0190\5\0\1\u0190\15\0\3\u0190\1\0\2\u0190"+
    "\1\0\2\u0190\1\u0191\1\0\12\u0190\1\u019b\11\u0190\2\0"+
    "\1\u0190\5\0\1\u0190\72\0\1\u019c\7\0\3\u0100\1\0"+
    "\2\u0100\1\0\2\u0100\1\u019d\1\0\24\u0100\2\0\1\u0100"+
    "\5\0\1\u0100\26\0\1\u019e\53\0\3\u0100\1\0\2\u0100"+
    "\1\0\2\u0100\1\u019d\1\0\7\u0100\1\u019f\14\u0100\2\0"+
    "\1\u0100\5\0\1\u0100\15\0\3\u0100\1\0\2\u0100\1\0"+
    "\2\u0100\1\u019d\1\0\12\u0100\1\u01a0\11\u0100\2\0\1\u0100"+
    "\5\0\1\u0100\15\0\3\u0100\1\0\2\u0100\1\0\2\u0100"+
    "\1\u019d\1\0\12\u0100\1\u01a1\11\u0100\2\0\1\u0100\5\0"+
    "\1\u0100\15\0\3\u0100\1\0\2\u0100\1\0\2\u0100\1\u019d"+
    "\1\0\15\u0100\1\u01a2\6\u0100\2\0\1\u0100\5\0\1\u0100"+
    "\15\0\3\u0100\1\0\2\u0100\1\0\2\u0100\1\u019d\1\0"+
    "\15\u0100\1\u01a3\6\u0100\2\0\1\u0100\5\0\1\u0100\15\0"+
    "\3\u0100\1\0\2\u0100\1\0\2\u0100\1\u019d\1\0\3\u0100"+
    "\1\u01a4\20\u0100\2\0\1\u0100\5\0\1\u0100\15\0\3\u0100"+
    "\1\0\2\u0100\1\0\2\u0100\1\u019d\1\0\2\u0100\1\u01a5"+
    "\21\u0100\2\0\1\u0100\5\0\1\u0100\15\0\3\u0100\1\0"+
    "\2\u0100\1\0\2\u0100\1\u019d\1\0\12\u0100\1\u01a6\11\u0100"+
    "\2\0\1\u0100\5\0\1\u0100\15\0\3\u0100\1\0\2\u0100"+
    "\1\0\2\u0100\1\u019d\1\0\6\u0100\1\u01a7\15\u0100\2\0"+
    "\1\u0100\5\0\1\u0100\15\0\3\u0100\1\0\2\u0100\1\0"+
    "\2\u0100\1\u019d\1\0\12\u0100\1\u01a8\11\u0100\2\0\1\u0100"+
    "\5\0\1\u0100\13\0\1\u010c\1\0\57\u010c\1\0\3\u010c"+
    "\20\0\1\u01a9\76\0\1\u01aa\75\0\1\u01ab\50\0\1\u01ac"+
    "\35\0\1\244\1\0\30\244\1\u01ad\32\244\35\0\1\u01ae"+
    "\46\0\1\u01af\110\0\1\u01b0\41\0\1\u01b1\65\0\1\u01b2"+
    "\62\0\1\u01b3\101\0\1\u01b4\56\0\1\u01b5\55\0\1\u01b6"+
    "\65\0\1\u01b7\73\0\1\u01b8\67\0\1\u01b9\45\0\1\u01ba"+
    "\53\0\3\u0130\1\0\2\u0130\1\0\2\u0130\2\0\24\u0130"+
    "\2\0\1\u0130\5\0\1\u0130\15\0\3\u0131\1\0\2\u0131"+
    "\1\0\2\u0131\1\u01bb\1\0\24\u0131\2\0\1\u0131\5\0"+
    "\1\u0131\15\0\3\u0134\1\0\2\u0134\1\0\2\u0134\2\0"+
    "\24\u0134\2\0\1\u0134\5\0\1\u0134\15\0\3\u0135\1\0"+
    "\2\u0135\1\0\2\u0135\1\u01bc\1\0\24\u0135\2\0\1\u0135"+
    "\5\0\1\u0135\26\0\1\u01bd\53\0\1\u0138\1\0\1\u0139"+
    "\12\0\1\u0139\47\0\1\u01be\2\0\1\u01bf\4\0\1\u01bf"+
    "\70\0\1\u01c0\71\0\1\u01c1\63\0\1\u01c2\73\0\1\u01c3"+
    "\117\0\1\u01c4\27\0\1\u01c5\57\0\1\u01c6\62\0\1\u01c7"+
    "\67\0\1\u01c8\67\0\1\u01c9\76\0\1\u01ca\55\0\1\u01cb"+
    "\3\0\1\u01cc\51\0\1\u01cd\74\0\1\u01ce\52\0\1\u01cf"+
    "\72\0\1\u01d0\72\0\1\u01d1\46\0\1\u01d2\65\0\1\u01d3"+
    "\57\0\1\u01d4\115\0\1\u01d5\33\0\1\u01d6\71\0\1\u01d7"+
    "\71\0\1\u01d8\62\0\1\u01d9\77\0\1\u01da\60\0\1\u01db"+
    "\60\0\1\u01dc\56\0\1\u01dd\73\0\1\u01de\70\0\1\u01df"+
    "\54\0\1\u01e0\105\0\1\u01e1\61\0\1\u01e2\52\0\1\u01e3"+
    "\55\0\1\u01e4\73\0\1\u01e5\55\0\1\u01e6\65\0\1\u01e7"+
    "\50\0\1\u01e8\1\0\1\u01e8\2\0\1\u01e8\3\0\24\u01e8"+
    "\2\0\1\u01e8\5\0\1\u01e8\15\0\3\251\1\0\2\251"+
    "\1\0\2\251\1\u0169\1\0\2\251\1\u01e9\21\251\2\0"+
    "\1\251\5\0\1\251\15\0\3\251\1\0\2\251\1\0"+
    "\2\251\1\u0169\1\0\6\251\1\u01ea\15\251\2\0\1\251"+
    "\5\0\1\251\15\0\3\251\1\0\2\251\1\0\2\251"+
    "\1\u0169\1\0\11\251\1\u01eb\12\251\2\0\1\251\5\0"+
    "\1\251\15\0\3\251\1\0\2\251\1\0\2\251\1\u0169"+
    "\1\0\15\251\1\u01ec\6\251\2\0\1\251\5\0\1\251"+
    "\15\0\3\251\1\0\2\251\1\0\2\251\1\u0169\1\0"+
    "\2\251\1\u01ed\21\251\2\0\1\251\5\0\1\251\15\0"+
    "\3\251\1\0\2\251\1\0\2\251\1\u0169\1\0\12\251"+
    "\1\u01ee\11\251\2\0\1\251\5\0\1\251\15\0\3\251"+
    "\1\0\2\251\1\0\1\u01ef\1\251\1\u0169\1\0\24\251"+
    "\2\0\1\251\5\0\1\251\15\0\3\251\1\0\2\251"+
    "\1\0\2\251\1\u0169\1\0\13\251\1\u01f0\10\251\2\0"+
    "\1\251\5\0\1\251\15\0\3\251\1\0\2\251\1\0"+
    "\2\251\1\u0169\1\0\24\251\2\0\1\u01f1\5\0\1\251"+
    "\15\0\3\251\1\0\2\251\1\0\2\251\1\u0169\1\0"+
    "\5\251\1\u01f2\16\251\2\0\1\251\5\0\1\251\32\0"+
    "\1\u01f3\110\0\1\u01f4\25\0\1\u01f5\1\0\1\u01f5\2\0"+
    "\1\u01f5\3\0\24\u01f5\2\0\1\u01f5\5\0\1\u01f5\32\0"+
    "\1\u01f6\77\0\1\u01f7\63\0\1\u01f8\61\0\1\u01f9\56\0"+
    "\1\u01fa\63\0\1\u01fb\101\0\1\u01fc\47\0\1\u01fd\73\0"+
    "\1\u01fe\70\0\1\u01ff\63\0\1\u0200\73\0\1\u0201\60\0"+
    "\1\u0202\62\0\1\u0203\56\0\1\u0204\51\0\1\u0205\73\0"+
    "\1\u0206\46\0\1\u018d\1\0\1\u018e\12\0\1\u018e\47\0"+
    "\1\u0207\2\0\1\u0208\4\0\1\u0208\56\0\1\u0209\1\0"+
    "\1\u0209\2\0\1\u0209\3\0\24\u0209\2\0\1\u0209\5\0"+
    "\1\u0209\15\0\3\u0190\1\0\2\u0190\1\0\2\u0190\1\u0191"+
    "\1\0\12\u0190\1\u020a\11\u0190\2\0\1\u0190\5\0\1\u0190"+
    "\15\0\3\u0190\1\0\2\u0190\1\0\2\u0190\1\u0191\1\0"+
    "\17\u0190\1\u020b\4\u0190\2\0\1\u0190\5\0\1\u0190\15\0"+
    "\3\u0190\1\0\2\u0190\1\0\2\u0190\1\u0191\1\0\13\u0190"+
    "\1\u020c\10\u0190\2\0\1\u0190\5\0\1\u0190\15\0\3\u0190"+
    "\1\0\2\u0190\1\0\2\u0190\1\u0191\1\0\15\u0190\1\u020d"+
    "\6\u0190\2\0\1\u0190\5\0\1\u0190\15\0\3\u0190\1\0"+
    "\2\u0190\1\0\2\u0190\1\u0191\1\0\6\u0190\1\u020e\15\u0190"+
    "\2\0\1\u0190\5\0\1\u0190\15\0\3\u0190\1\0\2\u0190"+
    "\1\0\2\u0190\1\u0191\1\0\5\u0190\1\u020f\16\u0190\2\0"+
    "\1\u0190\5\0\1\u0190\15\0\3\u0190\1\0\2\u0190\1\0"+
    "\2\u0190\1\u0191\1\0\2\u0190\1\u0210\21\u0190\2\0\1\u0190"+
    "\5\0\1\u0190\15\0\3\u0190\1\0\2\u0190\1\0\2\u0190"+
    "\1\u0191\1\0\3\u0190\1\u0211\20\u0190\2\0\1\u0190\5\0"+
    "\1\u0190\15\0\3\u0190\1\0\2\u0190\1\0\2\u0190\1\u0191"+
    "\1\0\7\u0190\1\u0212\14\u0190\2\0\1\u0190\5\0\1\u0190"+
    "\15\0\3\u0190\1\0\2\u0190\1\0\2\u0190\1\u0191\1\0"+
    "\7\u0190\1\u0213\14\u0190\2\0\1\u0190\5\0\1\u0190\25\0"+
    "\1\u0214\56\0\1\u0215\1\0\1\u0215\2\0\1\u0215\2\0"+
    "\1\u0216\24\u0215\2\0\1\u0215\5\0\1\u0215\17\0\1\u0215"+
    "\1\0\1\u0215\2\0\1\u0215\3\0\24\u0215\2\0\1\u0215"+
    "\5\0\1\u0215\15\0\3\u0100\1\0\2\u0100\1\0\2\u0100"+
    "\1\u019d\1\0\2\u0100\1\u0217\21\u0100\2\0\1\u0100\5\0"+
    "\1\u0100\15\0\3\u0100\1\0\2\u0100\1\0\2\u0100\1\u019d"+
    "\1\0\6\u0100\1\u0218\15\u0100\2\0\1\u0100\5\0\1\u0100"+
    "\15\0\3\u0100\1\0\2\u0100\1\0\2\u0100\1\u019d\1\0"+
    "\11\u0100\1\u0219\12\u0100\2\0\1\u0100\5\0\1\u0100\15\0"+
    "\3\u0100\1\0\2\u0100\1\0\2\u0100\1\u019d\1\0\15\u0100"+
    "\1\u021a\6\u0100\2\0\1\u0100\5\0\1\u0100\15\0\3\u0100"+
    "\1\0\2\u0100\1\0\2\u0100\1\u019d\1\0\2\u0100\1\u021b"+
    "\21\u0100\2\0\1\u0100\5\0\1\u0100\15\0\3\u0100\1\0"+
    "\2\u0100\1\0\2\u0100\1\u019d\1\0\12\u0100\1\u021c\11\u0100"+
    "\2\0\1\u0100\5\0\1\u0100\15\0\3\u0100\1\0\2\u0100"+
    "\1\0\1\u021d\1\u0100\1\u019d\1\0\24\u0100\2\0\1\u0100"+
    "\5\0\1\u0100\15\0\3\u0100\1\0\2\u0100\1\0\2\u0100"+
    "\1\u019d\1\0\13\u0100\1\u021e\10\u0100\2\0\1\u0100\5\0"+
    "\1\u0100\15\0\3\u0100\1\0\2\u0100\1\0\2\u0100\1\u019d"+
    "\1\0\24\u0100\2\0\1\u021f\5\0\1\u0100\15\0\3\u0100"+
    "\1\0\2\u0100\1\0\2\u0100\1\u019d\1\0\5\u0100\1\u0220"+
    "\16\u0100\2\0\1\u0100\5\0\1\u0100\35\0\1\u0221\67\0"+
    "\1\u0222\56\0\1\u0223\65\0\1\u0224\76\0\1\u0225\51\0"+
    "\1\u0226\67\0\1\u0227\76\0\1\u0228\53\0\1\u0229\72\0"+
    "\1\u022a\60\0\1\u022b\56\0\1\u022c\71\0\1\u022d\65\0"+
    "\1\u022e\41\0\1\u01be\101\0\1\u022f\71\0\1\u0230\56\0"+
    "\1\u0231\75\0\1\u0232\55\0\1\u0233\63\0\1\u0234\101\0"+
    "\1\u0235\57\0\1\u0236\54\0\1\u0237\72\0\1\u0238\60\0"+
    "\1\u0239\77\0\1\u023a\47\0\1\u023b\75\0\1\u023c\64\0"+
    "\1\u023d\53\0\1\u023e\64\0\1\u023f\102\0\1\u0240\63\0"+
    "\1\u0241\61\0\1\u0242\52\0\1\u0243\75\0\1\u0244\62\0"+
    "\1\u0245\62\0\1\u0246\57\0\1\u0247\70\0\1\u0248\73\0"+
    "\1\u0249\66\0\1\u024a\55\0\1\u024b\56\0\1\u024c\64\0"+
    "\1\u024d\63\0\1\u024e\65\0\1\u024f\72\0\1\u0250\56\0"+
    "\1\u0251\73\0\1\u0252\55\0\1\u0253\101\0\1\u0254\60\0"+
    "\1\u0255\36\0\3\u01e8\1\0\2\u01e8\1\0\2\u01e8\2\0"+
    "\24\u01e8\2\0\1\u01e8\5\0\1\u01e8\15\0\3\251\1\0"+
    "\2\251\1\0\2\251\1\u0169\1\0\11\251\1\u0256\12\251"+
    "\2\0\1\251\5\0\1\251\15\0\3\251\1\0\2\251"+
    "\1\0\2\251\1\u0169\1\0\1\251\1\u0257\22\251\2\0"+
    "\1\251\5\0\1\251\15\0\3\251\1\0\2\251\1\0"+
    "\2\251\1\u0169\1\0\11\251\1\u0258\12\251\2\0\1\251"+
    "\5\0\1\251\15\0\3\251\1\0\2\251\1\0\2\251"+
    "\1\u0169\1\0\3\251\1\u0259\20\251\2\0\1\251\5\0"+
    "\1\251\15\0\3\251\1\0\2\251\1\0\2\251\1\u0169"+
    "\1\0\11\251\1\u025a\12\251\2\0\1\251\5\0\1\251"+
    "\15\0\3\251\1\0\2\251\1\0\2\251\1\u0169\1\0"+
    "\6\251\1\u025b\15\251\2\0\1\251\5\0\1\251\15\0"+
    "\3\251\1\0\2\251\1\0\2\251\1\u0169\1\0\15\251"+
    "\1\u025c\6\251\2\0\1\251\5\0\1\251\15\0\3\251"+
    "\1\0\2\251\1\0\2\251\1\u0169\1\0\5\251\1\u025d"+
    "\16\251\2\0\1\251\5\0\1\251\15\0\3\251\1\0"+
    "\2\251\1\0\2\251\1\u0169\1\0\2\251\1\u025e\21\251"+
    "\2\0\1\251\5\0\1\251\15\0\3\251\1\0\2\251"+
    "\1\0\2\251\1\u0169\1\0\2\251\1\u025f\21\251\2\0"+
    "\1\251\5\0\1\251\41\0\1\u0260\55\0\1\u0261\47\0"+
    "\3\u01f5\1\0\2\u01f5\1\0\2\u01f5\2\0\24\u01f5\2\0"+
    "\1\u01f5\5\0\1\u01f5\33\0\1\u0262\63\0\1\u0263\64\0"+
    "\1\u0264\102\0\1\u0265\46\0\1\u0266\65\0\1\u0267\63\0"+
    "\1\u0268\75\0\1\u0269\53\0\1\u026a\72\0\1\u026b\56\0"+
    "\1\u026c\63\0\1\u026d\76\0\1\u026e\64\0\1\u026f\36\0"+
    "\1\u0207\64\0\3\u0209\1\0\2\u0209\1\0\2\u0209\2\0"+
    "\24\u0209\2\0\1\u0209\5\0\1\u0209\15\0\3\u0190\1\0"+
    "\2\u0190\1\0\2\u0190\1\u0191\1\0\3\u0190\1\u0270\20\u0190"+
    "\2\0\1\u0190\5\0\1\u0190\15\0\3\u0190\1\0\2\u0190"+
    "\1\0\2\u0190\1\u0191\1\0\6\u0190\1\u0271\15\u0190\2\0"+
    "\1\u0190\5\0\1\u0190\15\0\3\u0190\1\0\2\u0190\1\0"+
    "\2\u0190\1\u0191\1\0\7\u0190\1\u0272\14\u0190\2\0\1\u0190"+
    "\5\0\1\u0190\15\0\3\u0190\1\0\2\u0190\1\0\2\u0190"+
    "\1\u0191\1\0\3\u0190\1\u0273\20\u0190\2\0\1\u0190\5\0"+
    "\1\u0190\15\0\3\u0190\1\0\2\u0190\1\0\2\u0190\1\u0191"+
    "\1\0\2\u0190\1\u0274\21\u0190\2\0\1\u0190\5\0\1\u0190"+
    "\15\0\3\u0190\1\0\2\u0190\1\0\2\u0190\1\u0191\1\0"+
    "\2\u0190\1\u0275\21\u0190\2\0\1\u0190\5\0\1\u0190\15\0"+
    "\3\u0190\1\0\2\u0190\1\0\2\u0190\1\u0191\1\0\6\u0190"+
    "\1\u0276\15\u0190\2\0\1\u0190\5\0\1\u0190\15\0\3\u0190"+
    "\1\0\2\u0190\1\0\2\u0190\1\u0191\1\0\2\u0190\1\u0277"+
    "\21\u0190\2\0\1\u0190\5\0\1\u0190\15\0\3\u0190\1\0"+
    "\2\u0190\1\0\2\u0190\1\u0191\1\0\23\u0190\1\u0278\2\0"+
    "\1\u0190\5\0\1\u0190\15\0\3\u0190\1\0\2\u0190\1\0"+
    "\2\u0190\1\u0191\1\0\7\u0190\1\u0279\14\u0190\2\0\1\u0190"+
    "\5\0\1\u0190\25\0\1\u027a\54\0\3\u0215\1\0\2\u0215"+
    "\1\0\2\u0215\2\0\24\u0215\2\0\1\u0215\5\0\1\u0215"+
    "\15\0\3\u0100\1\0\2\u0100\1\0\2\u0100\1\u019d\1\0"+
    "\11\u0100\1\u027b\12\u0100\2\0\1\u0100\5\0\1\u0100\15\0"+
    "\3\u0100\1\0\2\u0100\1\0\2\u0100\1\u019d\1\0\1\u0100"+
    "\1\u027c\22\u0100\2\0\1\u0100\5\0\1\u0100\15\0\3\u0100"+
    "\1\0\2\u0100\1\0\2\u0100\1\u019d\1\0\11\u0100\1\u027d"+
    "\12\u0100\2\0\1\u0100\5\0\1\u0100\15\0\3\u0100\1\0"+
    "\2\u0100\1\0\2\u0100\1\u019d\1\0\3\u0100\1\u027e\20\u0100"+
    "\2\0\1\u0100\5\0\1\u0100\15\0\3\u0100\1\0\2\u0100"+
    "\1\0\2\u0100\1\u019d\1\0\11\u0100\1\u027f\12\u0100\2\0"+
    "\1\u0100\5\0\1\u0100\15\0\3\u0100\1\0\2\u0100\1\0"+
    "\2\u0100\1\u019d\1\0\6\u0100\1\u0280\15\u0100\2\0\1\u0100"+
    "\5\0\1\u0100\15\0\3\u0100\1\0\2\u0100\1\0\2\u0100"+
    "\1\u019d\1\0\15\u0100\1\u0281\6\u0100\2\0\1\u0100\5\0"+
    "\1\u0100\15\0\3\u0100\1\0\2\u0100\1\0\2\u0100\1\u019d"+
    "\1\0\5\u0100\1\u0282\16\u0100\2\0\1\u0100\5\0\1\u0100"+
    "\15\0\3\u0100\1\0\2\u0100\1\0\2\u0100\1\u019d\1\0"+
    "\2\u0100\1\u0283\21\u0100\2\0\1\u0100\5\0\1\u0100\15\0"+
    "\3\u0100\1\0\2\u0100\1\0\2\u0100\1\u019d\1\0\2\u0100"+
    "\1\u0284\21\u0100\2\0\1\u0100\5\0\1\u0100\32\0\1\u0285"+
    "\104\0\1\u0286\45\0\1\u0287\64\0\1\u0288\63\0\1\u0289"+
    "\70\0\1\u028a\60\0\1\u028b\77\0\1\u028c\66\0\1\u028d"+
    "\55\0\1\u028e\63\0\1\u028f\77\0\1\u0290\45\0\1\u0291"+
    "\71\0\1\u0292\63\0\1\u0293\60\0\1\u0294\66\0\1\u0295"+
    "\62\0\1\u0296\74\0\1\u0297\56\0\1\u0298\76\0\1\u0299"+
    "\46\0\1\u029a\60\0\1\u029b\104\0\1\u029c\52\0\1\u029d"+
    "\73\0\1\u029e\62\0\1\u029f\73\0\1\u02a0\42\0\1\u02a1"+
    "\74\0\1\u02a2\61\0\1\u02a3\65\0\1\u02a4\64\0\1\u02a5"+
    "\101\0\1\u02a6\46\0\1\u02a7\72\0\1\u02a8\57\0\1\u02a9"+
    "\76\0\1\u02aa\53\0\1\u02ab\75\0\1\u02ac\64\0\1\u02ad"+
    "\66\0\1\u02ae\50\0\1\u02af\70\0\1\u02b0\66\0\1\u02b1"+
    "\54\0\1\u02b2\102\0\1\u02b3\47\0\1\u02b4\101\0\1\u02b5"+
    "\47\0\1\u02b6\76\0\1\u02b7\35\0\3\251\1\0\2\251"+
    "\1\0\2\251\1\u0169\1\0\2\251\1\u02b8\21\251\2\0"+
    "\1\251\5\0\1\251\15\0\3\251\1\0\2\251\1\0"+
    "\2\251\1\u0169\1\0\11\251\1\u02b9\12\251\2\0\1\251"+
    "\5\0\1\251\15\0\3\251\1\0\2\251\1\0\2\251"+
    "\1\u0169\1\0\2\251\1\u02ba\21\251\2\0\1\251\5\0"+
    "\1\251\15\0\3\251\1\0\2\251\1\0\2\251\1\u0169"+
    "\1\0\13\251\1\u02bb\10\251\2\0\1\251\5\0\1\251"+
    "\15\0\3\251\1\0\2\251\1\0\2\251\1\u0169\1\0"+
    "\2\251\1\u02bc\21\251\2\0\1\251\5\0\1\251\15\0"+
    "\3\251\1\0\2\251\1\0\2\251\1\u0169\1\0\11\251"+
    "\1\u02bd\12\251\2\0\1\251\5\0\1\251\32\0\1\u02be"+
    "\73\0\1\u02bf\57\0\1\u0264\77\0\1\u02c0\51\0\1\u02c1"+
    "\77\0\1\u02c2\64\0\1\u02c3\46\0\1\u02c4\66\0\1\u02c5"+
    "\66\0\1\u02c6\65\0\1\u02c7\43\0\3\u0190\1\0\2\u0190"+
    "\1\0\2\u0190\1\u0191\1\0\5\u0190\1\u02c8\16\u0190\2\0"+
    "\1\u0190\5\0\1\u0190\15\0\3\u0190\1\0\2\u0190\1\0"+
    "\2\u0190\1\u0191\1\0\2\u0190\1\u02c9\21\u0190\2\0\1\u0190"+
    "\5\0\1\u0190\15\0\3\u0190\1\0\2\u0190\1\0\2\u0190"+
    "\1\u0191\1\0\5\u0190\1\u02ca\16\u0190\2\0\1\u0190\5\0"+
    "\1\u0190\15\0\3\u0190\1\0\2\u0190\1\0\2\u0190\1\u0191"+
    "\1\0\13\u0190\1\u02cb\10\u0190\2\0\1\u0190\5\0\1\u0190"+
    "\15\0\3\u0190\1\0\2\u0190\1\0\2\u0190\1\u0191\1\0"+
    "\17\u0190\1\u02cc\4\u0190\2\0\1\u0190\5\0\1\u0190\15\0"+
    "\3\u0190\1\0\2\u0190\1\0\2\u0190\1\u0191\1\0\3\u0190"+
    "\1\u02cd\20\u0190\2\0\1\u0190\5\0\1\u0190\15\0\3\u0190"+
    "\1\0\2\u0190\1\0\2\u0190\1\u0191\1\0\2\u0190\1\u02ce"+
    "\21\u0190\2\0\1\u0190\5\0\1\u0190\15\0\3\u0190\1\0"+
    "\2\u0190\1\0\2\u0190\1\u0191\1\0\20\u0190\1\u02cf\3\u0190"+
    "\2\0\1\u0190\5\0\1\u0190\15\0\3\u0190\1\0\2\u0190"+
    "\1\0\2\u0190\1\u0191\1\0\12\u0190\1\u02d0\11\u0190\2\0"+
    "\1\u0190\5\0\1\u0190\15\0\3\u0100\1\0\2\u0100\1\0"+
    "\2\u0100\1\u019d\1\0\2\u0100\1\u02d1\21\u0100\2\0\1\u0100"+
    "\5\0\1\u0100\15\0\3\u0100\1\0\2\u0100\1\0\2\u0100"+
    "\1\u019d\1\0\11\u0100\1\u02d2\12\u0100\2\0\1\u0100\5\0"+
    "\1\u0100\15\0\3\u0100\1\0\2\u0100\1\0\2\u0100\1\u019d"+
    "\1\0\2\u0100\1\u02d3\21\u0100\2\0\1\u0100\5\0\1\u0100"+
    "\15\0\3\u0100\1\0\2\u0100\1\0\2\u0100\1\u019d\1\0"+
    "\13\u0100\1\u02d4\10\u0100\2\0\1\u0100\5\0\1\u0100\15\0"+
    "\3\u0100\1\0\2\u0100\1\0\2\u0100\1\u019d\1\0\2\u0100"+
    "\1\u02d5\21\u0100\2\0\1\u0100\5\0\1\u0100\15\0\3\u0100"+
    "\1\0\2\u0100\1\0\2\u0100\1\u019d\1\0\11\u0100\1\u02d6"+
    "\12\u0100\2\0\1\u0100\5\0\1\u0100\33\0\1\u02d7\70\0"+
    "\1\u02d8\57\0\1\u02d9\64\0\1\u02da\65\0\1\u02db\63\0"+
    "\1\u02dc\102\0\1\u02dd\50\0\1\u02de\75\0\1\u02df\64\0"+
    "\1\u02e0\57\0\1\u02e1\63\0\1\u02e2\61\0\1\u02e3\63\0"+
    "\1\u02e4\63\0\1\u02e5\77\0\1\u02e6\51\0\1\u02e7\64\0"+
    "\1\u02e8\74\0\1\u02e9\65\0\1\u02ea\65\0\1\u02eb\57\0"+
    "\1\u02ec\75\0\1\u02ed\47\0\1\u02ee\74\0\1\u02ef\71\0"+
    "\1\u02f0\66\0\1\u02f1\56\0\1\u02f2\51\0\1\u02f3\73\0"+
    "\1\u02f4\57\0\1\u02f5\63\0\1\u02f6\75\0\1\u02f7\77\0"+
    "\1\u02f8\56\0\1\u02f9\61\0\1\u02fa\62\0\1\u02fb\53\0"+
    "\1\u02fc\76\0\1\u02fd\70\0\1\u02fe\46\0\1\u02ff\72\0"+
    "\1\u0300\63\0\1\u0301\71\0\1\u0302\70\0\1\u0303\60\0"+
    "\1\u0304\53\0\1\u0305\46\0\3\251\1\0\2\251\1\0"+
    "\2\251\1\u0169\1\0\20\251\1\u0306\3\251\2\0\1\251"+
    "\5\0\1\251\15\0\3\251\1\0\2\251\1\0\2\251"+
    "\1\u0169\1\0\2\251\1\u0307\21\251\2\0\1\251\5\0"+
    "\1\251\15\0\3\251\1\0\2\251\1\0\2\251\1\u0169"+
    "\1\0\20\251\1\u0308\3\251\2\0\1\251\5\0\1\251"+
    "\15\0\3\251\1\0\2\251\1\0\2\251\1\u0169\1\0"+
    "\22\251\1\u0309\1\251\2\0\1\251\5\0\1\251\15\0"+
    "\3\251\1\0\2\251\1\0\2\251\1\u0169\1\0\17\251"+
    "\1\u030a\4\251\2\0\1\251\5\0\1\251\15\0\3\251"+
    "\1\0\2\251\1\0\2\251\1\u0169\1\0\10\251\1\u030b"+
    "\13\251\2\0\1\251\5\0\1\251\50\0\1\u030c\54\0"+
    "\1\u030d\110\0\1\u030e\53\0\1\u030f\75\0\1\u0310\37\0"+
    "\1\u0311\75\0\1\u0312\54\0\1\u0313\71\0\1\u0314\34\0"+
    "\3\u0190\1\0\2\u0190\1\0\2\u0190\1\u0191\1\0\2\u0190"+
    "\1\u0315\21\u0190\2\0\1\u0190\5\0\1\u0190\15\0\3\u0190"+
    "\1\0\2\u0190\1\0\2\u0190\1\u0191\1\0\20\u0190\1\u0316"+
    "\3\u0190\2\0\1\u0190\5\0\1\u0190\15\0\3\u0190\1\0"+
    "\2\u0190\1\0\2\u0190\1\u0191\1\0\22\u0190\1\u0317\1\u0190"+
    "\2\0\1\u0190\5\0\1\u0190\15\0\3\u0190\1\0\2\u0190"+
    "\1\0\2\u0190\1\u0191\1\0\15\u0190\1\u0318\6\u0190\2\0"+
    "\1\u0190\5\0\1\u0190\15\0\3\u0190\1\0\2\u0190\1\0"+
    "\2\u0190\1\u0191\1\0\2\u0190\1\u0319\21\u0190\2\0\1\u0190"+
    "\5\0\1\u0190\15\0\3\u0190\1\0\2\u0190\1\0\2\u0190"+
    "\1\u0191\1\0\2\u0190\1\u031a\21\u0190\2\0\1\u0190\5\0"+
    "\1\u0190\15\0\3\u0190\1\0\2\u0190\1\0\2\u0190\1\u0191"+
    "\1\0\15\u0190\1\u02ca\6\u0190\2\0\1\u0190\5\0\1\u0190"+
    "\15\0\3\u0190\1\0\2\u0190\1\0\2\u0190\1\u0191\1\0"+
    "\24\u0190\2\0\1\u0190\5\0\1\u031b\15\0\3\u0100\1\0"+
    "\2\u0100\1\0\2\u0100\1\u019d\1\0\20\u0100\1\u031c\3\u0100"+
    "\2\0\1\u0100\5\0\1\u0100\15\0\3\u0100\1\0\2\u0100"+
    "\1\0\2\u0100\1\u019d\1\0\2\u0100\1\u031d\21\u0100\2\0"+
    "\1\u0100\5\0\1\u0100\15\0\3\u0100\1\0\2\u0100\1\0"+
    "\2\u0100\1\u019d\1\0\20\u0100\1\u031e\3\u0100\2\0\1\u0100"+
    "\5\0\1\u0100\15\0\3\u0100\1\0\2\u0100\1\0\2\u0100"+
    "\1\u019d\1\0\22\u0100\1\u031f\1\u0100\2\0\1\u0100\5\0"+
    "\1\u0100\15\0\3\u0100\1\0\2\u0100\1\0\2\u0100\1\u019d"+
    "\1\0\17\u0100\1\u0320\4\u0100\2\0\1\u0100\5\0\1\u0100"+
    "\15\0\3\u0100\1\0\2\u0100\1\0\2\u0100\1\u019d\1\0"+
    "\10\u0100\1\u0321\13\u0100\2\0\1\u0100\5\0\1\u0100\32\0"+
    "\1\u02d7\102\0\1\u0322\51\0\1\u0323\61\0\1\u0324\77\0"+
    "\1\u0325\51\0\1\u0326\64\0\1\u0327\65\0\1\u0328\66\0"+
    "\1\u0329\77\0\1\u032a\64\0\1\u032b\54\0\1\u032c\71\0"+
    "\1\u032d\57\0\1\u032e\55\0\1\u032f\103\0\1\u0330\53\0"+
    "\1\u0331\65\0\1\u0332\57\0\1\u0333\64\0\1\u0334\77\0"+
    "\1\u0335\65\0\1\u0336\62\0\1\u0337\51\0\1\u0338\77\0"+
    "\1\u0339\62\0\1\u033a\63\0\1\u033b\71\0\1\u033c\55\0"+
    "\1\u033d\64\0\1\u033e\71\0\1\u033f\57\0\1\u0340\71\0"+
    "\1\u0341\57\0\1\u0342\72\0\1\u0343\33\0\3\251\1\0"+
    "\2\251\1\0\2\251\1\u0169\1\0\15\251\1\u0344\6\251"+
    "\2\0\1\251\5\0\1\251\15\0\3\251\1\0\2\251"+
    "\1\0\2\251\1\u0169\1\0\20\251\1\u0345\3\251\2\0"+
    "\1\251\5\0\1\251\15\0\3\251\1\0\2\251\1\0"+
    "\2\251\1\u0169\1\0\15\251\1\u0346\6\251\2\0\1\251"+
    "\5\0\1\251\15\0\3\251\1\0\2\251\1\0\2\251"+
    "\1\u0169\1\0\1\251\1\u0347\22\251\2\0\1\251\5\0"+
    "\1\251\15\0\3\251\1\0\2\251\1\0\2\251\1\u0169"+
    "\1\0\17\251\1\u0348\4\251\2\0\1\251\5\0\1\251"+
    "\15\0\3\251\1\0\2\251\1\0\1\251\1\u0349\1\u0169"+
    "\1\0\24\251\2\0\1\251\5\0\1\251\45\0\1\u034a"+
    "\44\0\1\u034b\102\0\1\u034c\64\0\1\u034d\64\0\1\u034e"+
    "\66\0\1\u034f\64\0\1\u0350\34\0\3\u0190\1\0\2\u0190"+
    "\1\0\2\u0190\1\u0191\1\0\3\u0190\1\u0351\20\u0190\2\0"+
    "\1\u0190\5\0\1\u0190\15\0\3\u0190\1\0\2\u0190\1\0"+
    "\2\u0190\1\u0191\1\0\5\u0190\1\u0352\16\u0190\2\0\1\u0190"+
    "\5\0\1\u0190\15\0\3\u0190\1\0\2\u0190\1\0\2\u0190"+
    "\1\u0191\1\0\1\u0190\1\u0353\22\u0190\2\0\1\u0190\5\0"+
    "\1\u0190\15\0\3\u0190\1\0\2\u0190\1\0\2\u0190\1\u0191"+
    "\1\0\12\u0190\1\u0354\11\u0190\2\0\1\u0190\5\0\1\u0190"+
    "\15\0\3\u0190\1\0\2\u0190\1\0\2\u0190\1\u0191\1\0"+
    "\5\u0190\1\u0355\16\u0190\2\0\1\u0190\5\0\1\u0190\15\0"+
    "\3\u0190\1\0\2\u0190\1\0\2\u0190\1\u0191\1\0\5\u0190"+
    "\1\u0356\16\u0190\2\0\1\u0190\5\0\1\u0190\15\0\3\u0190"+
    "\1\0\2\u0190\1\0\2\u0190\1\u0191\1\0\13\u0190\1\u0357"+
    "\10\u0190\2\0\1\u0190\5\0\1\u0190\15\0\3\u0100\1\0"+
    "\2\u0100\1\0\2\u0100\1\u019d\1\0\15\u0100\1\u0358\6\u0100"+
    "\2\0\1\u0100\5\0\1\u0100\15\0\3\u0100\1\0\2\u0100"+
    "\1\0\2\u0100\1\u019d\1\0\20\u0100\1\u0359\3\u0100\2\0"+
    "\1\u0100\5\0\1\u0100\15\0\3\u0100\1\0\2\u0100\1\0"+
    "\2\u0100\1\u019d\1\0\15\u0100\1\u035a\6\u0100\2\0\1\u0100"+
    "\5\0\1\u0100\15\0\3\u0100\1\0\2\u0100\1\0\2\u0100"+
    "\1\u019d\1\0\1\u0100\1\u035b\22\u0100\2\0\1\u0100\5\0"+
    "\1\u0100\15\0\3\u0100\1\0\2\u0100\1\0\2\u0100\1\u019d"+
    "\1\0\17\u0100\1\u035c\4\u0100\2\0\1\u0100\5\0\1\u0100"+
    "\15\0\3\u0100\1\0\2\u0100\1\0\1\u0100\1\u035d\1\u019d"+
    "\1\0\24\u0100\2\0\1\u0100\5\0\1\u0100\35\0\1\u035e"+
    "\72\0\1\u035f\70\0\1\u0360\60\0\1\u0361\53\0\1\u0362"+
    "\103\0\1\u0363\51\0\1\u0364\67\0\1\u0365\61\0\1\u0366"+
    "\77\0\1\u0367\45\0\1\u0368\70\0\1\u0369\71\0\1\u036a"+
    "\55\0\1\u036b\62\0\1\u036c\64\0\1\u036d\65\0\1\u036e"+
    "\73\0\1\u036f\72\0\1\u0370\61\0\1\u0371\55\0\1\u0372"+
    "\65\0\1\u0373\63\0\1\u0374\64\0\1\u0375\60\0\1\u0376"+
    "\47\0\3\251\1\0\2\251\1\0\2\251\1\u0169\1\0"+
    "\15\251\1\u0377\6\251\2\0\1\251\5\0\1\251\15\0"+
    "\3\251\1\0\2\251\1\0\2\251\1\u0169\1\0\15\251"+
    "\1\u0378\6\251\2\0\1\251\5\0\1\251\15\0\3\251"+
    "\1\0\2\251\1\0\2\251\1\u0169\1\0\13\251\1\u0379"+
    "\10\251\2\0\1\251\5\0\1\251\15\0\3\251\1\0"+
    "\2\251\1\0\2\251\1\u0169\1\0\2\251\1\u037a\5\251"+
    "\1\u037b\13\251\2\0\1\251\5\0\1\251\32\0\1\u037c"+
    "\77\0\1\u037d\51\0\1\u037e\77\0\1\u037f\51\0\1\u0380"+
    "\47\0\3\u0190\1\0\2\u0190\1\0\2\u0190\1\u0191\1\0"+
    "\2\u0190\1\u0381\21\u0190\2\0\1\u0190\5\0\1\u0190\15\0"+
    "\3\u0190\1\0\2\u0190\1\0\2\u0190\1\u0191\1\0\10\u0190"+
    "\1\u0382\13\u0190\2\0\1\u0190\5\0\1\u0190\15\0\3\u0190"+
    "\1\0\2\u0190\1\0\2\u0190\1\u0191\1\0\15\u0190\1\u0383"+
    "\6\u0190\2\0\1\u0190\5\0\1\u0190\15\0\3\u0190\1\0"+
    "\2\u0190\1\0\2\u0190\1\u0191\1\0\3\u0190\1\u0384\20\u0190"+
    "\2\0\1\u0190\5\0\1\u0190\15\0\3\u0190\1\0\2\u0190"+
    "\1\0\2\u0190\1\u0191\1\0\13\u0190\1\u0385\10\u0190\2\0"+
    "\1\u0190\5\0\1\u0190\15\0\3\u0190\1\0\2\u0190\1\0"+
    "\2\u0190\1\u0191\1\0\20\u0190\1\u0386\3\u0190\2\0\1\u0190"+
    "\5\0\1\u0190\15\0\3\u0100\1\0\2\u0100\1\0\2\u0100"+
    "\1\u019d\1\0\15\u0100\1\u0387\6\u0100\2\0\1\u0100\5\0"+
    "\1\u0100\15\0\3\u0100\1\0\2\u0100\1\0\2\u0100\1\u019d"+
    "\1\0\15\u0100\1\u0388\6\u0100\2\0\1\u0100\5\0\1\u0100"+
    "\15\0\3\u0100\1\0\2\u0100\1\0\2\u0100\1\u019d\1\0"+
    "\13\u0100\1\u0389\10\u0100\2\0\1\u0100\5\0\1\u0100\15\0"+
    "\3\u0100\1\0\2\u0100\1\0\2\u0100\1\u019d\1\0\2\u0100"+
    "\1\u038a\5\u0100\1\u038b\13\u0100\2\0\1\u0100\5\0\1\u0100"+
    "\43\0\1\u038c\71\0\1\u038d\61\0\1\u038e\61\0\1\u038f"+
    "\57\0\1\u0390\61\0\1\u0391\64\0\1\u0392\77\0\1\u0393"+
    "\51\0\1\u0394\57\0\1\u0395\72\0\1\u0396\74\0\1\u0397"+
    "\71\0\1\u0398\46\0\1\u0399\64\0\1\u039a\64\0\1\u039b"+
    "\47\0\3\251\1\0\2\251\1\0\1\251\1\u039c\1\u0169"+
    "\1\0\24\251\2\0\1\251\5\0\1\251\15\0\3\251"+
    "\1\0\2\251\1\0\2\251\1\u0169\1\0\2\251\1\u039d"+
    "\21\251\2\0\1\251\5\0\1\251\15\0\3\251\1\0"+
    "\2\251\1\0\2\251\1\u0169\1\0\20\251\1\u039e\3\251"+
    "\2\0\1\251\5\0\1\251\15\0\3\251\1\0\2\251"+
    "\1\0\2\251\1\u0169\1\0\7\251\1\u039f\14\251\2\0"+
    "\1\251\5\0\1\251\15\0\3\251\1\0\2\251\1\0"+
    "\2\251\1\u0169\1\0\15\251\1\u03a0\6\251\2\0\1\251"+
    "\5\0\1\251\37\0\1\u03a1\63\0\1\u03a2\75\0\1\u03a3"+
    "\53\0\1\u03a4\43\0\3\u0190\1\0\2\u0190\1\0\2\u0190"+
    "\1\u0191\1\0\5\u0190\1\u03a5\16\u0190\2\0\1\u0190\5\0"+
    "\1\u0190\15\0\3\u0190\1\0\2\u0190\1\0\2\u0190\1\u0191"+
    "\1\0\20\u0190\1\u03a6\3\u0190\2\0\1\u0190\5\0\1\u0190"+
    "\15\0\3\u0190\1\0\2\u0190\1\0\2\u0190\1\u0191\1\0"+
    "\2\u0190\1\u03a7\21\u0190\2\0\1\u0190\5\0\1\u0190\15\0"+
    "\3\u0190\1\0\2\u0190\1\0\1\u0190\1\u03a8\1\u0191\1\0"+
    "\24\u0190\2\0\1\u0190\5\0\1\u0190\15\0\3\u0190\1\0"+
    "\2\u0190\1\0\2\u0190\1\u0191\1\0\20\u0190\1\u03a9\3\u0190"+
    "\2\0\1\u0190\5\0\1\u0190\15\0\3\u0190\1\0\2\u0190"+
    "\1\0\2\u0190\1\u0191\1\0\21\u0190\1\u03aa\2\u0190\2\0"+
    "\1\u0190\5\0\1\u0190\15\0\3\u0100\1\0\2\u0100\1\0"+
    "\1\u0100\1\u03ab\1\u019d\1\0\24\u0100\2\0\1\u0100\5\0"+
    "\1\u0100\15\0\3\u0100\1\0\2\u0100\1\0\2\u0100\1\u019d"+
    "\1\0\2\u0100\1\u03ac\21\u0100\2\0\1\u0100\5\0\1\u0100"+
    "\15\0\3\u0100\1\0\2\u0100\1\0\2\u0100\1\u019d\1\0"+
    "\20\u0100\1\u03ad\3\u0100\2\0\1\u0100\5\0\1\u0100\15\0"+
    "\3\u0100\1\0\2\u0100\1\0\2\u0100\1\u019d\1\0\7\u0100"+
    "\1\u03ae\14\u0100\2\0\1\u0100\5\0\1\u0100\15\0\3\u0100"+
    "\1\0\2\u0100\1\0\2\u0100\1\u019d\1\0\15\u0100\1\u03af"+
    "\6\u0100\2\0\1\u0100\5\0\1\u0100\50\0\1\u03b0\65\0"+
    "\1\u03b1\63\0\1\u03b2\63\0\1\u03b3\60\0\1\u03b4\70\0"+
    "\1\u03b5\63\0\1\u03b6\63\0\1\u03b7\34\0\3\251\1\0"+
    "\2\251\1\0\2\251\1\u0169\1\0\20\251\1\u03b8\3\251"+
    "\2\0\1\251\5\0\1\251\15\0\3\251\1\0\2\251"+
    "\1\0\2\251\1\u0169\1\0\21\251\1\u03b9\2\251\2\0"+
    "\1\251\5\0\1\251\15\0\3\251\1\0\2\251\1\0"+
    "\2\251\1\u0169\1\0\2\251\1\u03ba\21\251\2\0\1\251"+
    "\5\0\1\251\15\0\3\251\1\0\2\251\1\0\2\251"+
    "\1\u0169\1\0\15\251\1\u03bb\6\251\2\0\1\251\5\0"+
    "\1\251\32\0\1\u03bc\110\0\1\u03bd\64\0\1\u03be\23\0"+
    "\3\u0190\1\0\2\u0190\1\0\2\u0190\1\u0191\1\0\15\u0190"+
    "\1\u0384\6\u0190\2\0\1\u0190\5\0\1\u0190\15\0\3\u0190"+
    "\1\0\2\u0190\1\0\2\u0190\1\u0191\1\0\12\u0190\1\u03bf"+
    "\11\u0190\2\0\1\u0190\5\0\1\u0190\15\0\3\u0190\1\0"+
    "\2\u0190\1\0\2\u0190\1\u0191\1\0\21\u0190\1\u03c0\2\u0190"+
    "\2\0\1\u0190\5\0\1\u0190\15\0\3\u0190\1\0\2\u0190"+
    "\1\0\1\u0190\1\u03c1\1\u0191\1\0\24\u0190\2\0\1\u0190"+
    "\5\0\1\u0190\15\0\3\u0100\1\0\2\u0100\1\0\2\u0100"+
    "\1\u019d\1\0\20\u0100\1\u03c2\3\u0100\2\0\1\u0100\5\0"+
    "\1\u0100\15\0\3\u0100\1\0\2\u0100\1\0\2\u0100\1\u019d"+
    "\1\0\21\u0100\1\u03c3\2\u0100\2\0\1\u0100\5\0\1\u0100"+
    "\15\0\3\u0100\1\0\2\u0100\1\0\2\u0100\1\u019d\1\0"+
    "\2\u0100\1\u03c4\21\u0100\2\0\1\u0100\5\0\1\u0100\15\0"+
    "\3\u0100\1\0\2\u0100\1\0\2\u0100\1\u019d\1\0\15\u0100"+
    "\1\u03c5\6\u0100\2\0\1\u0100\5\0\1\u0100\51\0\1\u03c6"+
    "\57\0\1\u03c7\62\0\1\u03c8\66\0\1\u03c9\52\0\1\u03ca"+
    "\47\0\3\251\1\0\2\251\1\0\2\251\1\u0169\1\0"+
    "\12\251\1\u03cb\11\251\2\0\1\251\5\0\1\251\15\0"+
    "\3\251\1\0\2\251\1\0\1\251\1\u03cc\1\u0169\1\0"+
    "\24\251\2\0\1\251\5\0\1\251\15\0\3\251\1\0"+
    "\2\251\1\0\2\251\1\u0169\1\0\11\251\1\u03cd\12\251"+
    "\2\0\1\251\5\0\1\251\15\0\3\251\1\0\2\251"+
    "\1\0\2\251\1\u0169\1\0\3\251\1\u03ce\20\251\2\0"+
    "\1\251\5\0\1\251\41\0\1\u03cf\40\0\3\u0190\1\0"+
    "\2\u0190\1\0\2\u0190\1\u0191\1\0\3\u0190\1\u03d0\20\u0190"+
    "\2\0\1\u0190\5\0\1\u0190\15\0\3\u0190\1\0\2\u0190"+
    "\1\0\1\u0190\1\u03d1\1\u0191\1\0\24\u0190\2\0\1\u0190"+
    "\5\0\1\u0190\15\0\3\u0190\1\0\2\u0190\1\0\2\u0190"+
    "\1\u0191\1\0\17\u0190\1\u03d2\4\u0190\2\0\1\u0190\5\0"+
    "\1\u0190\15\0\3\u0100\1\0\2\u0100\1\0\2\u0100\1\u019d"+
    "\1\0\12\u0100\1\u03d3\11\u0100\2\0\1\u0100\5\0\1\u0100"+
    "\15\0\3\u0100\1\0\2\u0100\1\0\1\u0100\1\u03d4\1\u019d"+
    "\1\0\24\u0100\2\0\1\u0100\5\0\1\u0100\15\0\3\u0100"+
    "\1\0\2\u0100\1\0\2\u0100\1\u019d\1\0\11\u0100\1\u03d5"+
    "\12\u0100\2\0\1\u0100\5\0\1\u0100\15\0\3\u0100\1\0"+
    "\2\u0100\1\0\2\u0100\1\u019d\1\0\3\u0100\1\u03d6\20\u0100"+
    "\2\0\1\u0100\5\0\1\u0100\40\0\1\u03d7\74\0\1\u03d8"+
    "\54\0\1\u03d9\41\0\3\251\1\0\2\251\1\0\2\251"+
    "\1\u0169\1\0\5\251\1\u03da\16\251\2\0\1\251\5\0"+
    "\1\251\15\0\3\251\1\0\2\251\1\0\2\251\1\u0169"+
    "\1\0\13\251\1\u03db\10\251\2\0\1\251\5\0\1\251"+
    "\15\0\3\251\1\0\2\251\1\0\2\251\1\u0169\1\0"+
    "\2\251\1\u03dc\21\251\2\0\1\251\5\0\1\251\15\0"+
    "\3\251\1\0\2\251\1\0\2\251\1\u0169\1\0\13\251"+
    "\1\u03dd\10\251\2\0\1\251\5\0\1\251\32\0\1\u03de"+
    "\47\0\3\u0190\1\0\2\u0190\1\0\1\u0190\1\u03df\1\u0191"+
    "\1\0\24\u0190\2\0\1\u0190\5\0\1\u0190\15\0\3\u0190"+
    "\1\0\2\u0190\1\0\2\u0190\1\u0191\1\0\17\u0190\1\u03e0"+
    "\4\u0190\2\0\1\u0190\5\0\1\u0190\15\0\3\u0190\1\0"+
    "\2\u0190\1\0\2\u0190\1\u0191\1\0\13\u0190\1\u03e1\10\u0190"+
    "\2\0\1\u0190\5\0\1\u0190\15\0\3\u0100\1\0\2\u0100"+
    "\1\0\2\u0100\1\u019d\1\0\5\u0100\1\u03e2\16\u0100\2\0"+
    "\1\u0100\5\0\1\u0100\15\0\3\u0100\1\0\2\u0100\1\0"+
    "\2\u0100\1\u019d\1\0\13\u0100\1\u03e3\10\u0100\2\0\1\u0100"+
    "\5\0\1\u0100\15\0\3\u0100\1\0\2\u0100\1\0\2\u0100"+
    "\1\u019d\1\0\2\u0100\1\u03e4\21\u0100\2\0\1\u0100\5\0"+
    "\1\u0100\15\0\3\u0100\1\0\2\u0100\1\0\2\u0100\1\u019d"+
    "\1\0\13\u0100\1\u03e5\10\u0100\2\0\1\u0100\5\0\1\u0100"+
    "\36\0\1\u03e6\64\0\1\u03e7\43\0\3\251\1\0\2\251"+
    "\1\0\2\251\1\u0169\1\0\2\251\1\u03e8\21\251\2\0"+
    "\1\251\5\0\1\251\15\0\3\251\1\0\2\251\1\0"+
    "\2\251\1\u0169\1\0\20\251\1\u03e9\3\251\2\0\1\251"+
    "\5\0\1\251\15\0\3\251\1\0\2\251\1\0\2\251"+
    "\1\u0169\1\0\20\251\1\u03ea\3\251\2\0\1\251\5\0"+
    "\1\251\15\0\3\251\1\0\2\251\1\0\2\251\1\u0169"+
    "\1\0\22\251\1\u03eb\1\251\2\0\1\251\5\0\1\251"+
    "\50\0\1\u03ec\31\0\3\u0190\1\0\2\u0190\1\0\2\u0190"+
    "\1\u0191\1\0\17\u0190\1\u03ed\4\u0190\2\0\1\u0190\5\0"+
    "\1\u0190\15\0\3\u0190\1\0\2\u0190\1\0\2\u0190\1\u0191"+
    "\1\0\13\u0190\1\u03ee\10\u0190\2\0\1\u0190\5\0\1\u0190"+
    "\15\0\3\u0190\1\0\2\u0190\1\0\2\u0190\1\u0191\1\0"+
    "\22\u0190\1\u03ef\1\u0190\2\0\1\u0190\5\0\1\u0190\15\0"+
    "\3\u0100\1\0\2\u0100\1\0\2\u0100\1\u019d\1\0\2\u0100"+
    "\1\u03f0\21\u0100\2\0\1\u0100\5\0\1\u0100\15\0\3\u0100"+
    "\1\0\2\u0100\1\0\2\u0100\1\u019d\1\0\20\u0100\1\u03f1"+
    "\3\u0100\2\0\1\u0100\5\0\1\u0100\15\0\3\u0100\1\0"+
    "\2\u0100\1\0\2\u0100\1\u019d\1\0\20\u0100\1\u03f2\3\u0100"+
    "\2\0\1\u0100\5\0\1\u0100\15\0\3\u0100\1\0\2\u0100"+
    "\1\0\2\u0100\1\u019d\1\0\22\u0100\1\u03f3\1\u0100\2\0"+
    "\1\u0100\5\0\1\u0100\32\0\1\u03f4\64\0\1\u03f5\47\0"+
    "\3\251\1\0\2\251\1\0\2\251\1\u0169\1\0\17\251"+
    "\1\u03f6\4\251\2\0\1\251\5\0\1\251\15\0\3\251"+
    "\1\0\2\251\1\0\2\251\1\u0169\1\0\15\251\1\u03f7"+
    "\6\251\2\0\1\251\5\0\1\251\15\0\3\251\1\0"+
    "\2\251\1\0\2\251\1\u0169\1\0\1\251\1\u03f8\22\251"+
    "\2\0\1\251\5\0\1\251\45\0\1\u03f9\34\0\3\u0190"+
    "\1\0\2\u0190\1\0\2\u0190\1\u0191\1\0\2\u0190\1\u03fa"+
    "\21\u0190\2\0\1\u0190\5\0\1\u0190\15\0\3\u0190\1\0"+
    "\2\u0190\1\0\2\u0190\1\u0191\1\0\22\u0190\1\u03fb\1\u0190"+
    "\2\0\1\u0190\5\0\1\u0190\15\0\3\u0190\1\0\2\u0190"+
    "\1\0\2\u0190\1\u0191\1\0\7\u0190\1\u03fc\14\u0190\2\0"+
    "\1\u0190\5\0\1\u0190\15\0\3\u0100\1\0\2\u0100\1\0"+
    "\2\u0100\1\u019d\1\0\17\u0100\1\u03fd\4\u0100\2\0\1\u0100"+
    "\5\0\1\u0100\15\0\3\u0100\1\0\2\u0100\1\0\2\u0100"+
    "\1\u019d\1\0\15\u0100\1\u03fe\6\u0100\2\0\1\u0100\5\0"+
    "\1\u0100\15\0\3\u0100\1\0\2\u0100\1\0\2\u0100\1\u019d"+
    "\1\0\1\u0100\1\u03ff\22\u0100\2\0\1\u0100\5\0\1\u0100"+
    "\47\0\1\u0400\32\0\3\251\1\0\2\251\1\0\2\251"+
    "\1\u0169\1\0\15\251\1\u0401\6\251\2\0\1\251\5\0"+
    "\1\251\15\0\3\251\1\0\2\251\1\0\2\251\1\u0169"+
    "\1\0\15\251\1\u0402\6\251\2\0\1\251\5\0\1\251"+
    "\15\0\3\u0190\1\0\2\u0190\1\0\2\u0190\1\u0191\1\0"+
    "\7\u0190\1\u0403\14\u0190\2\0\1\u0190\5\0\1\u0190\15\0"+
    "\3\u0190\1\0\2\u0190\1\0\2\u0190\1\u0191\1\0\7\u0190"+
    "\1\u0404\14\u0190\2\0\1\u0190\5\0\1\u0190\15\0\3\u0190"+
    "\1\0\2\u0190\1\0\2\u0190\1\u0191\1\0\13\u0190\1\u0405"+
    "\10\u0190\2\0\1\u0190\5\0\1\u0190\15\0\3\u0100\1\0"+
    "\2\u0100\1\0\2\u0100\1\u019d\1\0\15\u0100\1\u0406\6\u0100"+
    "\2\0\1\u0100\5\0\1\u0100\15\0\3\u0100\1\0\2\u0100"+
    "\1\0\2\u0100\1\u019d\1\0\15\u0100\1\u0407\6\u0100\2\0"+
    "\1\u0100\5\0\1\u0100\15\0\3\251\1\0\2\251\1\0"+
    "\2\251\1\u0169\1\0\3\251\1\u0408\20\251\2\0\1\251"+
    "\5\0\1\251\15\0\3\251\1\0\2\251\1\0\2\251"+
    "\1\u0169\1\0\2\251\1\u0409\21\251\2\0\1\251\5\0"+
    "\1\251\15\0\3\u0190\1\0\2\u0190\1\0\2\u0190\1\u0191"+
    "\1\0\23\u0190\1\u040a\2\0\1\u0190\5\0\1\u0190\15\0"+
    "\3\u0190\1\0\2\u0190\1\0\2\u0190\1\u0191\1\0\13\u0190"+
    "\1\u040b\10\u0190\2\0\1\u0190\5\0\1\u0190\15\0\3\u0190"+
    "\1\0\2\u0190\1\0\2\u0190\1\u0191\1\0\20\u0190\1\u040c"+
    "\3\u0190\2\0\1\u0190\5\0\1\u0190\15\0\3\u0100\1\0"+
    "\2\u0100\1\0\2\u0100\1\u019d\1\0\3\u0100\1\u040d\20\u0100"+
    "\2\0\1\u0100\5\0\1\u0100\15\0\3\u0100\1\0\2\u0100"+
    "\1\0\2\u0100\1\u019d\1\0\2\u0100\1\u040e\21\u0100\2\0"+
    "\1\u0100\5\0\1\u0100\15\0\3\251\1\0\2\251\1\0"+
    "\2\251\1\u0169\1\0\1\251\1\u040f\22\251\2\0\1\251"+
    "\5\0\1\251\15\0\3\u0190\1\0\2\u0190\1\0\2\u0190"+
    "\1\u0191\1\0\20\u0190\1\u0410\3\u0190\2\0\1\u0190\5\0"+
    "\1\u0190\15\0\3\u0190\1\0\2\u0190\1\0\2\u0190\1\u0191"+
    "\1\0\21\u0190\1\u0411\2\u0190\2\0\1\u0190\5\0\1\u0190"+
    "\15\0\3\u0100\1\0\2\u0100\1\0\2\u0100\1\u019d\1\0"+
    "\1\u0100\1\u0412\22\u0100\2\0\1\u0100\5\0\1\u0100\15\0"+
    "\3\251\1\0\2\251\1\0\2\251\1\u0169\1\0\6\251"+
    "\1\u0413\15\251\2\0\1\251\5\0\1\251\15\0\3\u0190"+
    "\1\0\2\u0190\1\0\2\u0190\1\u0191\1\0\21\u0190\1\u03a7"+
    "\2\u0190\2\0\1\u0190\5\0\1\u0190\15\0\3\u0100\1\0"+
    "\2\u0100\1\0\2\u0100\1\u019d\1\0\6\u0100\1\u0414\15\u0100"+
    "\2\0\1\u0100\5\0\1\u0100\15\0\3\251\1\0\2\251"+
    "\1\0\2\251\1\u0169\1\0\15\251\1\u0415\6\251\2\0"+
    "\1\251\5\0\1\251\15\0\3\u0100\1\0\2\u0100\1\0"+
    "\2\u0100\1\u019d\1\0\15\u0100\1\u0416\6\u0100\2\0\1\u0100"+
    "\5\0\1\u0100\15\0\3\251\1\0\2\251\1\0\2\251"+
    "\1\u0169\1\0\13\251\1\u0417\10\251\2\0\1\251\5\0"+
    "\1\251\15\0\3\u0100\1\0\2\u0100\1\0\2\u0100\1\u019d"+
    "\1\0\13\u0100\1\u0418\10\u0100\2\0\1\u0100\5\0\1\u0100"+
    "\15\0\3\251\1\0\2\251\1\0\2\251\1\u0169\1\0"+
    "\12\251\1\u0419\11\251\2\0\1\251\5\0\1\251\15\0"+
    "\3\u0100\1\0\2\u0100\1\0\2\u0100\1\u019d\1\0\12\u0100"+
    "\1\u041a\11\u0100\2\0\1\u0100\5\0\1\u0100\15\0\3\251"+
    "\1\0\2\251\1\0\2\251\1\u0169\1\0\20\251\1\u041b"+
    "\3\251\2\0\1\251\5\0\1\251\15\0\3\u0100\1\0"+
    "\2\u0100\1\0\2\u0100\1\u019d\1\0\20\u0100\1\u041c\3\u0100"+
    "\2\0\1\u0100\5\0\1\u0100\13\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[45633];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\153\0\1\11\10\1\1\11\2\1\1\11\4\1\1\11"+
    "\3\1\1\11\12\1\1\11\24\1\3\11\3\1\1\11"+
    "\14\1\4\11\2\1\1\11\1\1\1\11\1\1\4\11"+
    "\7\1\2\11\1\1\1\11\2\1\1\11\2\1\1\11"+
    "\4\1\1\11\4\1\1\11\2\1\1\11\2\1\1\11"+
    "\2\1\1\11\1\1\2\11\5\1\2\11\13\1\2\11"+
    "\2\1\1\11\15\1\1\11\16\1\2\11\3\1\1\11"+
    "\10\1\5\11\3\1\2\11\3\1\1\11\1\1\5\0"+
    "\3\11\3\0\2\11\27\0\1\11\11\0\2\1\1\0"+
    "\12\1\5\0\1\11\3\0\1\11\4\0\1\11\4\0"+
    "\1\11\2\0\1\11\2\0\1\1\1\0\1\11\1\1"+
    "\1\0\12\1\3\0\12\1\4\0\1\1\1\11\3\0"+
    "\1\11\7\0\4\11\1\1\5\0\1\11\43\0\13\1"+
    "\2\0\1\1\1\0\1\11\2\0\1\11\12\0\1\11"+
    "\1\0\1\1\1\0\13\1\1\0\1\1\1\11\12\1"+
    "\3\0\2\11\60\0\12\1\4\0\3\11\1\0\1\11"+
    "\3\0\1\11\3\0\12\1\1\11\12\1\44\0\1\11"+
    "\1\0\2\11\12\0\1\11\6\1\3\0\1\11\6\0"+
    "\17\1\1\11\1\0\3\11\2\0\2\11\3\0\1\11"+
    "\1\0\2\11\11\0\1\11\16\0\2\11\5\0\6\1"+
    "\6\0\1\11\1\0\1\11\15\1\4\0\2\11\1\0"+
    "\2\11\2\0\1\11\11\0\1\11\1\0\1\11\5\0"+
    "\1\11\1\0\1\11\2\0\6\1\1\11\4\0\1\11"+
    "\1\0\15\1\5\0\1\11\3\0\2\11\1\0\1\11"+
    "\1\0\1\11\3\0\2\11\1\0\1\11\2\0\1\11"+
    "\5\1\4\0\1\11\13\1\2\0\1\11\1\0\2\11"+
    "\2\0\1\11\3\0\4\11\5\1\2\0\1\11\1\0"+
    "\13\1\1\0\2\11\4\0\1\11\4\1\1\0\2\11"+
    "\7\1\1\11\3\0\1\11\4\1\1\0\7\1\1\0"+
    "\1\11\1\0\4\1\1\0\7\1\2\0\4\1\1\0"+
    "\7\1\1\0\1\11\3\1\1\11\6\1\1\11\34\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[1052];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */


  _XQueryLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _XQueryLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1332) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 98: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { yybegin(_WILDCARD_QNAME_); return XQ_PREFIX_NAME;
          }
        case 193: break;
        case 1: 
          { yybegin(YYINITIAL); return BAD_CHARACTER;
          }
        case 194: break;
        case 178: 
          { yybegin(_URILITERAL); return KW_COLLATION;
          }
        case 195: break;
        case 190: 
          { pushState(_AS_OCC); pushState(_CLOSE_BRACE); pushState(_QNAME); yybegin(_OPEN_BRACE);  return KW_SCHEMA_ATTRIBUTE;
          }
        case 196: break;
        case 170: 
          { pushState(_SEP); pushState(_ATLIST); yybegin(NAMESPACEDECL); return KW_NAMESPACE;
          }
        case 197: break;
        case 134: 
          { pushState(_SEP); pushState(_STRINGLITERAL); yybegin(_QNAME); return KW_OPTION;
          }
        case 198: break;
        case 92: 
          { pushState(_PREDICATE_LIST);  yypushback(yylength()); pushState(_OPT_EXPR_LIST_IN_BRACE); yybegin(_QNAME);
          }
        case 199: break;
        case 173: 
          { yybegin(_EXPR_SINGLE); return KW_SATISFIES;
          }
        case 200: break;
        case 140: 
          { yybegin(_DECLARE); return KW_DECLARE;
          }
        case 201: break;
        case 152: 
          { pushState(_PREDICATE_LIST); yybegin(_EXPR_LIST_IN_CURLY); return KW_ORDERED;
          }
        case 202: break;
        case 5: 
          { return XML_COMMENT_CHAR;
          }
        case 203: break;
        case 189: 
          { yybegin(_DECLARE_COPYNS); return KW_COPY_NAMESPACES;
          }
        case 204: break;
        case 14: 
          { yybegin(_URILITERAL); return OP_EQUALS;
          }
        case 205: break;
        case 26: 
          { yypushback(yylength()); pushState(_AS_AorE_); yybegin(_QNAME);
          }
        case 206: break;
        case 167: 
          { pushState(_SEP); yybegin(NAMESPACEDECL); return KW_NAMESPACE;
          }
        case 207: break;
        case 108: 
          { pushState(_AS_OCC); yybegin(_EMPTY_BRACES); return KW_ITEM;
          }
        case 208: break;
        case 82: 
          { return XQ_STR_ESCAPE_APOS;
          }
        case 209: break;
        case 43: 
          { yypushback(1); pushState(_TYPESWITCH_EXPR_RETURN); yybegin(_VARNAME);
          }
        case 210: break;
        case 179: 
          { yybegin(_SEP); return KW_NO_INHERIT;
          }
        case 211: break;
        case 32: 
          { pushState(_EXPR_LIST); yybegin(_EXPR_SINGLE); return OP_COMMA;
          }
        case 212: break;
        case 53: 
          { yybegin(_PREDICATE_LIST);  return OP_DOT;
          }
        case 213: break;
        case 192: 
          { pushState(_AS_OCC); pushState(_AS_PI); yybegin(_OPEN_BRACE); return KW_PROCESSING_INSTRUCTION;
          }
        case 214: break;
        case 187: 
          { pushState(_AS_OCC); pushState(_CLOSE_BRACE); pushState(_QNAME); yybegin(_OPEN_BRACE); return KW_SCHEMA_ELEMENT;
          }
        case 215: break;
        case 24: 
          { pushState(_CLOSE_BRACE); yypushback(yylength()); yybegin(_NCNAME);
          }
        case 216: break;
        case 123: 
          { pushState(_QUANT_EXPR_IN); yybegin(_PARAM); return KW_EVERY;
          }
        case 217: break;
        case 126: 
          { pushState(_FLWOR_BODY2); yypushback(yylength()); yybegin(_WHERE_CLAUSE);
          }
        case 218: break;
        case 127: 
          { yybegin(_EXPR_SINGLE); return KW_WHERE;
          }
        case 219: break;
        case 147: 
          { yybegin(_IMPORT_SCHEMA_DEFAULT_ELEMENT); return KW_ELEMENT;
          }
        case 220: break;
        case 122: 
          { yybegin(_SEP); return KW_STRIP;
          }
        case 221: break;
        case 87: 
          { yybegin(_IF_EXPR_); return KW_IF;
          }
        case 222: break;
        case 138: 
          { yybegin(_VALIDATE_EXPR_); return KW_STRICT;
          }
        case 223: break;
        case 185: 
          { pushState(_AS_OCC); pushState(_AS_DN); yybegin(_OPEN_BRACE); return KW_DOCUMENT_NODE;
          }
        case 224: break;
        case 93: 
          { yybegin(_VARNAME); return KW_AT;
          }
        case 225: break;
        case 168: 
          { pushState(_SEP); yybegin(_URILITERAL); return KW_COLLATION;
          }
        case 226: break;
        case 13: 
          { yybegin(STR_START_APOS); return XQ_STR_START;
          }
        case 227: break;
        case 79: 
          { popState(); return XQ_COMMENT_END;
          }
        case 228: break;
        case 68: 
          { popState(); return OP_RCURLY;
          }
        case 229: break;
        case 172: 
          { pushState(_AS_OCC); pushState(_AS_AorE); yybegin(_OPEN_BRACE); return KW_ATTRIBUTE;
          }
        case 230: break;
        case 35: 
          { yypushback(yylength()); pushState(_CLOSE_BRACE); pushState(_EXPR_LIST); yybegin(_EXPR_SINGLE);
          }
        case 231: break;
        case 44: 
          { yypushback(yylength()); yybegin(_AS_);
          }
        case 232: break;
        case 151: 
          { yybegin(_TYPESWITCH_EXPR_DEFAULT_); return KW_DEFAULT;
          }
        case 233: break;
        case 16: 
          { pushState(_ATLIST_); yybegin(_URILITERAL); return OP_COMMA;
          }
        case 234: break;
        case 61: 
          { pushState(_LET_CLAUSE_); pushState(_LET_CLAUSE_VAR); yybegin(_PARAM); return OP_COMMA;
          }
        case 235: break;
        case 85: 
          { yybegin(_AS_); return KW_AS;
          }
        case 236: break;
        case 107: 
          { pushState(_LET_CLAUSE_); pushState(_LET_CLAUSE_VAR); yybegin(_PARAM); return KW_LET;
          }
        case 237: break;
        case 166: 
          { pushState(_SEP); yybegin(NAMESPACEDECL); return KW_MODULE;
          }
        case 238: break;
        case 186: 
          { yybegin(_PRESERVE_OR_STRIP); return KW_BOUNDARY_SPACE;
          }
        case 239: break;
        case 157: 
          { yybegin(_DECLARE_COPYNS_); return KW_PRESERVE;
          }
        case 240: break;
        case 95: 
          { pushState(_ORDER_CLAUSE_LIST); pushState(_ORDER_CLAUSE_MODIFIER); yybegin(_EXPR_SINGLE); return KW_BY;
          }
        case 241: break;
        case 60: 
          { yybegin(_FOR_CLAUSE); return OP_COMMA;
          }
        case 242: break;
        case 124: 
          { pushState(_PREDICATE_LIST); pushState(_NODE_TEST); yybegin(_COLONCOLON); return KW_CHILD;
          }
        case 243: break;
        case 67: 
          { popState(); return OP_LCURLY;
          }
        case 244: break;
        case 36: 
          { popState(); return OP_RBRACE;
          }
        case 245: break;
        case 63: 
          { yypushback(1); yybegin(_ORDER_CLAUSE_MODIFIER_EMPTY);
          }
        case 246: break;
        case 65: 
          { yybegin(_EMPTY_BRACES_); return OP_LBRACE;
          }
        case 247: break;
        case 41: 
          { yybegin(_TYPESWITCH_EXPR_CASE); return OP_RBRACE;
          }
        case 248: break;
        case 142: 
          { pushState(_XQUERY_VERSION); yybegin(_STRINGLITERAL); return KW_VERSION;
          }
        case 249: break;
        case 83: 
          { yybegin(_EXPR_SINGLE); return OP_ASSIGN;
          }
        case 250: break;
        case 143: 
          { yybegin(_DECLARE_DEFAULT); return KW_DEFAULT;
          }
        case 251: break;
        case 71: 
          { popState(); return OP_COLON;
          }
        case 252: break;
        case 180: 
          { yypushback(yylength()); yybegin(_TYPESWITCH_EXPR);
          }
        case 253: break;
        case 62: 
          { pushState(_ORDER_CLAUSE_LIST); pushState(_ORDER_CLAUSE_MODIFIER); yybegin(_EXPR_SINGLE); return OP_COMMA;
          }
        case 254: break;
        case 106: 
          { pushState(_FOR_CLAUSE_VAR_IN); pushState(_FOR_CLAUSE_VAR_POS); yybegin(_PARAM); return KW_FOR;
          }
        case 255: break;
        case 37: 
          { pushState(_IF_EXPR__); pushState(_EXPR_LIST); yybegin(_EXPR_SINGLE); return OP_LBRACE;
          }
        case 256: break;
        case 97: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { yybegin(_QNAME_); return XQ_PREFIX_NAME;
          }
        case 257: break;
        case 162: 
          { yybegin(_VALIDATE_EXPR_X); return KW_VALIDATE;
          }
        case 258: break;
        case 176: 
          { pushState(_PREDICATE_LIST); pushState(_NODE_TEST); yybegin(_COLONCOLON); return KW_FOLLOWING;
          }
        case 259: break;
        case 66: 
          { popState(); return OP_LBRACE;
          }
        case 260: break;
        case 49: 
          { popState(); return OP_SLASH;
          }
        case 261: break;
        case 125: 
          { pushState(_FLWOR_BODY3); yypushback(yylength()); yybegin(_ORDER_CLAUSE);
          }
        case 262: break;
        case 99: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { yybegin(_QNAME_); return OP_STAR;
          }
        case 263: break;
        case 10: 
          { yybegin(YYINITIAL); return OP_SEPERATOR;
          }
        case 264: break;
        case 69: 
          { popState(); return OP_RSQUARE;
          }
        case 265: break;
        case 155: 
          { pushState(_SEP); pushState(_DECLARE_VARIABLE); yybegin(_PARAM); return KW_VARIABLE;
          }
        case 266: break;
        case 129: 
          { yybegin(_ORDER_CLAUSE_MODIFIER_EMPTY_); return KW_EMPTY;
          }
        case 267: break;
        case 4: 
          { return XQ_COMMENT_CHAR;
          }
        case 268: break;
        case 160: 
          { popState(); return KW_EXTERNAL;
          }
        case 269: break;
        case 38: 
          { yybegin(_IF_EXPR_THEN); return OP_RBRACE;
          }
        case 270: break;
        case 55: 
          { pushState(_PREDICATE_LIST); yypushback(1); yybegin(_STRINGLITERAL);
          }
        case 271: break;
        case 22: 
          { popState(); return OP_QUESTION;
          }
        case 272: break;
        case 75: 
          { yybegin(_QNAME_LOCAL); return OP_COLON;
          }
        case 273: break;
        case 121: 
          { yybegin(_SEP); return KW_LEAST;
          }
        case 274: break;
        case 109: 
          { pushState(_AS_OCC); yybegin(_EMPTY_BRACES); return KW_TEXT;
          }
        case 275: break;
        case 84: 
          { pushState(_ATLIST_); yybegin(_URILITERAL); return KW_AT;
          }
        case 276: break;
        case 34: 
          { yybegin(_EXPR_LIST_OR_RBRACE); return OP_LBRACE;
          }
        case 277: break;
        case 30: 
          { yypushback(yylength()); yybegin(_INSTANCEOF_EXPR);
          }
        case 278: break;
        case 164: 
          { yybegin(_ORDER_CLAUSE_MODIFIER_COLLATION); return KW_GREATEST;
          }
        case 279: break;
        case 133: 
          { yybegin(_IMPORT); return KW_IMPORT;
          }
        case 280: break;
        case 31: 
          { yypushback(1); popState();
          }
        case 281: break;
        case 51: 
          { yypushback(yylength()); pushState(_PREDICATE_LIST); yybegin(_NODE_TEST);
          }
        case 282: break;
        case 101: 
          { popState(); return XML_COMMENT_END;
          }
        case 283: break;
        case 91: 
          { pushState(_PREDICATE_LIST); pushState(_NODE_TEST); yybegin(_COLONCOLON); return KW_FOLLOWING_SIBLING;
          }
        case 284: break;
        case 145: 
          { yybegin(_DECLARE_DEFAULT_NAMESPACE); return KW_ELEMENT;
          }
        case 285: break;
        case 3: 
          { return XQ_INTEGER_LITERAL;
          }
        case 286: break;
        case 171: 
          { pushState(_SEP); pushState(_ATLIST); yybegin(_URILITERAL); return KW_NAMESPACE;
          }
        case 287: break;
        case 102: 
          { pushState(_FLWOR_HEAD); yypushback(yylength()); yybegin(_LET_CLAUSE);
          }
        case 288: break;
        case 19: 
          { popState(); yypushback(1);
          }
        case 289: break;
        case 100: 
          { return XQ_DOUBLE_LITERAL;
          }
        case 290: break;
        case 159: 
          { yybegin(_SEP); return KW_GREATEST;
          }
        case 291: break;
        case 42: 
          { yypushback(yylength()); yybegin(_TYPESWITCH_EXPR_RETURN);
          }
        case 292: break;
        case 174: 
          { pushState(_PREDICATE_LIST); yybegin(_EXPR_LIST_IN_CURLY); return KW_UNORDERED;
          }
        case 293: break;
        case 73: 
          { popState(); return XQ_LOCAL_NAME;
          }
        case 294: break;
        case 88: 
          { pushState(_QUANT_EXPR_SATISFIES); yybegin(_EXPR_SINGLE); return KW_IN;
          }
        case 295: break;
        case 191: 
          { pushState(_PREDICATE_LIST); pushState(_NODE_TEST); yybegin(_COLONCOLON); return KW_DESCENDANT_OR_SELF;
          }
        case 296: break;
        case 141: 
          { yybegin(_SEP); return KW_ORDERED;
          }
        case 297: break;
        case 114: 
          { yybegin(_EXPR_SINGLE); return KW_ELSE;
          }
        case 298: break;
        case 23: 
          { yypushback(1); yybegin(_CLOSE_BRACE);
          }
        case 299: break;
        case 158: 
          { yybegin(_DECLARE_DEFAULT_NAMESPACE); return KW_FUNCTION;
          }
        case 300: break;
        case 154: 
          { yybegin(DECLAREORDERING); return KW_ORDERING;
          }
        case 301: break;
        case 144: 
          { yybegin(_SEP); return KW_INHERIT;
          }
        case 302: break;
        case 183: 
          { yybegin(_DECLARE_COPYNS_); return KW_NO_PRESERVE;
          }
        case 303: break;
        case 52: 
          { yybegin(_PREDICATE_LIST); return XQ_INTEGER_LITERAL;
          }
        case 304: break;
        case 59: 
          { pushState(_PREDICATE_LIST); pushState(_CLOSE_SQUARE); pushState(_EXPR_LIST); yybegin(_EXPR_SINGLE); return OP_LSQUARE;
          }
        case 305: break;
        case 25: 
          { pushState(_CLOSE_BRACE); yypushback(1); yybegin(_STRINGLITERAL);
          }
        case 306: break;
        case 118: 
          { pushState(_PREDICATE_LIST); yybegin(XML_COMMENT); return XML_COMMENT_START;
          }
        case 307: break;
        case 135: 
          { yybegin(_IMPORT_MODULE); return KW_MODULE;
          }
        case 308: break;
        case 76: 
          { yybegin(_WILDCARD_QNAME_LOCAL); return OP_COLON;
          }
        case 309: break;
        case 139: 
          { yybegin(_ORDER_CLAUSE); return KW_STABLE;
          }
        case 310: break;
        case 70: 
          { yybegin(_QNAME); return OP_VARSTART;
          }
        case 311: break;
        case 113: 
          { pushState(_IF_EXPR_ELSE); yybegin(_EXPR_SINGLE); return KW_THEN;
          }
        case 312: break;
        case 7: 
          { yybegin(_NAMESPACEDECL_); return XQ_LOCAL_NAME;
          }
        case 313: break;
        case 117: 
          { pushState(_PREDICATE_LIST); pushState(_NODE_TEST); yybegin(_COLONCOLON); return KW_SELF;
          }
        case 314: break;
        case 28: 
          { pushState(_AS_AorE__); yybegin(_QNAME); return OP_COMMA;
          }
        case 315: break;
        case 89: 
          { popState(); return OP_SLASHSLASH;
          }
        case 316: break;
        case 188: 
          { pushState(_CLOSE_BRACE); pushState(_CLOSE_BRACE); pushState(_QNAME); yybegin(_OPEN_BRACE); return KW_SCHEMA_ELEMENT;
          }
        case 317: break;
        case 177: 
          { return KW_ASCENDING;
          }
        case 318: break;
        case 78: 
          { pushState(); yybegin(EXPR_COMMENT); return XQ_COMMENT_START;
          }
        case 319: break;
        case 119: 
          { yybegin(_DECLARE_DEFAULT_ORDER); return KW_ORDER;
          }
        case 320: break;
        case 77: 
          { return XQ_DECIMAL_LITERAL;
          }
        case 321: break;
        case 111: 
          { pushState(_AS_OCC); yybegin(_EMPTY_BRACES); return KW_NODE;
          }
        case 322: break;
        case 20: 
          { popState(); return OP_PLUS;
          }
        case 323: break;
        case 165: 
          { yybegin(_SEP); return KW_UNORDERED;
          }
        case 324: break;
        case 130: 
          { yybegin(_ORDER_CLAUSE_MODIFIER_COLLATION); return KW_LEAST;
          }
        case 325: break;
        case 46: 
          { yypushback(yylength()); yybegin(_STEP_EXPR);
          }
        case 326: break;
        case 149: 
          { pushState(_AS_OCC); yybegin(_EMPTY_BRACES); return KW_COMMENT;
          }
        case 327: break;
        case 150: 
          { pushState(_CLOSE_BRACE); pushState(_AS_AorE); yybegin(_OPEN_BRACE); return KW_ELEMENT;
          }
        case 328: break;
        case 182: 
          { return KW_DESCENDING;
          }
        case 329: break;
        case 112: 
          { yypushback(yylength()); yybegin(_QUANT_EXPR);
          }
        case 330: break;
        case 116: 
          { pushState(_TYPESWITCH_EXPR_CASE2); pushState(_TYPESWITCH_EXPR_RETURN); yybegin(_TYPESWITCH_EXPR_CASE_); return KW_CASE;
          }
        case 331: break;
        case 120: 
          { yybegin(_DECLARE_DEFAULT_ORDER_EMPTY); return KW_EMPTY;
          }
        case 332: break;
        case 184: 
          { yybegin(_PRESERVE_OR_STRIP); return KW_CONSTRUCTION;
          }
        case 333: break;
        case 103: 
          { pushState(_FLWOR_HEAD); yypushback(yylength()); yybegin(_FOR_CLAUSE);
          }
        case 334: break;
        case 45: 
          { yypushback(1); pushState(_TYPESWITCH_EXPR_CASE_AS); yybegin(_VARNAME);
          }
        case 335: break;
        case 81: 
          { return XQ_STR_ESCAPE_QUOTE;
          }
        case 336: break;
        case 156: 
          { pushState(_SEP); yybegin(_URILITERAL); return KW_BASE_URI;
          }
        case 337: break;
        case 90: 
          { yybegin(_PREDICATE_LIST); return XQ_DECIMAL_LITERAL;
          }
        case 338: break;
        case 74: 
          { popState(); return BAD_CHARACTER;
          }
        case 339: break;
        case 57: 
          { pushState(_PREDICATE_LIST); yybegin(_NODE_TEST); return OP_AT;
          }
        case 340: break;
        case 80: 
          { pushState(); return XQ_COMMENT_START;
          }
        case 341: break;
        case 48: 
          { return OP_MINUS;
          }
        case 342: break;
        case 148: 
          { pushState(_AS_OCC); pushState(_AS_AorE); yybegin(_OPEN_BRACE); return KW_ELEMENT;
          }
        case 343: break;
        case 29: 
          { yybegin(_CLOSE_BRACE); return OP_QUESTION;
          }
        case 344: break;
        case 163: 
          { pushState(_PREDICATE_LIST); pushState(_NODE_TEST); yybegin(_COLONCOLON); return KW_DESCENDANT;
          }
        case 345: break;
        case 27: 
          { yybegin(_AS_AorE_); return OP_STAR;
          }
        case 346: break;
        case 72: 
          { popState(); return XQ_NCNAME;
          }
        case 347: break;
        case 175: 
          { pushState(_PREDICATE_LIST); pushState(_NODE_TEST); yybegin(_COLONCOLON); return KW_ATTRIBUTE;
          }
        case 348: break;
        case 161: 
          { yybegin(_SEP); return KW_PRESERVE;
          }
        case 349: break;
        case 132: 
          { yybegin(_MODULE); return KW_MODULE;
          }
        case 350: break;
        case 181: 
          { yybegin(_TYPESWITCH_EXPR_); return KW_TYPESWITCH;
          }
        case 351: break;
        case 86: 
          { yypushback(yylength()); yybegin(_IF_EXPR);
          }
        case 352: break;
        case 2: 
          { return WHITE_SPACE;
          }
        case 353: break;
        case 64: 
          { yypushback(1); yybegin(_ORDER_CLAUSE_MODIFIER_COLLATION);
          }
        case 354: break;
        case 11: 
          { yybegin(_DECLARE_COPYNS__); return OP_COMMA;
          }
        case 355: break;
        case 136: 
          { yybegin(_IMPORT_SCHEMA); return KW_SCHEMA;
          }
        case 356: break;
        case 21: 
          { popState(); return OP_STAR;
          }
        case 357: break;
        case 33: 
          { pushState(_CLOSE_CURLY); pushState(_EXPR_LIST); yybegin(_EXPR_SINGLE); return OP_LCURLY;
          }
        case 358: break;
        case 8: 
          { return XQ_STR_CHAR;
          }
        case 359: break;
        case 39: 
          { pushState(_QUANT_EXPR_LIST); pushState(_QUANT_EXPR_IN); yybegin(_PARAM); return OP_COMMA;
          }
        case 360: break;
        case 56: 
          { pushState(_PREDICATE_LIST); yybegin(_EXPR_LIST_OR_RBRACE); return OP_LBRACE;
          }
        case 361: break;
        case 6: 
          { return BAD_CHARACTER;
          }
        case 362: break;
        case 47: 
          { return OP_PLUS;
          }
        case 363: break;
        case 153: 
          { pushState(_SEP); yybegin(_STRINGLITERAL); return KW_ENCODING;
          }
        case 364: break;
        case 54: 
          { pushState(_PREDICATE_LIST); yypushback(1); yybegin(_VARNAME);
          }
        case 365: break;
        case 146: 
          { yybegin(_IMPORT_SCHEMA_DEFAULT); return KW_DEFAULT;
          }
        case 366: break;
        case 137: 
          { yybegin(_EXPR_SINGLE); return KW_RETURN;
          }
        case 367: break;
        case 9: 
          { popState(); return XQ_STR_END;
          }
        case 368: break;
        case 15: 
          { yypushback(yylength()); popState();
          }
        case 369: break;
        case 104: 
          { yybegin(_VALIDATE_EXPR_); return KW_LAX;
          }
        case 370: break;
        case 96: 
          { popState(); return OP_COLONCOLON;
          }
        case 371: break;
        case 17: 
          { yypushback(1); pushState(_AS); yybegin(_VARNAME);
          }
        case 372: break;
        case 128: 
          { yybegin(_ORDER_CLAUSE_BY); return KW_ORDER;
          }
        case 373: break;
        case 105: 
          { yybegin(_PREDICATE_LIST); return XQ_DOUBLE_LITERAL;
          }
        case 374: break;
        case 18: 
          { yypushback(yylength()); pushState(_AS_OCC); yybegin(_QNAME);
          }
        case 375: break;
        case 40: 
          { pushState(_TYPESWITCH_EXPR__); pushState(_EXPR_LIST); yybegin(_EXPR_SINGLE); return OP_LBRACE;
          }
        case 376: break;
        case 115: 
          { pushState(_QUANT_EXPR_IN); yybegin(_PARAM); return KW_SOME;
          }
        case 377: break;
        case 110: 
          { yybegin(_EMPTY_BRACES); return KW_VOID;
          }
        case 378: break;
        case 12: 
          { yybegin(STR_START_QUOTE); return XQ_STR_START;
          }
        case 379: break;
        case 58: 
          { yypushback(yylength()); yybegin(_WILDCARD_QNAME);
          }
        case 380: break;
        case 131: 
          { yybegin(_XQUERY); return KW_XQUERY;
          }
        case 381: break;
        case 169: 
          { pushState(_SEP); yybegin(_URILITERAL); return KW_NAMESPACE;
          }
        case 382: break;
        case 94: 
          { yybegin(_EXPR_SINGLE); return KW_IN;
          }
        case 383: break;
        case 50: 
          { 
          }
        case 384: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
