/* The following code was generated by JFlex 1.4.3 on 11/04/11 12:05 */

package org.mn.plug.idea.xq4idea.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

// this lexer follows the principles set out in http://www.w3.org/TR/xquery-xpath-parsing/
/**
 * Generated lexer
 */
@SuppressWarnings({"UnusedDeclaration", "UnusedAssignment", "FieldCanBeLocal", "AccessStaticViaInstance", "JavaDoc", "ConstantConditions"})

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 11/04/11 12:05 from the specification file
 * <tt>/home/matt/projects/opensource/github/xq4idea/source/xq4idea/src/org/mn/plug/idea/xq4idea/lang/lexer/_XQueryLexer.flex</tt>
 */
class _XQueryLexer extends AbstractLexer implements FlexLexer, XQueryTokenTypes {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int _AS_SATTR = 80;
  public static final int _WILDCARD_QNAME_ = 284;
  public static final int _QNAME = 276;
  public static final int _RANGE_EXPR = 142;
  public static final int _TREAT_EXPR = 154;
  public static final int _PREDICATE_LIST = 186;
  public static final int _AS_DN = 74;
  public static final int _INSTANCE_OF_EXPR = 152;
  public static final int _ORDER_CLAUSE_BY = 218;
  public static final int _ORDER_CLAUSE_MODIFIER_EMPTY = 224;
  public static final int _QNAME_LOCAL = 280;
  public static final int _AS_PI = 76;
  public static final int _XML_PI_NAME = 232;
  public static final int _IMPORT_SCHEMA = 46;
  public static final int STR_START_APOS = 12;
  public static final int _UNION_EXPR = 148;
  public static final int _XQUERY = 20;
  public static final int _ORDER_CLAUSE = 216;
  public static final int _OPEN_CURLY = 254;
  public static final int _AS = 68;
  public static final int _DECLARE_VARIABLE = 42;
  public static final int _AS_SELEM = 88;
  public static final int _XQUERY_VERSION = 22;
  public static final int _FORWARD_STEP = 180;
  public static final int _OPEN_BRACE = 250;
  public static final int _IMPORT = 44;
  public static final int _ADD_EXPR = 144;
  public static final int _QUANT_EXPR = 110;
  public static final int _EMPTY_BRACES = 246;
  public static final int _IMPORT_MODULE = 52;
  public static final int _DECLARE_DEFAULT_ORDER_EMPTY = 38;
  public static final int YYINITIAL = 0;
  public static final int _CAST_EXPR = 158;
  public static final int _NODE_TEST = 184;
  public static final int _STR_COMMON_CONTENT = 14;
  public static final int _VALIDATE_EXPR = 164;
  public static final int _ATLIST = 62;
  public static final int _LET_CLAUSE = 208;
  public static final int _EMPTY_BRACES_ = 248;
  public static final int STR_START_QUOTE = 10;
  public static final int _FOR_CLAUSE = 196;
  public static final int _EXPR_LIST = 92;
  public static final int _FOR_CLAUSE_VAR = 200;
  public static final int _TYPESWITCH_EXPR_CASE_ = 132;
  public static final int _PARENTHESIZED_EXPR = 178;
  public static final int _STABLE_ORDER_CLAUSE = 230;
  public static final int _FOR_CLAUSE_ = 198;
  public static final int _PATH_EXPR = 172;
  public static final int _COLON = 268;
  public static final int _IMPORT_SCHEMA_DEFAULT = 48;
  public static final int _TYPESWITCH_EXPR_ = 120;
  public static final int _FOR_CLAUSE_VAR_POS = 202;
  public static final int _ORDER_CLAUSE_LIST = 220;
  public static final int _CLOSE_CURLY = 256;
  public static final int _TYPESWITCH_EXPR_DEFAULT = 124;
  public static final int _TYPESWITCH_EXPR_CASE2 = 130;
  public static final int _NCNAME = 274;
  public static final int _STEP_EXPR = 182;
  public static final int _XML_PI_CONTENT = 234;
  public static final int _DECLARE = 26;
  public static final int _VALUE_EXPR = 162;
  public static final int _TYPESWITCH_EXPR_CASE_AS = 134;
  public static final int _LET_CLAUSE_ = 210;
  public static final int _AS_AorE__ = 86;
  public static final int _CLOSE_BRACE = 252;
  public static final int _AS_ = 70;
  public static final int _INTERSECT_EXPR = 150;
  public static final int _XML_ATTR_VALUE = 242;
  public static final int _SEP = 262;
  public static final int _MODULE = 24;
  public static final int EXPR_COMMENT = 2;
  public static final int _DECLARE_DEFAULT_NAMESPACE = 40;
  public static final int _ORDER_CLAUSE_MODIFIER = 222;
  public static final int _CASTABLE_EXPR = 156;
  public static final int _IF_EXPR_ELSE = 108;
  public static final int _EXPR_SINGLE = 90;
  public static final int _DECLARE_COPYNS__ = 32;
  public static final int _NAMESPACEDECL_ = 60;
  public static final int _URILITERAL = 56;
  public static final int _VALIDATE_EXPR_ = 168;
  public static final int _TYPESWITCH_EXPR_CASE = 128;
  public static final int _FOR_CLAUSE_VAR_POS_ = 204;
  public static final int _FILTER_EXPR = 174;
  public static final int _IF_EXPR = 100;
  public static final int _TYPESWITCH_EXPR_DEFAULT_ = 126;
  public static final int _IMPORT_SCHEMA_DEFAULT_ELEMENT = 50;
  public static final int _OR_EXPR = 138;
  public static final int _PRIMARY_EXPR = 176;
  public static final int _INSTANCEOF_EXPR = 160;
  public static final int _OPEN_SQUARE = 258;
  public static final int _MULT_EXPR = 146;
  public static final int _EXPR_LIST_IN_CURLY = 94;
  public static final int _LET_CLAUSE_VAR = 212;
  public static final int _VARNAME = 264;
  public static final int _XML_ATTRLIST_START = 238;
  public static final int _PRESERVE_OR_STRIP = 54;
  public static final int _EQUALS = 272;
  public static final int _TYPESWITCH_EXPR = 118;
  public static final int _TYPESWITCH_EXPR_RETURN = 136;
  public static final int NAMESPACEDECL = 8;
  public static final int _PARAM = 66;
  public static final int _QNAME_ = 278;
  public static final int _XML_ATTR_NAME = 240;
  public static final int _IF_EXPR__ = 104;
  public static final int _QUANT_EXPR_IN = 114;
  public static final int _IF_EXPR_ = 102;
  public static final int _ATLIST_ = 64;
  public static final int _EXPR_LIST_OR_RBRACE = 98;
  public static final int _FLWOR_HEAD = 188;
  public static final int _FOR_CLAUSE_VAR_IN = 206;
  public static final int _COLONCOLON = 270;
  public static final int _OPT_EXPR_LIST_IN_BRACE = 96;
  public static final int _DECLARE_COPYNS_ = 30;
  public static final int _AS_AorE = 82;
  public static final int _XML_STR_START_APOS = 18;
  public static final int _ORDER_CLAUSE_MODIFIER_COLLATION = 228;
  public static final int DECLAREORDERING = 6;
  public static final int _XML_STR_COMMON_CONTENT = 244;
  public static final int _QUANT_EXPR_SATISFIES = 116;
  public static final int _XML_PI_END = 236;
  public static final int _VALIDATE_EXPR__ = 170;
  public static final int _TYPESWITCH_EXPR__ = 122;
  public static final int _DECLARE_DEFAULT = 34;
  public static final int XML_COMMENT = 4;
  public static final int _VALIDATE_EXPR_X = 166;
  public static final int _ORDER_CLAUSE_MODIFIER_EMPTY_ = 226;
  public static final int _FLWOR_BODY3 = 194;
  public static final int _XML_STR_START_QUOTE = 16;
  public static final int _FLWOR_BODY2 = 192;
  public static final int _FLWOR_BODY1 = 190;
  public static final int _WILDCARD_QNAME_LOCAL = 286;
  public static final int _STAR = 266;
  public static final int _CLOSE_SQUARE = 260;
  public static final int _AS_OCC = 72;
  public static final int _AS_AorE_ = 84;
  public static final int _WHERE_CLAUSE = 214;
  public static final int _DECLARE_DEFAULT_ORDER = 36;
  public static final int _WILDCARD_QNAME = 282;
  public static final int _STRINGLITERAL = 58;
  public static final int _DECLARE_COPYNS = 28;
  public static final int _QUANT_EXPR_LIST = 112;
  public static final int _IF_EXPR_THEN = 106;
  public static final int _AS_ATTR = 78;
  public static final int _AND_EXPR = 140;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 
    24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 28, 28, 29, 29, 30, 30, 
    31, 31, 32, 32, 33, 33, 34, 34, 35, 35, 36, 36, 37, 37, 38, 38, 
    38, 38, 39, 39, 40, 40, 41, 41, 38, 38, 42, 42, 43, 43, 44, 44, 
    45, 45, 46, 46, 47, 47, 48, 48, 49, 49, 50, 50, 51, 51, 52, 52, 
    53, 53, 54, 54, 55, 55, 56, 56, 57, 57, 58, 58, 59, 59, 60, 60, 
    61, 61, 62, 62, 63, 63, 64, 64, 65, 65, 38, 38, 38, 38, 38, 38, 
    38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 
    66, 66, 38, 38, 38, 38, 67, 67, 44, 44, 38, 38, 38, 38, 68, 68, 
    38, 38, 38, 38, 38, 38, 69, 69, 70, 70, 71, 71, 72, 72, 73, 73, 
    74, 74, 75, 75, 76, 76, 77, 77, 38, 38, 78, 78, 38, 38, 79, 79, 
    80, 80, 81, 81, 82, 82, 83, 83, 84, 84, 85, 85, 86, 86, 87, 87, 
    88, 88, 89, 89, 90, 90, 91, 91, 92, 92, 93, 93, 94, 94, 95, 95, 
    96, 96, 97, 97, 98, 98, 99, 99, 100, 100, 101, 101, 100, 100, 102, 102, 
    103, 103, 38, 38, 104, 104, 105, 105, 106, 106, 107, 107, 108, 108, 109, 109, 
    110, 110, 111, 111, 112, 112, 113, 113, 114, 114, 115, 115, 116, 116, 117, 117
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\2\1\2\0\1\1\22\0\1\1\1\65\1\54\1\7\1\52"+
    "\1\0\1\6\1\55\1\60\1\56\1\34\1\5\1\50\1\27\1\3"+
    "\1\61\12\2\1\31\1\10\1\64\1\47\1\70\1\53\1\66\4\12"+
    "\1\4\1\12\24\30\1\67\1\0\1\72\1\0\1\30\1\0\1\16"+
    "\1\45\1\41\1\40\1\35\1\46\1\15\1\51\1\42\2\30\1\13"+
    "\1\17\1\44\1\23\1\20\1\21\1\36\1\24\1\14\1\22\1\43"+
    "\1\57\1\11\1\37\1\30\1\62\1\0\1\71\1\63\53\0\1\32"+
    "\12\0\1\32\1\0\1\26\2\0\1\32\5\0\27\30\1\0\37\30"+
    "\1\0\72\30\2\32\13\30\2\32\10\30\1\32\65\30\1\32\104\30"+
    "\11\32\44\30\3\32\2\30\4\32\36\30\37\32\31\0\131\30\22\32"+
    "\7\30\4\0\12\32\2\33\16\0\5\32\11\0\1\32\21\0\106\26"+
    "\32\0\2\26\30\0\1\32\13\0\1\30\1\26\3\30\1\0\1\30"+
    "\1\0\24\30\1\0\54\30\1\0\7\30\3\32\1\30\1\32\1\30"+
    "\1\32\1\30\1\32\1\30\1\32\22\30\2\32\1\0\5\32\4\0"+
    "\1\32\14\30\1\32\102\30\1\32\14\30\1\32\44\30\1\0\4\26"+
    "\3\0\6\32\65\30\2\32\2\30\2\32\2\30\2\32\1\0\34\30"+
    "\2\32\10\30\2\0\2\30\6\0\20\32\41\0\46\30\2\0\1\30"+
    "\7\0\46\30\1\32\11\0\21\26\1\0\27\26\1\0\3\26\1\0"+
    "\1\26\1\0\2\26\1\0\1\26\13\0\33\30\5\0\3\30\56\0"+
    "\32\30\5\0\1\33\12\30\10\26\15\0\12\26\4\0\2\32\1\26"+
    "\107\30\2\32\5\30\1\32\17\30\1\32\4\30\1\0\1\30\17\26"+
    "\2\30\2\26\1\0\4\26\2\32\12\26\3\32\2\0\1\32\20\0"+
    "\1\32\1\0\36\32\35\0\3\32\60\0\46\32\13\0\1\32\u014f\0"+
    "\3\26\1\32\65\30\2\0\1\26\1\30\20\26\2\0\1\32\4\26"+
    "\3\0\12\30\2\26\2\0\12\26\21\0\3\26\1\0\10\30\2\0"+
    "\2\30\2\0\26\30\1\0\7\30\1\0\1\30\3\0\4\30\2\0"+
    "\1\26\1\32\7\26\2\0\2\26\2\0\3\26\11\0\1\26\4\0"+
    "\2\30\1\0\3\30\2\26\2\0\12\26\2\30\20\0\1\26\2\0"+
    "\6\30\4\0\2\30\2\0\26\30\1\0\7\30\1\0\2\30\1\0"+
    "\2\30\1\0\2\30\2\0\1\26\1\0\5\26\4\0\2\26\2\0"+
    "\3\26\13\0\4\30\1\0\1\30\7\0\12\26\2\26\3\30\14\0"+
    "\3\26\1\0\7\30\1\32\1\30\1\0\3\30\1\0\26\30\1\0"+
    "\7\30\1\0\2\30\1\0\5\30\2\0\1\26\1\30\10\26\1\0"+
    "\3\26\1\0\3\26\2\0\1\32\17\0\1\30\1\32\4\0\12\26"+
    "\21\0\3\26\1\0\10\30\2\0\2\30\2\0\26\30\1\0\7\30"+
    "\1\0\2\30\1\0\1\32\4\30\2\0\1\26\1\30\6\26\3\0"+
    "\2\26\2\0\3\26\10\0\2\26\4\0\2\30\1\0\3\30\4\0"+
    "\12\26\1\0\1\32\20\0\1\26\1\33\1\0\6\30\3\0\3\30"+
    "\1\0\4\30\3\0\2\30\1\0\1\30\1\0\2\30\3\0\2\30"+
    "\3\0\3\30\3\0\10\30\1\0\3\30\4\0\5\26\3\0\3\26"+
    "\1\0\4\26\11\0\1\26\17\0\11\26\21\0\3\26\1\0\10\30"+
    "\1\0\3\30\1\0\27\30\1\0\12\30\1\0\5\30\4\0\7\26"+
    "\1\0\3\26\1\0\4\26\7\0\2\26\11\0\2\30\4\0\12\26"+
    "\22\0\2\26\1\0\10\30\1\0\3\30\1\0\27\30\1\0\12\30"+
    "\1\0\5\30\3\0\1\32\7\26\1\0\3\26\1\0\4\26\7\0"+
    "\2\26\7\0\1\30\1\0\2\30\4\0\12\26\22\0\2\26\1\0"+
    "\10\30\1\0\3\30\1\0\27\30\1\0\20\30\4\0\6\26\2\0"+
    "\3\26\1\0\4\26\11\0\1\26\10\0\2\30\4\0\12\26\25\0"+
    "\22\32\3\0\30\32\1\0\11\32\1\0\1\32\2\0\7\32\72\0"+
    "\56\30\1\32\1\30\1\26\2\30\7\26\5\0\6\30\1\33\10\26"+
    "\1\0\12\26\47\0\2\30\1\0\1\30\2\0\2\30\1\0\1\30"+
    "\2\0\1\30\6\0\4\30\1\0\7\30\1\0\3\30\1\0\1\30"+
    "\1\0\1\30\2\0\2\30\1\0\2\30\1\32\1\30\1\26\2\30"+
    "\6\26\1\0\2\26\1\30\2\0\5\30\1\0\1\33\1\0\6\26"+
    "\2\0\12\26\2\0\2\32\42\0\1\32\27\0\2\26\6\0\12\26"+
    "\13\0\1\26\1\0\1\26\1\0\1\26\4\0\2\26\10\30\1\0"+
    "\41\30\1\32\6\0\24\26\1\0\2\26\4\33\4\0\6\26\1\0"+
    "\1\26\1\0\25\26\3\0\7\26\1\0\1\26\106\0\42\32\1\0"+
    "\5\32\1\0\2\32\45\0\6\32\112\0\46\30\12\0\47\30\2\32"+
    "\7\0\1\30\1\32\2\30\1\32\3\30\1\32\1\30\1\32\2\30"+
    "\1\32\5\30\51\32\1\30\1\32\1\30\1\32\1\30\13\32\1\30"+
    "\1\32\1\30\1\32\1\30\3\32\2\30\3\32\1\30\5\0\3\30"+
    "\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30\3\32\2\30"+
    "\3\32\2\30\1\32\1\30\50\32\1\30\4\32\5\0\1\30\2\32"+
    "\1\30\2\32\2\30\7\32\2\30\1\32\1\30\1\32\7\30\50\32"+
    "\1\30\4\32\1\30\10\32\1\30\6\0\7\32\1\0\77\32\1\0"+
    "\1\32\1\0\4\32\2\0\7\32\1\0\1\32\1\0\4\32\2\0"+
    "\47\32\1\0\1\32\1\0\4\32\2\0\37\32\1\0\1\32\1\0"+
    "\4\32\2\0\7\32\1\0\1\32\1\0\4\32\2\0\7\32\1\0"+
    "\7\32\1\0\27\32\1\0\37\32\1\0\1\32\1\0\4\32\2\0"+
    "\7\32\1\0\47\32\1\0\23\32\105\0\125\32\14\0\u026c\32\2\0"+
    "\10\32\12\0\32\32\5\0\113\32\25\0\15\32\1\0\4\32\16\0"+
    "\22\32\16\0\22\32\16\0\15\32\1\0\3\32\17\0\64\32\43\0"+
    "\1\32\4\0\1\32\103\0\130\32\10\0\51\32\127\0\35\32\63\0"+
    "\36\32\2\0\5\32\u038b\0\154\32\224\0\234\30\4\0\132\30\6\0"+
    "\26\30\2\0\6\30\2\0\46\30\2\0\6\30\2\0\10\30\1\0"+
    "\1\30\1\0\1\30\1\0\1\30\1\0\37\30\2\0\65\30\1\0"+
    "\7\30\1\0\1\30\3\0\3\30\1\0\7\30\3\0\4\30\2\0"+
    "\6\30\4\0\15\30\5\0\3\30\1\0\7\30\164\0\1\32\15\0"+
    "\1\32\120\0\15\26\4\0\1\26\40\0\1\32\4\0\1\32\2\0"+
    "\12\32\1\0\1\32\3\0\5\32\6\0\1\32\1\0\1\30\1\0"+
    "\1\32\1\0\2\30\2\32\1\25\3\32\1\0\7\32\3\0\3\32"+
    "\5\0\5\32\66\0\3\25\u0e82\0\1\33\1\32\1\25\31\0\11\25"+
    "\6\26\1\0\5\33\5\0\2\32\4\0\124\30\2\32\2\0\2\26"+
    "\2\0\2\33\1\32\1\0\132\30\1\0\3\33\1\32\5\0\50\30"+
    "\4\0\136\32\21\0\30\32\70\0\20\32\u0200\0\u19b6\32\112\0\u51a6\30"+
    "\132\0\u048d\32\u0773\0\u2ba4\30\134\0\u0800\0\u1900\0\u012e\32\2\0\73\32"+
    "\225\0\7\32\14\0\5\32\5\0\1\32\1\0\12\32\1\0\15\32"+
    "\1\0\5\32\1\0\1\32\1\0\2\32\1\0\2\32\1\0\154\32"+
    "\41\0\u016b\32\22\0\100\32\2\0\66\32\50\0\14\32\164\0\5\32"+
    "\1\0\207\32\44\0\32\32\6\0\32\32\13\0\131\32\3\0\6\32"+
    "\2\0\6\32\2\0\6\32\2\0\3\32\41\0\2\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\166\0\1\1\1\2\1\3\6\1\3\4\1\5\1\6"+
    "\2\1\1\7\1\10\1\11\2\12\2\13\1\14\1\15"+
    "\2\16\1\1\1\17\12\1\1\20\24\1\1\21\1\22"+
    "\1\23\2\24\1\25\1\26\1\24\13\27\1\30\1\31"+
    "\1\32\1\33\2\1\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\10\43\1\44\1\45\1\44\1\46\1\47"+
    "\1\50\1\51\1\1\1\52\1\53\4\1\1\54\3\1"+
    "\1\55\1\56\1\1\1\57\1\60\1\1\1\61\1\62"+
    "\2\1\2\63\1\64\1\65\2\63\1\66\2\1\1\67"+
    "\1\70\1\71\1\72\11\70\1\73\1\74\1\75\1\70"+
    "\1\76\5\77\1\32\6\77\1\24\1\100\6\1\1\101"+
    "\1\24\2\1\1\102\3\1\1\103\4\104\3\105\2\1"+
    "\1\44\1\1\1\6\2\106\1\6\2\107\1\1\1\24"+
    "\1\110\1\111\1\112\1\113\1\13\1\114\1\13\1\115"+
    "\1\116\1\117\1\120\1\121\1\122\1\123\1\1\1\124"+
    "\1\125\1\126\1\127\2\126\1\1\1\130\1\131\5\0"+
    "\1\132\1\133\1\134\3\0\1\135\1\136\4\0\1\137"+
    "\1\140\27\0\1\141\11\0\1\142\1\143\1\0\12\27"+
    "\7\0\1\144\1\0\1\145\4\0\1\146\4\0\1\143"+
    "\2\0\1\147\2\0\1\150\1\0\1\151\1\152\1\0"+
    "\12\152\1\153\2\0\4\77\1\0\6\77\4\0\1\154"+
    "\1\155\3\0\1\156\7\0\2\106\1\157\5\0\1\160"+
    "\1\161\1\162\1\163\1\164\1\165\1\166\5\0\1\167"+
    "\51\0\13\27\2\0\1\37\1\170\3\0\1\171\12\0"+
    "\1\172\1\0\1\173\1\0\13\152\1\0\14\77\3\0"+
    "\1\174\1\175\11\0\1\176\1\111\14\0\1\177\1\0"+
    "\1\200\42\0\1\201\6\27\1\202\1\203\1\204\3\0"+
    "\1\205\1\0\1\206\1\207\1\210\4\0\1\211\3\0"+
    "\6\152\1\212\3\152\1\213\1\201\6\77\1\202\1\203"+
    "\1\204\14\0\1\214\1\0\1\215\27\0\1\216\3\0"+
    "\1\217\1\220\12\0\1\221\6\27\3\0\1\222\6\0"+
    "\7\152\1\223\1\152\6\77\1\224\1\0\1\225\1\226"+
    "\1\227\2\0\1\230\1\231\3\0\1\232\1\233\1\0"+
    "\1\234\5\0\1\235\22\0\1\236\1\237\5\0\6\27"+
    "\6\0\1\240\1\0\1\241\7\152\6\77\4\0\1\242"+
    "\1\243\1\0\1\244\1\245\3\0\1\246\10\0\1\247"+
    "\1\0\1\250\5\0\1\251\1\0\1\252\2\0\3\27"+
    "\1\253\1\27\1\254\1\0\1\255\3\0\1\256\1\0"+
    "\4\152\1\257\2\152\3\77\1\253\1\77\1\254\5\0"+
    "\1\260\1\0\1\261\2\0\1\262\1\0\1\263\1\0"+
    "\1\264\3\0\1\265\1\266\1\0\1\267\2\0\1\270"+
    "\5\27\4\0\1\271\1\152\1\272\4\152\5\77\2\0"+
    "\1\273\1\0\1\274\1\275\2\0\1\276\3\0\1\277"+
    "\1\300\1\301\1\302\1\303\4\27\2\0\1\304\1\0"+
    "\1\305\2\152\1\306\1\152\1\307\1\303\4\77\1\310"+
    "\1\0\1\311\4\0\1\312\4\27\1\0\1\313\1\314"+
    "\1\152\1\212\1\152\4\77\1\315\3\0\1\316\4\27"+
    "\1\0\3\152\4\77\1\0\1\317\1\0\4\27\1\0"+
    "\3\152\4\77\2\0\3\27\1\320\1\0\3\152\3\77"+
    "\1\320\1\0\1\321\2\27\1\322\1\323\3\152\2\77"+
    "\1\322\1\324\2\27\3\152\2\77\1\27\1\325\1\326"+
    "\2\152\1\77\1\325\1\27\1\152\1\327\1\77\1\27"+
    "\1\77\1\27\1\77\1\27\1\77\1\27\1\77\2\330";

  private static int [] zzUnpackAction() {
    int [] result = new int[1124];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\u0127\0\u0162\0\u019d"+
    "\0\u01d8\0\u0213\0\u024e\0\u0289\0\u02c4\0\u02ff\0\u033a\0\u0375"+
    "\0\u03b0\0\u03eb\0\u0426\0\u0461\0\u049c\0\u04d7\0\u0512\0\u054d"+
    "\0\u0588\0\u05c3\0\u05fe\0\u0639\0\u0674\0\u06af\0\u06ea\0\u0725"+
    "\0\u0760\0\u079b\0\u07d6\0\u0811\0\u084c\0\u0887\0\u08c2\0\u08fd"+
    "\0\u0938\0\u0973\0\u09ae\0\u09e9\0\u0a24\0\u0a5f\0\u0a9a\0\u0ad5"+
    "\0\u0b10\0\u0b4b\0\u0b86\0\u0bc1\0\u0bfc\0\u0c37\0\u0c72\0\u0cad"+
    "\0\u0ce8\0\u0d23\0\u0d5e\0\u0d99\0\u0dd4\0\u0e0f\0\u0e4a\0\u0e85"+
    "\0\u0ec0\0\u0efb\0\u0f36\0\u0f71\0\u0fac\0\u0fe7\0\u1022\0\u105d"+
    "\0\u1098\0\u10d3\0\u110e\0\u1149\0\u1184\0\u11bf\0\u11fa\0\u1235"+
    "\0\u1270\0\u12ab\0\u12e6\0\u1321\0\u135c\0\u1397\0\u13d2\0\u140d"+
    "\0\u1448\0\u1483\0\u14be\0\u14f9\0\u1534\0\u156f\0\u15aa\0\u15e5"+
    "\0\u1620\0\u165b\0\u1696\0\u16d1\0\u170c\0\u1747\0\u1782\0\u17bd"+
    "\0\u17f8\0\u1833\0\u186e\0\u18a9\0\u18e4\0\u191f\0\u195a\0\u1995"+
    "\0\u19d0\0\u1a0b\0\u1a46\0\u1a81\0\u1abc\0\u1af7\0\u1b32\0\u1b6d"+
    "\0\u1ba8\0\u1be3\0\u1c1e\0\u1c59\0\u1c94\0\u1ccf\0\u1d0a\0\u1b32"+
    "\0\u1d45\0\u1d80\0\u1b32\0\u1dbb\0\u1df6\0\u1e31\0\u1e6c\0\u1b32"+
    "\0\u1b32\0\u1ea7\0\u1ee2\0\u1b32\0\u1f1d\0\u1b32\0\u1b32\0\u1f58"+
    "\0\u1f93\0\u1fce\0\u1b32\0\u2009\0\u2044\0\u207f\0\u20ba\0\u20f5"+
    "\0\u2130\0\u216b\0\u21a6\0\u21e1\0\u221c\0\u1b32\0\u2257\0\u2292"+
    "\0\u22cd\0\u2308\0\u2343\0\u237e\0\u23b9\0\u23f4\0\u242f\0\u246a"+
    "\0\u24a5\0\u24e0\0\u251b\0\u2556\0\u2591\0\u25cc\0\u2607\0\u2642"+
    "\0\u267d\0\u26b8\0\u1b32\0\u1b32\0\u1b32\0\u26f3\0\u272e\0\u26f3"+
    "\0\u1b32\0\u2769\0\u27a4\0\u27df\0\u281a\0\u2855\0\u2890\0\u28cb"+
    "\0\u2906\0\u2941\0\u297c\0\u29b7\0\u29f2\0\u1b32\0\u1b32\0\u1b32"+
    "\0\u1b32\0\u2a2d\0\u2a68\0\u1b32\0\u2aa3\0\u1b32\0\u2ade\0\u1b32"+
    "\0\u1b32\0\u1b32\0\u1b32\0\u2b19\0\u2b54\0\u2b8f\0\u2bca\0\u2c05"+
    "\0\u2c40\0\u1d0a\0\u1b32\0\u1b32\0\u1d0a\0\u1b32\0\u1d0a\0\u2c7b"+
    "\0\u1b32\0\u2cb6\0\u1d0a\0\u1b32\0\u2cf1\0\u2d2c\0\u2d67\0\u2da2"+
    "\0\u1b32\0\u2ddd\0\u2e18\0\u2e53\0\u1d0a\0\u1b32\0\u2e8e\0\u2ec9"+
    "\0\u1b32\0\u2f04\0\u2f3f\0\u1b32\0\u2f7a\0\u2fb5\0\u1b32\0\u1b6d"+
    "\0\u1b32\0\u1b32\0\u2ff0\0\u1d0a\0\u302b\0\u3066\0\u30a1\0\u1b32"+
    "\0\u1b32\0\u30dc\0\u3117\0\u3152\0\u318d\0\u31c8\0\u3203\0\u323e"+
    "\0\u3279\0\u32b4\0\u32ef\0\u332a\0\u1b32\0\u1b32\0\u1d0a\0\u3365"+
    "\0\u1b32\0\u33a0\0\u33db\0\u3416\0\u3451\0\u348c\0\u34c7\0\u3502"+
    "\0\u353d\0\u3578\0\u35b3\0\u35ee\0\u3629\0\u3664\0\u1b32\0\u2b19"+
    "\0\u369f\0\u36da\0\u2c40\0\u3715\0\u3750\0\u26f3\0\u378b\0\u37c6"+
    "\0\u3801\0\u26f3\0\u383c\0\u3877\0\u38b2\0\u1b32\0\u1b32\0\u38ed"+
    "\0\u3928\0\u1d0a\0\u1b32\0\u3963\0\u1d0a\0\u399e\0\u39d9\0\u3a14"+
    "\0\u3a4f\0\u1b32\0\u3a8a\0\u3ac5\0\u3b00\0\u1b32\0\u3b00\0\u3b3b"+
    "\0\u1b32\0\u3b76\0\u3bb1\0\u1b32\0\u1b32\0\u3bec\0\u3c27\0\u3c62"+
    "\0\u1d0a\0\u1d0a\0\u1b32\0\u1b32\0\u1b32\0\u1b32\0\u1b32\0\u3c9d"+
    "\0\u1b32\0\u3cd8\0\u3d13\0\u1b32\0\u3d4e\0\u3d89\0\u3dc4\0\u1b32"+
    "\0\u3dff\0\u3e3a\0\u3e75\0\u3eb0\0\u3eeb\0\u3f26\0\u1b32\0\u1b32"+
    "\0\u1b32\0\u3f61\0\u3f9c\0\u3fd7\0\u1b32\0\u1b32\0\u4012\0\u404d"+
    "\0\u4088\0\u40c3\0\u1b32\0\u1b32\0\u40fe\0\u4139\0\u4174\0\u41af"+
    "\0\u41ea\0\u4225\0\u4260\0\u429b\0\u42d6\0\u4311\0\u434c\0\u4387"+
    "\0\u43c2\0\u43fd\0\u4438\0\u4473\0\u44ae\0\u44e9\0\u4524\0\u455f"+
    "\0\u459a\0\u45d5\0\u4610\0\u1b32\0\u464b\0\u4686\0\u46c1\0\u46fc"+
    "\0\u4737\0\u4772\0\u47ad\0\u47e8\0\u4823\0\u26f3\0\u26f3\0\u485e"+
    "\0\u4899\0\u48d4\0\u490f\0\u494a\0\u4985\0\u49c0\0\u49fb\0\u4a36"+
    "\0\u4a71\0\u4aac\0\u4ae7\0\u4b22\0\u4b5d\0\u4b98\0\u4bd3\0\u4c0e"+
    "\0\u4c49\0\u1b32\0\u4c84\0\u1b32\0\u4cbf\0\u4cfa\0\u4d35\0\u4d70"+
    "\0\u1b32\0\u4dab\0\u4de6\0\u4e21\0\u4e5c\0\u1b32\0\u4e97\0\u4ed2"+
    "\0\u1b32\0\u4f0d\0\u4f48\0\u4f83\0\u4fbe\0\u1b32\0\u3152\0\u4ff9"+
    "\0\u5034\0\u506f\0\u50aa\0\u50e5\0\u5120\0\u515b\0\u5196\0\u51d1"+
    "\0\u520c\0\u5247\0\u1b32\0\u5282\0\u52bd\0\u52f8\0\u5333\0\u536e"+
    "\0\u53a9\0\u53e4\0\u541f\0\u545a\0\u5495\0\u54d0\0\u550b\0\u5546"+
    "\0\u5581\0\u55bc\0\u55f7\0\u5632\0\u26f3\0\u1b32\0\u566d\0\u56a8"+
    "\0\u56e3\0\u1b32\0\u571e\0\u5759\0\u5794\0\u57cf\0\u580a\0\u5845"+
    "\0\u5880\0\u58bb\0\u58f6\0\u1b32\0\u5931\0\u596c\0\u59a7\0\u59e2"+
    "\0\u5a1d\0\u1b32\0\u1b32\0\u1b32\0\u1b32\0\u1b32\0\u1b32\0\u5a58"+
    "\0\u5a58\0\u5a93\0\u5ace\0\u5b09\0\u5b44\0\u1b32\0\u5b7f\0\u5bba"+
    "\0\u5bf5\0\u5c30\0\u5c6b\0\u5ca6\0\u5ce1\0\u5d1c\0\u5d57\0\u5d92"+
    "\0\u5dcd\0\u5e08\0\u5e43\0\u5e7e\0\u5eb9\0\u5ef4\0\u5f2f\0\u5f6a"+
    "\0\u5fa5\0\u5fe0\0\u601b\0\u6056\0\u6091\0\u60cc\0\u6107\0\u6142"+
    "\0\u617d\0\u61b8\0\u61f3\0\u622e\0\u6269\0\u62a4\0\u62df\0\u631a"+
    "\0\u6355\0\u6390\0\u63cb\0\u6406\0\u6441\0\u647c\0\u64b7\0\u64f2"+
    "\0\u652d\0\u6568\0\u65a3\0\u65de\0\u6619\0\u6654\0\u668f\0\u66ca"+
    "\0\u6705\0\u6740\0\u677b\0\u67b6\0\u67f1\0\u1b32\0\u682c\0\u6867"+
    "\0\u68a2\0\u1b32\0\u68dd\0\u6918\0\u6953\0\u698e\0\u69c9\0\u6a04"+
    "\0\u6a3f\0\u6a7a\0\u6ab5\0\u6af0\0\u1b32\0\u6b2b\0\u6b66\0\u6b66"+
    "\0\u6ba1\0\u6bdc\0\u6c17\0\u6c52\0\u6c8d\0\u6cc8\0\u6d03\0\u6d3e"+
    "\0\u6d79\0\u6db4\0\u6def\0\u6e2a\0\u6e65\0\u1b32\0\u6ea0\0\u6edb"+
    "\0\u6f16\0\u6f51\0\u6f8c\0\u6fc7\0\u7002\0\u703d\0\u7078\0\u70b3"+
    "\0\u70ee\0\u7129\0\u7164\0\u1b32\0\u1b32\0\u719f\0\u71da\0\u7215"+
    "\0\u7250\0\u728b\0\u72c6\0\u7301\0\u733c\0\u7377\0\u3a8a\0\u73b2"+
    "\0\u73ed\0\u7428\0\u7463\0\u749e\0\u74d9\0\u7514\0\u754f\0\u758a"+
    "\0\u75c5\0\u7600\0\u763b\0\u7676\0\u1b32\0\u76b1\0\u1b32\0\u76ec"+
    "\0\u7727\0\u7762\0\u779d\0\u77d8\0\u7813\0\u784e\0\u7889\0\u78c4"+
    "\0\u78ff\0\u793a\0\u7975\0\u79b0\0\u79eb\0\u7a26\0\u7a61\0\u7a9c"+
    "\0\u7ad7\0\u7b12\0\u7b4d\0\u7b88\0\u7bc3\0\u7bfe\0\u7c39\0\u7c74"+
    "\0\u7caf\0\u7cea\0\u7d25\0\u7d60\0\u7d9b\0\u7dd6\0\u7e11\0\u7e4c"+
    "\0\u7e87\0\u27a4\0\u7ec2\0\u7efd\0\u7f38\0\u7f73\0\u7fae\0\u7fe9"+
    "\0\u27a4\0\u27a4\0\u27a4\0\u8024\0\u805f\0\u809a\0\u1b32\0\u80d5"+
    "\0\u1b32\0\u1b32\0\u1b32\0\u8110\0\u814b\0\u8186\0\u81c1\0\u1b32"+
    "\0\u81fc\0\u8237\0\u8272\0\u82ad\0\u82e8\0\u8323\0\u835e\0\u8399"+
    "\0\u83d4\0\u3152\0\u840f\0\u844a\0\u8485\0\u1b32\0\u33a0\0\u84c0"+
    "\0\u84fb\0\u8536\0\u8571\0\u85ac\0\u85e7\0\u33a0\0\u33a0\0\u33a0"+
    "\0\u8622\0\u865d\0\u8698\0\u86d3\0\u870e\0\u8749\0\u8784\0\u87bf"+
    "\0\u87fa\0\u8835\0\u8870\0\u88ab\0\u1b32\0\u88e6\0\u1b32\0\u8921"+
    "\0\u895c\0\u8997\0\u89d2\0\u8a0d\0\u8a48\0\u8a83\0\u8abe\0\u8af9"+
    "\0\u8b34\0\u8b6f\0\u8baa\0\u8be5\0\u8c20\0\u8c5b\0\u8c96\0\u8cd1"+
    "\0\u8d0c\0\u8d47\0\u8d82\0\u8dbd\0\u8df8\0\u8e33\0\u1b32\0\u8e6e"+
    "\0\u8ea9\0\u8ee4\0\u1b32\0\u1b32\0\u8f1f\0\u8f5a\0\u8f95\0\u8fd0"+
    "\0\u900b\0\u9046\0\u9081\0\u90bc\0\u90f7\0\u9132\0\u1b32\0\u916d"+
    "\0\u91a8\0\u91e3\0\u921e\0\u9259\0\u9294\0\u92cf\0\u930a\0\u9345"+
    "\0\u1b32\0\u9380\0\u93bb\0\u93f6\0\u9431\0\u946c\0\u94a7\0\u94e2"+
    "\0\u951d\0\u9558\0\u9593\0\u95ce\0\u9609\0\u9644\0\u3152\0\u967f"+
    "\0\u96ba\0\u96f5\0\u9730\0\u976b\0\u97a6\0\u97e1\0\u1b32\0\u981c"+
    "\0\u1b32\0\u1b32\0\u1b32\0\u9857\0\u9892\0\u1b32\0\u1b32\0\u98cd"+
    "\0\u9908\0\u9943\0\u1b32\0\u1b32\0\u997e\0\u1b32\0\u99b9\0\u99f4"+
    "\0\u9a2f\0\u9a6a\0\u9aa5\0\u1b32\0\u9ae0\0\u9b1b\0\u9b56\0\u9b91"+
    "\0\u9bcc\0\u9c07\0\u9c42\0\u9c7d\0\u9cb8\0\u9cf3\0\u9d2e\0\u9d69"+
    "\0\u9da4\0\u9ddf\0\u9e1a\0\u9e55\0\u9e90\0\u9ecb\0\u1b32\0\u1b32"+
    "\0\u9f06\0\u9f41\0\u9f7c\0\u9fb7\0\u9ff2\0\ua02d\0\ua068\0\ua0a3"+
    "\0\ua0de\0\ua119\0\ua154\0\ua18f\0\ua1ca\0\ua205\0\ua240\0\ua27b"+
    "\0\ua2b6\0\u1b32\0\ua2f1\0\u1b32\0\ua32c\0\ua367\0\ua3a2\0\ua3dd"+
    "\0\ua418\0\ua453\0\ua48e\0\ua4c9\0\ua504\0\ua53f\0\ua57a\0\ua5b5"+
    "\0\ua5f0\0\ua62b\0\ua666\0\ua6a1\0\ua6dc\0\u1b32\0\u1b32\0\ua717"+
    "\0\u1b32\0\u1b32\0\ua752\0\ua78d\0\ua7c8\0\u1b32\0\ua803\0\ua83e"+
    "\0\ua879\0\ua8b4\0\ua8ef\0\ua92a\0\ua965\0\ua9a0\0\u1b32\0\ua9db"+
    "\0\u1b32\0\uaa16\0\uaa51\0\uaa8c\0\uaac7\0\uab02\0\u1b32\0\uab3d"+
    "\0\u1b32\0\uab78\0\uabb3\0\uabee\0\uac29\0\uac64\0\u27a4\0\uac9f"+
    "\0\u27a4\0\uacda\0\u1b32\0\uad15\0\uad50\0\uad8b\0\u1b32\0\uadc6"+
    "\0\uae01\0\uae3c\0\uae77\0\uaeb2\0\u3152\0\uaeed\0\uaf28\0\uaf63"+
    "\0\uaf9e\0\uafd9\0\u33a0\0\ub014\0\u33a0\0\ub04f\0\ub08a\0\ub0c5"+
    "\0\ub100\0\ub13b\0\u1b32\0\ub176\0\u1b32\0\ub1b1\0\ub1ec\0\u1b32"+
    "\0\ub227\0\u1b32\0\ub262\0\u1b32\0\ub29d\0\ub2d8\0\ub313\0\u1b32"+
    "\0\u1b32\0\ub34e\0\u1b32\0\ub389\0\ub3c4\0\u1b32\0\ub3ff\0\ub43a"+
    "\0\ub475\0\ub4b0\0\ub4eb\0\ub526\0\ub561\0\ub59c\0\ub5d7\0\u1b32"+
    "\0\ub612\0\ub64d\0\ub688\0\ub6c3\0\ub6fe\0\ub739\0\ub774\0\ub7af"+
    "\0\ub7ea\0\ub825\0\ub860\0\ub89b\0\ub8d6\0\u1b32\0\ub911\0\u1b32"+
    "\0\u1b32\0\ub94c\0\ub987\0\u1b32\0\ub9c2\0\ub9fd\0\uba38\0\u1b32"+
    "\0\u1b32\0\u1b32\0\u1b32\0\u27a4\0\uba73\0\ubaae\0\ubae9\0\ubb24"+
    "\0\ubb5f\0\ubb9a\0\u1b32\0\ubbd5\0\u3152\0\ubc10\0\ubc4b\0\u3152"+
    "\0\ubc86\0\ubcc1\0\u33a0\0\ubcfc\0\ubd37\0\ubd72\0\ubdad\0\u1b32"+
    "\0\ubde8\0\u1b32\0\ube23\0\ube5e\0\ube99\0\ubed4\0\u1b32\0\ubf0f"+
    "\0\ubf4a\0\ubf85\0\ubfc0\0\ubffb\0\u1b32\0\u1b32\0\uc036\0\uc071"+
    "\0\uc0ac\0\uc0e7\0\uc122\0\uc15d\0\uc198\0\u1b32\0\uc1d3\0\uc20e"+
    "\0\uc249\0\u1b32\0\uc284\0\uc2bf\0\uc2fa\0\uc335\0\uc370\0\uc3ab"+
    "\0\uc3e6\0\uc421\0\uc45c\0\uc497\0\uc4d2\0\uc50d\0\uc548\0\u1b32"+
    "\0\uc583\0\uc5be\0\uc5f9\0\uc634\0\uc66f\0\uc6aa\0\uc6e5\0\uc720"+
    "\0\uc75b\0\uc796\0\uc7d1\0\uc80c\0\uc847\0\uc882\0\uc8bd\0\uc8f8"+
    "\0\uc933\0\uc96e\0\u27a4\0\uc9a9\0\uc9e4\0\uca1f\0\uca5a\0\uca95"+
    "\0\ucad0\0\ucb0b\0\u33a0\0\ucb46\0\u1b32\0\ucb81\0\ucbbc\0\u27a4"+
    "\0\u1b32\0\ucbf7\0\ucc32\0\ucc6d\0\ucca8\0\ucce3\0\u33a0\0\u1b32"+
    "\0\ucd1e\0\ucd59\0\ucd94\0\ucdcf\0\uce0a\0\uce45\0\uce80\0\ucebb"+
    "\0\u27a4\0\u3152\0\ucef6\0\ucf31\0\ucf6c\0\u33a0\0\ucfa7\0\ucfe2"+
    "\0\u3152\0\ud01d\0\ud058\0\ud093\0\ud0ce\0\ud109\0\ud144\0\ud17f"+
    "\0\ud1ba\0\ud1f5\0\u27a4\0\u33a0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[1124];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\167\1\170\1\171\1\172\5\167\1\173\5\167\1\174"+
    "\20\167\1\175\1\167\1\176\15\167\1\177\12\167\31\200"+
    "\1\201\26\200\1\202\12\200\27\203\1\204\43\203\1\167"+
    "\1\170\20\167\1\205\1\206\34\167\1\177\13\167\1\170"+
    "\2\167\1\207\4\167\15\207\2\167\1\207\4\167\12\207"+
    "\2\167\1\207\5\167\1\207\1\177\12\167\6\210\1\211"+
    "\45\210\1\212\24\210\1\211\46\210\1\213\15\210\6\214"+
    "\1\215\64\214\6\216\1\217\45\216\1\220\5\216\1\217"+
    "\1\216\1\217\4\216\1\217\7\216\1\217\46\216\1\221"+
    "\4\216\1\217\1\216\1\217\4\216\1\217\1\216\1\167"+
    "\1\170\41\167\1\222\14\167\1\177\13\167\1\170\6\167"+
    "\1\223\24\167\1\224\22\167\1\177\13\167\1\170\42\167"+
    "\1\225\13\167\1\177\13\167\1\170\21\167\1\226\14\167"+
    "\1\227\1\230\1\167\1\231\1\232\1\233\12\167\1\177"+
    "\13\167\1\170\16\167\1\234\23\167\1\235\13\167\1\177"+
    "\13\167\1\170\46\167\1\236\7\167\1\177\13\167\1\170"+
    "\40\167\1\237\1\167\1\240\13\167\1\177\13\167\1\170"+
    "\21\167\1\241\11\167\1\242\3\167\1\243\4\167\1\244"+
    "\11\167\1\177\13\167\1\170\33\167\1\245\22\167\1\177"+
    "\13\167\1\170\11\167\1\246\1\167\1\247\42\167\1\177"+
    "\13\167\1\170\42\167\1\250\13\167\1\177\13\167\1\170"+
    "\27\167\1\251\3\167\1\252\22\167\1\177\13\167\1\170"+
    "\15\167\1\253\4\167\1\254\33\167\1\177\13\167\1\170"+
    "\36\167\1\255\3\167\1\256\13\167\1\177\13\167\1\170"+
    "\33\167\1\257\22\167\1\177\13\167\1\170\42\167\1\260"+
    "\13\167\1\177\13\167\1\170\42\167\1\256\13\167\1\177"+
    "\13\167\1\170\16\167\1\261\3\167\1\262\33\167\1\177"+
    "\13\167\1\170\52\167\1\263\1\264\2\167\1\177\13\167"+
    "\1\170\45\167\1\265\10\167\1\177\12\167\1\266\1\170"+
    "\14\266\1\267\55\266\1\170\46\266\1\270\22\266\1\167"+
    "\1\170\50\167\1\271\5\167\1\177\12\167\1\266\1\170"+
    "\14\266\1\272\54\266\1\167\1\170\2\167\1\273\4\167"+
    "\3\273\1\274\1\273\1\275\1\273\1\276\3\273\1\277"+
    "\1\273\2\167\1\273\4\167\1\300\2\273\1\301\1\302"+
    "\1\303\1\304\1\305\2\273\2\167\1\273\5\167\1\273"+
    "\1\177\12\167\5\306\1\307\26\306\1\310\16\306\1\311"+
    "\17\306\1\167\1\170\22\167\1\312\10\167\1\313\20\167"+
    "\1\314\1\167\1\177\13\167\1\170\2\167\1\315\4\167"+
    "\15\315\2\167\1\315\4\167\12\315\2\167\1\315\2\167"+
    "\2\316\1\314\1\315\1\177\13\167\1\170\56\167\1\177"+
    "\13\167\1\170\2\167\1\317\4\167\15\317\2\167\1\317"+
    "\3\167\1\320\12\317\2\167\1\317\4\167\1\314\1\317"+
    "\1\177\13\167\1\170\46\167\1\321\5\167\1\314\1\167"+
    "\1\177\13\167\1\170\51\167\1\322\2\167\1\314\1\167"+
    "\1\177\12\167\1\323\1\170\11\323\1\324\1\325\7\323"+
    "\1\326\10\323\1\327\4\323\1\330\3\323\1\331\11\323"+
    "\1\332\12\323\1\333\1\170\46\333\1\334\7\333\1\335"+
    "\12\333\1\167\1\170\56\167\1\177\1\167\1\336\11\167"+
    "\1\170\56\167\1\337\12\167\1\340\1\170\54\340\1\341"+
    "\14\340\1\167\1\170\40\167\1\342\15\167\1\177\13\167"+
    "\1\170\56\167\1\343\13\167\1\170\54\167\1\344\1\167"+
    "\1\177\13\167\1\170\12\167\1\345\43\167\1\177\13\167"+
    "\1\170\33\167\1\346\22\167\1\177\13\167\1\170\22\167"+
    "\1\347\10\167\1\350\22\167\1\177\12\167\1\333\1\170"+
    "\46\333\1\351\7\333\1\335\12\333\1\167\1\170\40\167"+
    "\1\352\15\167\1\177\13\167\1\170\22\167\1\353\33\167"+
    "\1\177\13\167\1\170\12\167\1\354\43\167\1\177\13\167"+
    "\1\170\56\167\1\355\13\167\1\170\54\167\1\356\1\167"+
    "\1\177\13\167\1\170\36\167\1\357\17\167\1\177\12\167"+
    "\1\360\1\170\50\360\1\361\20\360\1\167\1\170\37\167"+
    "\1\362\16\167\1\177\13\167\1\170\36\167\1\357\1\362"+
    "\16\167\1\177\12\167\1\363\1\170\50\363\1\364\20\363"+
    "\1\167\1\170\14\167\1\365\41\167\1\177\13\167\1\170"+
    "\34\167\1\366\21\167\1\177\12\167\1\367\1\370\3\367"+
    "\1\371\21\367\1\372\13\367\1\373\14\367\1\374\1\375"+
    "\11\367\1\167\1\170\11\167\1\376\10\167\1\377\33\167"+
    "\1\177\1\167\1\336\11\167\1\170\56\167\1\177\2\167"+
    "\1\u0100\7\167\1\u0101\1\170\1\u0102\1\u0103\1\u0104\4\u0101"+
    "\5\u0104\1\u0105\1\u0104\1\u0106\1\u0104\1\u0107\1\u0108\1\u0109"+
    "\1\u0104\2\u0101\1\u0104\4\u0101\3\u0104\1\u010a\1\u010b\4\u0104"+
    "\1\u010c\2\u0101\1\u0104\1\u010d\1\u0101\2\u010e\1\u0101\1\u0104"+
    "\1\u010f\3\u0101\1\u0110\1\u0101\1\u0111\4\u0101\1\167\1\170"+
    "\2\167\1\u0112\4\167\3\u0112\1\u0113\1\u0112\1\u0114\1\u0112"+
    "\1\u0115\3\u0112\1\u0116\1\u0112\2\167\1\u0112\3\167\1\u0117"+
    "\1\u0118\2\u0112\1\u0119\1\u011a\1\u011b\1\u011c\1\u011d\2\u0112"+
    "\2\167\1\u0112\5\167\1\u0112\1\177\12\167\1\u011e\1\170"+
    "\65\u011e\1\u011f\3\u011e\1\167\1\170\11\167\1\u0120\7\167"+
    "\1\u0121\1\u0122\11\167\1\366\7\167\1\u0123\10\167\1\u0124"+
    "\1\177\13\167\1\170\55\167\1\u0124\1\177\13\167\1\170"+
    "\21\167\1\u0121\1\u0122\32\167\1\u0124\1\177\13\167\1\170"+
    "\21\167\1\u0121\1\u0122\11\167\1\366\20\167\1\u0124\1\177"+
    "\13\167\1\170\44\167\1\u0125\11\167\1\177\12\167\1\266"+
    "\1\170\46\266\1\u0126\23\266\1\170\14\266\1\u0127\54\266"+
    "\1\167\1\170\40\167\1\u0128\15\167\1\177\13\167\1\170"+
    "\11\167\1\u0129\44\167\1\177\12\167\1\266\1\170\46\266"+
    "\1\u012a\22\266\1\167\1\170\27\167\1\251\26\167\1\177"+
    "\13\167\1\170\55\167\1\u012b\1\177\13\167\1\170\21\167"+
    "\1\u012c\34\167\1\177\13\167\1\170\43\167\1\u012d\12\167"+
    "\1\177\12\167\1\333\1\170\46\333\1\u012e\7\333\1\335"+
    "\12\333\1\u012f\1\170\14\u012f\1\u0130\21\u012f\1\u0131\17\u012f"+
    "\1\u0132\12\u012f\1\u0133\1\170\33\u0133\1\u0134\22\u0133\1\u0135"+
    "\12\u0133\1\167\1\170\11\167\1\u0136\1\167\1\u0137\42\167"+
    "\1\177\12\167\1\333\1\170\37\333\1\u0138\16\333\1\335"+
    "\12\333\1\167\1\170\22\167\1\u0139\33\167\1\177\12\167"+
    "\4\u013a\1\u013b\4\u013a\1\u013c\13\u013b\3\u013a\1\u013b\1\u013a"+
    "\2\u013b\1\u013a\12\u013b\2\u013a\1\u013b\1\u013a\1\u013d\3\u013a"+
    "\1\u013b\13\u013a\1\u013e\1\170\51\u013e\1\u013f\17\u013e\1\167"+
    "\1\170\51\167\1\u0140\4\167\1\177\12\167\1\u0141\1\u0142"+
    "\75\u0141\1\u0143\4\u0141\15\u0143\2\u0141\1\u0143\4\u0141\12\u0143"+
    "\2\u0141\1\u0143\5\u0141\1\u0143\13\u0141\1\167\1\170\52\167"+
    "\1\u0144\1\u0145\2\167\1\177\12\167\6\214\1\u0146\53\214"+
    "\1\u0147\6\214\1\u0148\1\214\1\167\1\170\56\167\1\u0149"+
    "\13\167\1\170\54\167\1\341\1\167\1\177\13\167\1\170"+
    "\56\167\1\u014a\13\167\1\170\56\167\1\177\1\167\1\u014b"+
    "\11\167\1\170\56\167\1\177\10\167\1\u014c\2\167\1\170"+
    "\56\167\1\177\11\167\1\u014d\1\167\1\170\6\167\1\223"+
    "\47\167\1\177\13\167\1\170\50\167\1\u014e\5\167\1\177"+
    "\13\167\1\170\32\167\1\310\23\167\1\177\13\167\1\170"+
    "\27\167\1\u014f\26\167\1\177\13\167\1\170\27\167\1\u0150"+
    "\26\167\1\177\13\167\1\170\45\167\1\u0151\10\167\1\177"+
    "\13\167\1\170\2\167\1\u0152\4\167\15\u0152\2\167\1\u0152"+
    "\4\167\12\u0152\2\167\1\u0152\5\167\1\u0152\1\177\13\167"+
    "\1\170\2\167\1\u0153\4\167\15\u0153\2\167\1\u0153\4\167"+
    "\12\u0153\2\167\1\u0153\5\167\1\u0153\1\177\12\167\31\214"+
    "\1\u0154\45\214\1\u0155\4\214\15\u0155\2\214\1\u0155\4\214"+
    "\12\u0155\2\214\1\u0155\5\214\1\u0155\13\214\1\167\1\170"+
    "\2\167\1\u0156\4\167\15\u0156\2\167\1\u0156\3\167\1\u0157"+
    "\12\u0156\2\167\1\u0156\5\167\1\u0156\1\177\12\167\31\214"+
    "\1\u0158\45\214\1\u0155\4\214\15\u0155\2\214\1\u0155\3\214"+
    "\1\310\12\u0155\2\214\1\u0155\5\214\1\u0155\13\214\74\0"+
    "\1\170\73\0\1\171\1\u0159\1\u015a\30\0\1\u015a\37\0"+
    "\1\u0159\111\0\1\u015b\74\0\1\u015c\104\0\1\u015d\54\0"+
    "\1\u015e\104\0\1\u015f\117\0\1\u0160\45\0\1\u0161\41\0"+
    "\27\203\1\u0162\43\203\44\0\1\u0163\64\0\1\u0164\36\0"+
    "\3\207\4\0\20\207\2\0\1\207\1\0\12\207\2\0"+
    "\1\207\5\0\1\207\67\0\1\u0165\73\0\1\u0166\24\0"+
    "\1\u0167\3\0\1\u0168\1\0\1\u0168\1\u0169\2\0\1\u016a"+
    "\125\0\1\u016b\73\0\1\u016c\52\0\1\u016d\101\0\1\u016e"+
    "\44\0\1\u016f\74\0\1\u0170\15\0\1\u0171\71\0\1\u0172"+
    "\60\0\1\u0173\65\0\1\u0174\72\0\1\u0175\72\0\1\u0176"+
    "\4\0\1\u0177\105\0\1\u0178\57\0\1\u0179\113\0\1\u017a"+
    "\51\0\1\u017b\105\0\1\u017c\47\0\1\u017d\102\0\1\u017e"+
    "\71\0\1\u017f\67\0\1\u0180\110\0\1\u0181\73\0\1\u0182"+
    "\52\0\1\u0183\123\0\1\u0184\34\0\1\u0185\104\0\1\u0186"+
    "\110\0\1\u0187\66\0\1\u0188\53\0\1\u0189\67\0\1\u018a"+
    "\75\0\1\u018b\112\0\1\u018c\50\0\1\u018d\56\0\1\266"+
    "\1\0\72\266\1\0\12\266\1\u018e\57\266\1\0\22\266"+
    "\1\u018f\46\266\2\0\3\273\4\0\20\273\1\u0190\1\0"+
    "\1\273\1\0\12\273\2\0\1\273\5\0\1\273\15\0"+
    "\3\273\4\0\20\273\1\u0190\1\0\1\273\1\0\1\u0191"+
    "\11\273\2\0\1\273\5\0\1\273\15\0\3\273\4\0"+
    "\3\273\1\u0192\14\273\1\u0190\1\0\1\273\1\0\12\273"+
    "\2\0\1\273\5\0\1\273\15\0\3\273\4\0\20\273"+
    "\1\u0190\1\0\1\273\1\0\1\273\1\u0193\10\273\2\0"+
    "\1\273\5\0\1\273\15\0\3\273\4\0\20\273\1\u0190"+
    "\1\0\1\273\1\0\4\273\1\u0194\5\273\2\0\1\273"+
    "\5\0\1\273\15\0\3\273\4\0\2\273\1\u0195\15\273"+
    "\1\u0190\1\0\1\273\1\0\12\273\2\0\1\273\5\0"+
    "\1\273\15\0\3\273\4\0\12\273\1\u0196\5\273\1\u0190"+
    "\1\0\1\273\1\0\12\273\2\0\1\273\5\0\1\273"+
    "\15\0\3\273\4\0\12\273\1\u0197\5\273\1\u0190\1\0"+
    "\1\273\1\0\12\273\2\0\1\273\5\0\1\273\15\0"+
    "\3\273\4\0\3\273\1\u0198\14\273\1\u0190\1\0\1\273"+
    "\1\0\12\273\2\0\1\273\5\0\1\273\15\0\3\273"+
    "\4\0\12\273\1\u0199\5\273\1\u0190\1\0\1\273\1\0"+
    "\12\273\2\0\1\273\5\0\1\273\15\0\3\273\4\0"+
    "\12\273\1\u019a\5\273\1\u0190\1\0\1\273\1\0\12\273"+
    "\2\0\1\273\5\0\1\273\54\0\1\u019b\44\0\1\u019c"+
    "\61\0\3\315\4\0\20\315\2\0\1\315\1\0\12\315"+
    "\2\0\1\315\5\0\1\315\15\0\3\317\4\0\20\317"+
    "\1\u019d\1\0\1\317\1\0\12\317\2\0\1\317\5\0"+
    "\1\317\50\0\1\u019e\74\0\1\u019f\56\0\1\u01a0\112\0"+
    "\1\u01a1\75\0\1\u01a2\47\0\1\u01a3\47\0\1\340\1\0"+
    "\54\340\1\0\14\340\46\0\1\u01a4\75\0\1\u01a5\34\0"+
    "\1\u01a6\102\0\1\u01a7\112\0\1\u01a8\73\0\1\u01a9\44\0"+
    "\1\u01aa\113\0\1\u01ab\70\0\1\u01ac\35\0\1\360\1\0"+
    "\50\360\1\0\20\360\16\0\1\u01ad\54\0\1\363\1\0"+
    "\50\363\1\0\20\363\24\0\1\u01ae\103\0\1\u01af\53\0"+
    "\1\u01b0\135\0\1\u01b1\27\0\1\u01b2\70\0\1\u01b3\60\0"+
    "\1\u0102\1\u01b4\1\u01b5\30\0\1\u01b5\37\0\1\u01b4\1\u01b6"+
    "\71\0\3\u01b7\4\0\20\u01b7\1\u01b8\1\0\1\u01b7\1\0"+
    "\12\u01b7\2\0\1\u01b7\5\0\1\u01b7\15\0\3\u01b7\4\0"+
    "\3\u01b7\1\u01b9\14\u01b7\1\u01b8\1\0\1\u01b7\1\0\7\u01b7"+
    "\1\u01ba\2\u01b7\2\0\1\u01b7\5\0\1\u01b7\15\0\3\u01b7"+
    "\4\0\5\u01b7\1\u01bb\12\u01b7\1\u01b8\1\0\1\u01b7\1\0"+
    "\1\u01b7\1\u01bc\10\u01b7\2\0\1\u01b7\5\0\1\u01b7\15\0"+
    "\3\u01b7\4\0\20\u01b7\1\u01b8\1\0\1\u01b7\1\0\7\u01b7"+
    "\1\u01bd\2\u01b7\2\0\1\u01b7\5\0\1\u01b7\15\0\3\u01b7"+
    "\4\0\20\u01b7\1\u01b8\1\0\1\u01b7\1\0\1\u01b7\1\u01be"+
    "\10\u01b7\2\0\1\u01b7\5\0\1\u01b7\15\0\3\u01b7\4\0"+
    "\20\u01b7\1\u01b8\1\0\1\u01b7\1\0\1\u01bf\11\u01b7\2\0"+
    "\1\u01b7\5\0\1\u01b7\15\0\3\u01b7\4\0\20\u01b7\1\u01b8"+
    "\1\0\1\u01b7\1\0\1\u01c0\11\u01b7\2\0\1\u01b7\5\0"+
    "\1\u01b7\15\0\3\u01b7\4\0\20\u01b7\1\u01b8\1\0\1\u01b7"+
    "\1\0\12\u01b7\2\0\1\u01c1\5\0\1\u01b7\15\0\3\u01b7"+
    "\4\0\12\u01b7\1\u01c2\5\u01b7\1\u01b8\1\0\1\u01b7\1\0"+
    "\12\u01b7\2\0\1\u01b7\5\0\1\u01b7\66\0\1\u01c3\11\0"+
    "\1\u01c4\7\0\3\u0112\4\0\20\u0112\1\u01c5\1\0\1\u0112"+
    "\1\0\12\u0112\2\0\1\u0112\5\0\1\u0112\15\0\3\u0112"+
    "\4\0\20\u0112\1\u01c5\1\0\1\u0112\1\0\1\u01c6\11\u0112"+
    "\2\0\1\u0112\5\0\1\u0112\15\0\3\u0112\4\0\3\u0112"+
    "\1\u01c7\14\u0112\1\u01c5\1\0\1\u0112\1\0\12\u0112\2\0"+
    "\1\u0112\5\0\1\u0112\15\0\3\u0112\4\0\20\u0112\1\u01c5"+
    "\1\0\1\u0112\1\0\1\u0112\1\u01c8\10\u0112\2\0\1\u0112"+
    "\5\0\1\u0112\15\0\3\u0112\4\0\20\u0112\1\u01c5\1\0"+
    "\1\u0112\1\0\4\u0112\1\u01c9\5\u0112\2\0\1\u0112\5\0"+
    "\1\u0112\44\0\1\u01ca\43\0\3\u0112\4\0\2\u0112\1\u01cb"+
    "\15\u0112\1\u01c5\1\0\1\u0112\1\0\12\u0112\2\0\1\u0112"+
    "\5\0\1\u0112\15\0\3\u0112\4\0\12\u0112\1\u01cc\5\u0112"+
    "\1\u01c5\1\0\1\u0112\1\0\12\u0112\2\0\1\u0112\5\0"+
    "\1\u0112\15\0\3\u0112\4\0\12\u0112\1\u01cd\5\u0112\1\u01c5"+
    "\1\0\1\u0112\1\0\12\u0112\2\0\1\u0112\5\0\1\u0112"+
    "\15\0\3\u0112\4\0\3\u0112\1\u01ce\14\u0112\1\u01c5\1\0"+
    "\1\u0112\1\0\12\u0112\2\0\1\u0112\5\0\1\u0112\15\0"+
    "\3\u0112\4\0\12\u0112\1\u01cf\5\u0112\1\u01c5\1\0\1\u0112"+
    "\1\0\12\u0112\2\0\1\u0112\5\0\1\u0112\15\0\3\u0112"+
    "\4\0\12\u0112\1\u01d0\5\u0112\1\u01c5\1\0\1\u0112\1\0"+
    "\12\u0112\2\0\1\u0112\5\0\1\u0112\13\0\1\u011e\1\0"+
    "\65\u011e\1\0\3\u011e\36\0\1\u01d1\50\0\1\u01d2\127\0"+
    "\1\u01d3\44\0\1\u01d4\47\0\1\266\1\0\12\266\1\u01d5"+
    "\56\266\44\0\1\u01d6\63\0\1\u01d7\106\0\1\u01d8\57\0"+
    "\1\u01d9\73\0\1\u01da\57\0\1\u01db\103\0\1\u01dc\54\0"+
    "\1\u01dd\110\0\1\u01de\73\0\1\u01df\57\0\1\u01e0\63\0"+
    "\1\u01e1\60\0\3\u013b\4\0\14\u013b\2\0\2\u013b\1\u01e2"+
    "\2\u013b\1\0\12\u013b\2\0\1\u013b\5\0\1\u013b\15\0"+
    "\3\u013b\4\0\6\u013b\1\u01e3\5\u013b\2\0\2\u013b\1\u01e2"+
    "\2\u013b\1\0\12\u013b\2\0\1\u013b\5\0\1\u013b\103\0"+
    "\1\u0141\72\0\1\u01e4\3\0\1\u0142\73\0\3\u0143\4\0"+
    "\20\u0143\1\u01e5\1\0\1\u0143\1\0\12\u0143\2\0\1\u0143"+
    "\5\0\1\u0143\22\0\1\u01e6\3\0\1\u01e7\1\0\1\u01e7"+
    "\1\u01e8\2\0\1\u01e9\133\0\1\u01ea\101\0\1\u01eb\32\0"+
    "\1\u01ec\43\0\3\u0152\4\0\20\u0152\2\0\1\u0152\1\0"+
    "\12\u0152\2\0\1\u0152\5\0\1\u0152\15\0\3\u0153\4\0"+
    "\20\u0153\1\u01ed\1\0\1\u0153\1\0\12\u0153\2\0\1\u0153"+
    "\5\0\1\u0153\15\0\3\u0155\4\0\20\u0155\2\0\1\u0155"+
    "\1\0\12\u0155\2\0\1\u0155\5\0\1\u0155\15\0\3\u0156"+
    "\4\0\20\u0156\1\u01ee\1\0\1\u0156\1\0\12\u0156\2\0"+
    "\1\u0156\5\0\1\u0156\44\0\1\u01ef\43\0\1\u0159\1\0"+
    "\1\u015a\30\0\1\u015a\37\0\1\u01f0\2\0\1\u01f1\21\0"+
    "\1\u01f1\65\0\1\u01f2\110\0\1\u01f3\73\0\1\u01f4\51\0"+
    "\1\u01f5\142\0\1\u01f6\25\0\1\u01f7\107\0\1\u01f8\34\0"+
    "\1\u01f9\6\0\1\u01fa\75\0\1\u01fb\75\0\1\u01fc\1\u01fd"+
    "\74\0\1\u01fe\106\0\1\u01ff\75\0\1\u0200\50\0\1\u0201"+
    "\67\0\1\u0202\116\0\1\u0203\100\0\1\u0204\44\0\1\u0205"+
    "\23\0\1\u0206\64\0\1\u0207\53\0\1\u0208\77\0\1\u0209"+
    "\70\0\1\u020a\105\0\1\u020b\64\0\1\u020c\114\0\1\u020d"+
    "\50\0\1\u020e\103\0\1\u020f\67\0\1\u0210\50\0\1\u0211"+
    "\123\0\1\u0212\46\0\1\u0213\70\0\1\u0214\111\0\1\u0215"+
    "\54\0\1\u0216\67\0\1\u0217\116\0\1\u0218\103\0\1\u0219"+
    "\67\0\1\u021a\43\0\1\u021b\110\0\1\u021c\54\0\1\u021d"+
    "\110\0\1\u021e\73\0\1\u021f\40\0\1\u0220\4\0\15\u0220"+
    "\2\0\1\u0220\4\0\12\u0220\2\0\1\u0220\5\0\1\u0220"+
    "\15\0\3\273\4\0\1\u0221\17\273\1\u0190\1\0\1\273"+
    "\1\0\12\273\2\0\1\273\5\0\1\273\15\0\3\273"+
    "\4\0\3\273\1\u0222\14\273\1\u0190\1\0\1\273\1\0"+
    "\12\273\2\0\1\273\5\0\1\273\15\0\3\273\4\0"+
    "\12\273\1\u0223\5\273\1\u0190\1\0\1\273\1\0\12\273"+
    "\2\0\1\273\5\0\1\273\15\0\3\273\4\0\20\273"+
    "\1\u0190\1\0\1\273\1\0\12\273\2\0\1\u0224\5\0"+
    "\1\273\15\0\3\273\4\0\20\273\1\u0190\1\0\1\273"+
    "\1\0\1\u0225\11\273\2\0\1\273\5\0\1\273\15\0"+
    "\3\273\4\0\20\273\1\u0190\1\0\1\273\1\0\4\273"+
    "\1\u0226\5\273\2\0\1\273\5\0\1\273\15\0\3\273"+
    "\4\0\6\273\1\u0227\11\273\1\u0190\1\0\1\273\1\0"+
    "\12\273\2\0\1\273\5\0\1\273\15\0\3\273\4\0"+
    "\20\273\1\u0190\1\0\1\273\1\0\1\u0228\11\273\2\0"+
    "\1\273\5\0\1\273\15\0\3\273\4\0\20\273\1\u0190"+
    "\1\0\1\273\1\0\5\273\1\u0229\4\273\2\0\1\273"+
    "\5\0\1\273\15\0\3\273\4\0\20\273\1\u0190\1\0"+
    "\1\273\1\0\3\273\1\u022a\6\273\2\0\1\273\5\0"+
    "\1\273\64\0\1\u022b\56\0\1\u022c\41\0\1\u022d\4\0"+
    "\15\u022d\2\0\1\u022d\4\0\12\u022d\2\0\1\u022d\5\0"+
    "\1\u022d\27\0\1\u022e\76\0\1\u022f\71\0\1\u0230\110\0"+
    "\1\u0231\73\0\1\u0232\71\0\1\u0233\61\0\1\u0234\65\0"+
    "\1\u0235\110\0\1\u0236\51\0\1\u0237\76\0\1\u0238\120\0"+
    "\1\u0239\50\0\1\u023a\62\0\1\u023b\71\0\1\u023c\70\0"+
    "\1\u023d\117\0\1\u023e\36\0\1\u01b4\1\0\1\u01b5\30\0"+
    "\1\u01b5\37\0\1\u023f\2\0\1\u0240\21\0\1\u0240\47\0"+
    "\1\u0241\4\0\15\u0241\2\0\1\u0241\4\0\12\u0241\2\0"+
    "\1\u0241\5\0\1\u0241\15\0\3\u01b7\4\0\3\u01b7\1\u0242"+
    "\14\u01b7\1\u01b8\1\0\1\u01b7\1\0\12\u01b7\2\0\1\u01b7"+
    "\5\0\1\u01b7\15\0\3\u01b7\4\0\20\u01b7\1\u01b8\1\0"+
    "\1\u01b7\1\0\4\u01b7\1\u0243\5\u01b7\2\0\1\u01b7\5\0"+
    "\1\u01b7\15\0\3\u01b7\4\0\20\u01b7\1\u01b8\1\0\1\u01b7"+
    "\1\0\1\u01b7\1\u0244\10\u01b7\2\0\1\u01b7\5\0\1\u01b7"+
    "\15\0\3\u01b7\4\0\20\u01b7\1\u01b8\1\0\1\u01b7\1\0"+
    "\1\u0245\11\u01b7\2\0\1\u01b7\5\0\1\u01b7\15\0\3\u01b7"+
    "\4\0\12\u01b7\1\u0246\5\u01b7\1\u01b8\1\0\1\u01b7\1\0"+
    "\12\u01b7\2\0\1\u01b7\5\0\1\u01b7\15\0\3\u01b7\4\0"+
    "\20\u01b7\1\u01b8\1\0\1\u01b7\1\0\3\u01b7\1\u0247\6\u01b7"+
    "\2\0\1\u01b7\5\0\1\u01b7\15\0\3\u01b7\4\0\2\u01b7"+
    "\1\u0248\15\u01b7\1\u01b8\1\0\1\u01b7\1\0\12\u01b7\2\0"+
    "\1\u01b7\5\0\1\u01b7\15\0\3\u01b7\4\0\13\u01b7\1\u0249"+
    "\4\u01b7\1\u01b8\1\0\1\u01b7\1\0\12\u01b7\2\0\1\u01b7"+
    "\5\0\1\u01b7\15\0\3\u01b7\4\0\20\u01b7\1\u01b8\1\0"+
    "\1\u01b7\1\0\5\u01b7\1\u024a\4\u01b7\2\0\1\u01b7\5\0"+
    "\1\u01b7\15\0\3\u01b7\4\0\2\u01b7\1\u024b\15\u01b7\1\u01b8"+
    "\1\0\1\u01b7\1\0\12\u01b7\2\0\1\u01b7\5\0\1\u01b7"+
    "\42\0\1\u024c\47\0\1\u024d\4\0\15\u024d\2\0\1\u024d"+
    "\3\0\1\u024e\12\u024d\2\0\1\u024d\5\0\1\u024d\15\0"+
    "\3\u0112\4\0\1\u024f\17\u0112\1\u01c5\1\0\1\u0112\1\0"+
    "\12\u0112\2\0\1\u0112\5\0\1\u0112\15\0\3\u0112\4\0"+
    "\3\u0112\1\u0250\14\u0112\1\u01c5\1\0\1\u0112\1\0\12\u0112"+
    "\2\0\1\u0112\5\0\1\u0112\15\0\3\u0112\4\0\12\u0112"+
    "\1\u0251\5\u0112\1\u01c5\1\0\1\u0112\1\0\12\u0112\2\0"+
    "\1\u0112\5\0\1\u0112\15\0\3\u0112\4\0\20\u0112\1\u01c5"+
    "\1\0\1\u0112\1\0\12\u0112\2\0\1\u0252\5\0\1\u0112"+
    "\17\0\1\u024d\4\0\15\u024d\2\0\1\u024d\4\0\12\u024d"+
    "\2\0\1\u024d\5\0\1\u024d\15\0\3\u0112\4\0\20\u0112"+
    "\1\u01c5\1\0\1\u0112\1\0\1\u0253\11\u0112\2\0\1\u0112"+
    "\5\0\1\u0112\15\0\3\u0112\4\0\20\u0112\1\u01c5\1\0"+
    "\1\u0112\1\0\4\u0112\1\u0254\5\u0112\2\0\1\u0112\5\0"+
    "\1\u0112\15\0\3\u0112\4\0\6\u0112\1\u0255\11\u0112\1\u01c5"+
    "\1\0\1\u0112\1\0\12\u0112\2\0\1\u0112\5\0\1\u0112"+
    "\15\0\3\u0112\4\0\20\u0112\1\u01c5\1\0\1\u0112\1\0"+
    "\1\u0256\11\u0112\2\0\1\u0112\5\0\1\u0112\15\0\3\u0112"+
    "\4\0\20\u0112\1\u01c5\1\0\1\u0112\1\0\5\u0112\1\u0257"+
    "\4\u0112\2\0\1\u0112\5\0\1\u0112\15\0\3\u0112\4\0"+
    "\20\u0112\1\u01c5\1\0\1\u0112\1\0\3\u0112\1\u0258\6\u0112"+
    "\2\0\1\u0112\5\0\1\u0112\53\0\1\u0259\50\0\1\u025a"+
    "\111\0\1\u025b\73\0\1\u025c\50\0\1\u025d\113\0\1\u025e"+
    "\75\0\1\u025f\73\0\1\u0260\55\0\1\u0261\66\0\1\u0262"+
    "\70\0\1\u0263\111\0\1\u0264\50\0\1\u0265\75\0\1\u0266"+
    "\56\0\3\u01e2\4\0\14\u01e2\2\0\2\u01e2\1\0\2\u01e2"+
    "\1\0\12\u01e2\2\0\1\u01e2\5\0\1\u01e2\15\0\3\u013b"+
    "\4\0\2\u013b\1\u0267\11\u013b\2\0\2\u013b\1\u01e2\2\u013b"+
    "\1\0\12\u013b\2\0\1\u013b\5\0\1\u013b\17\0\1\u0268"+
    "\4\0\15\u0268\2\0\1\u0268\4\0\12\u0268\2\0\1\u0268"+
    "\5\0\1\u0268\15\0\1\u0269\6\0\1\u026a\75\0\1\u026b"+
    "\75\0\1\u026c\1\u026d\74\0\1\u026e\52\0\1\u01f0\125\0"+
    "\1\u026f\57\0\1\u0270\63\0\1\u0271\102\0\1\u0272\105\0"+
    "\1\u0273\71\0\1\u0274\37\0\1\u01f9\5\0\1\u0275\64\0"+
    "\1\u0276\1\0\1\u0276\5\0\1\u0276\3\0\1\u0276\16\0"+
    "\1\u0276\2\0\2\u0276\3\0\2\u0276\34\0\1\u0277\102\0"+
    "\1\u01fb\75\0\1\u0278\72\0\1\u0168\73\0\1\u0279\71\0"+
    "\1\u027a\104\0\1\u027b\77\0\1\u027c\65\0\1\u027d\53\0"+
    "\1\u027e\113\0\1\u027f\57\0\1\u0280\110\0\1\u0281\65\0"+
    "\1\u0282\72\0\1\u0283\101\0\1\u0284\52\0\1\u0285\66\0"+
    "\1\u0286\107\0\1\u0287\77\0\1\u0288\65\0\1\u0289\54\0"+
    "\1\u028a\66\0\1\u028b\120\0\1\u028c\45\0\1\u028d\102\0"+
    "\1\u028e\64\0\1\u028f\111\0\1\u0290\72\0\1\u0291\57\0"+
    "\1\u0292\105\0\1\u0293\53\0\1\u0294\111\0\1\u0295\54\0"+
    "\1\u0296\110\0\1\u0297\61\0\1\u0298\110\0\1\u0299\32\0"+
    "\3\u0220\4\0\20\u0220\2\0\1\u0220\1\0\12\u0220\2\0"+
    "\1\u0220\5\0\1\u0220\15\0\3\273\4\0\3\273\1\u029a"+
    "\14\273\1\u0190\1\0\1\273\1\0\12\273\2\0\1\273"+
    "\5\0\1\273\15\0\3\273\4\0\20\273\1\u0190\1\0"+
    "\1\273\1\0\1\273\1\u029b\10\273\2\0\1\273\5\0"+
    "\1\273\15\0\3\273\4\0\20\273\1\u0190\1\0\1\273"+
    "\1\0\4\273\1\u029c\5\273\2\0\1\273\5\0\1\273"+
    "\15\0\3\273\4\0\20\273\1\u0190\1\0\1\273\1\0"+
    "\1\u029d\11\273\2\0\1\273\5\0\1\273\15\0\3\273"+
    "\4\0\6\273\1\u029e\11\273\1\u0190\1\0\1\273\1\0"+
    "\12\273\2\0\1\273\5\0\1\273\15\0\3\273\4\0"+
    "\11\273\1\u029f\6\273\1\u0190\1\0\1\273\1\0\12\273"+
    "\2\0\1\273\5\0\1\273\15\0\3\273\4\0\6\273"+
    "\1\u02a0\11\273\1\u0190\1\0\1\273\1\0\12\273\2\0"+
    "\1\273\5\0\1\273\15\0\3\273\4\0\6\273\1\u02a1"+
    "\11\273\1\u0190\1\0\1\273\1\0\12\273\2\0\1\273"+
    "\5\0\1\273\15\0\3\273\4\0\20\273\1\u0190\1\0"+
    "\1\273\1\0\3\273\1\u02a2\6\273\2\0\1\273\5\0"+
    "\1\273\15\0\3\273\4\0\20\273\1\u0190\1\0\1\273"+
    "\1\0\1\u02a3\11\273\2\0\1\273\5\0\1\273\50\0"+
    "\1\u02a4\54\0\1\u02a5\55\0\3\u022d\4\0\20\u022d\2\0"+
    "\1\u022d\1\0\12\u022d\2\0\1\u022d\5\0\1\u022d\50\0"+
    "\1\u02a6\72\0\1\u02a7\73\0\1\u02a8\100\0\1\u02a9\63\0"+
    "\1\u02aa\72\0\1\u02ab\73\0\1\u02ac\76\0\1\u02ad\65\0"+
    "\1\u02ae\53\0\1\u02af\111\0\1\u02b0\57\0\1\u02b1\112\0"+
    "\1\u02b2\72\0\1\u02b3\32\0\1\u023f\72\0\3\u0241\4\0"+
    "\20\u0241\2\0\1\u0241\1\0\12\u0241\2\0\1\u0241\5\0"+
    "\1\u0241\15\0\3\u01b7\4\0\20\u01b7\1\u01b8\1\0\1\u01b7"+
    "\1\0\1\u01b7\1\u02b4\10\u01b7\2\0\1\u01b7\5\0\1\u01b7"+
    "\15\0\3\u01b7\4\0\20\u01b7\1\u01b8\1\0\1\u01b7\1\0"+
    "\1\u02b5\11\u01b7\2\0\1\u01b7\5\0\1\u01b7\15\0\3\u01b7"+
    "\4\0\20\u01b7\1\u01b8\1\0\1\u01b7\1\0\1\u02b6\11\u01b7"+
    "\2\0\1\u01b7\5\0\1\u01b7\15\0\3\u01b7\4\0\20\u01b7"+
    "\1\u01b8\1\0\1\u01b7\1\0\4\u01b7\1\u02b7\5\u01b7\2\0"+
    "\1\u01b7\5\0\1\u01b7\15\0\3\u01b7\4\0\20\u01b7\1\u01b8"+
    "\1\0\1\u01b7\1\0\1\u01b7\1\u02b8\10\u01b7\2\0\1\u01b7"+
    "\5\0\1\u01b7\15\0\3\u01b7\4\0\20\u01b7\1\u01b8\1\0"+
    "\1\u01b7\1\0\1\u02b9\11\u01b7\2\0\1\u01b7\5\0\1\u01b7"+
    "\15\0\3\u01b7\4\0\20\u01b7\1\u01b8\1\0\1\u01b7\1\0"+
    "\11\u01b7\1\u02ba\2\0\1\u01b7\5\0\1\u01b7\15\0\3\u01b7"+
    "\4\0\20\u01b7\1\u01b8\1\0\1\u01b7\1\0\4\u01b7\1\u02bb"+
    "\5\u01b7\2\0\1\u01b7\5\0\1\u01b7\15\0\3\u01b7\4\0"+
    "\2\u01b7\1\u02bc\15\u01b7\1\u01b8\1\0\1\u01b7\1\0\12\u01b7"+
    "\2\0\1\u01b7\5\0\1\u01b7\15\0\3\u01b7\4\0\2\u01b7"+
    "\1\u02bd\15\u01b7\1\u01b8\1\0\1\u01b7\1\0\12\u01b7\2\0"+
    "\1\u01b7\5\0\1\u01b7\42\0\1\u02be\45\0\3\u024d\4\0"+
    "\20\u024d\2\0\1\u024d\1\0\12\u024d\2\0\1\u024d\5\0"+
    "\1\u024d\15\0\3\u0112\4\0\3\u0112\1\u02bf\14\u0112\1\u01c5"+
    "\1\0\1\u0112\1\0\12\u0112\2\0\1\u0112\5\0\1\u0112"+
    "\15\0\3\u0112\4\0\20\u0112\1\u01c5\1\0\1\u0112\1\0"+
    "\1\u0112\1\u02c0\10\u0112\2\0\1\u0112\5\0\1\u0112\15\0"+
    "\3\u0112\4\0\20\u0112\1\u01c5\1\0\1\u0112\1\0\4\u0112"+
    "\1\u02c1\5\u0112\2\0\1\u0112\5\0\1\u0112\15\0\3\u0112"+
    "\4\0\20\u0112\1\u01c5\1\0\1\u0112\1\0\1\u02c2\11\u0112"+
    "\2\0\1\u0112\5\0\1\u0112\15\0\3\u0112\4\0\6\u0112"+
    "\1\u02c3\11\u0112\1\u01c5\1\0\1\u0112\1\0\12\u0112\2\0"+
    "\1\u0112\5\0\1\u0112\15\0\3\u0112\4\0\11\u0112\1\u02c4"+
    "\6\u0112\1\u01c5\1\0\1\u0112\1\0\12\u0112\2\0\1\u0112"+
    "\5\0\1\u0112\15\0\3\u0112\4\0\6\u0112\1\u02c5\11\u0112"+
    "\1\u01c5\1\0\1\u0112\1\0\12\u0112\2\0\1\u0112\5\0"+
    "\1\u0112\15\0\3\u0112\4\0\6\u0112\1\u02c6\11\u0112\1\u01c5"+
    "\1\0\1\u0112\1\0\12\u0112\2\0\1\u0112\5\0\1\u0112"+
    "\15\0\3\u0112\4\0\20\u0112\1\u01c5\1\0\1\u0112\1\0"+
    "\3\u0112\1\u02c7\6\u0112\2\0\1\u0112\5\0\1\u0112\15\0"+
    "\3\u0112\4\0\20\u0112\1\u01c5\1\0\1\u0112\1\0\1\u02c8"+
    "\11\u0112\2\0\1\u0112\5\0\1\u0112\50\0\1\u02c9\102\0"+
    "\1\u02ca\63\0\1\u02cb\72\0\1\u02cc\71\0\1\u02cd\72\0"+
    "\1\u02ce\76\0\1\u02cf\45\0\1\u02d0\102\0\1\u02d1\64\0"+
    "\1\u02d2\67\0\1\u02d3\124\0\1\u02d4\27\0\3\u0268\4\0"+
    "\20\u0268\2\0\1\u0268\1\0\12\u0268\2\0\1\u0268\5\0"+
    "\1\u0268\15\0\1\u0269\5\0\1\u02d5\64\0\1\u02d6\1\0"+
    "\1\u02d6\5\0\1\u02d6\3\0\1\u02d6\16\0\1\u02d6\2\0"+
    "\2\u02d6\3\0\2\u02d6\34\0\1\u02d7\102\0\1\u026b\75\0"+
    "\1\u02d8\72\0\1\u01e7\105\0\1\u02d9\47\0\1\u02da\75\0"+
    "\1\u02db\112\0\1\u02dc\74\0\1\u02dd\70\0\1\u02de\36\0"+
    "\1\u0276\1\0\1\u0276\3\0\1\u0275\1\0\1\u0276\3\0"+
    "\1\u0276\16\0\1\u0276\2\0\2\u0276\3\0\2\u0276\50\0"+
    "\1\u01fb\110\0\1\u02df\70\0\1\u02e0\56\0\1\u02e1\71\0"+
    "\1\u02e2\105\0\1\u02e3\56\0\1\u02e4\77\0\1\u02e5\57\0"+
    "\1\u02e6\74\0\1\u02e7\100\0\1\u02e8\75\0\1\u02e9\103\0"+
    "\1\u02ea\67\0\1\u02eb\73\0\1\u02ec\72\0\1\u02ed\100\0"+
    "\1\u02ee\64\0\1\u02ef\71\0\1\u02f0\53\0\1\u02f1\70\0"+
    "\1\u02f2\115\0\1\u02f3\47\0\1\u02f4\72\0\1\u02f5\102\0"+
    "\1\u02f6\104\0\1\u02f7\47\0\1\u02f8\76\0\1\u02f9\75\0"+
    "\1\u02fa\74\0\1\u02fb\103\0\1\u02fc\61\0\1\u02fd\103\0"+
    "\1\u02fe\55\0\1\u02ff\54\0\3\273\4\0\20\273\1\u0190"+
    "\1\0\1\273\1\0\5\273\1\u0300\4\273\2\0\1\273"+
    "\5\0\1\273\15\0\3\273\4\0\20\273\1\u0190\1\0"+
    "\1\273\1\0\1\u0301\11\273\2\0\1\273\5\0\1\273"+
    "\15\0\3\273\4\0\6\273\1\u0302\11\273\1\u0190\1\0"+
    "\1\273\1\0\12\273\2\0\1\273\5\0\1\273\15\0"+
    "\3\273\4\0\20\273\1\u0190\1\0\1\273\1\0\1\u0303"+
    "\11\273\2\0\1\273\5\0\1\273\15\0\3\273\4\0"+
    "\6\273\1\u0304\11\273\1\u0190\1\0\1\273\1\0\12\273"+
    "\2\0\1\273\5\0\1\273\15\0\3\273\4\0\20\273"+
    "\1\u0190\1\0\1\273\1\0\1\u0305\11\273\2\0\1\273"+
    "\5\0\1\273\32\0\1\u0306\110\0\1\u0307\61\0\1\u0308"+
    "\105\0\1\u02a7\72\0\1\u0309\57\0\1\u030a\72\0\1\u030b"+
    "\70\0\1\u030c\106\0\1\u030d\74\0\1\u030e\73\0\1\u030f"+
    "\33\0\3\u01b7\4\0\20\u01b7\1\u01b8\1\0\1\u01b7\1\0"+
    "\5\u01b7\1\u0310\4\u01b7\2\0\1\u01b7\5\0\1\u01b7\15\0"+
    "\3\u01b7\4\0\13\u01b7\1\u0311\4\u01b7\1\u01b8\1\0\1\u01b7"+
    "\1\0\12\u01b7\2\0\1\u01b7\5\0\1\u01b7\15\0\3\u01b7"+
    "\4\0\20\u01b7\1\u01b8\1\0\1\u01b7\1\0\7\u01b7\1\u0312"+
    "\2\u01b7\2\0\1\u01b7\5\0\1\u01b7\15\0\3\u01b7\4\0"+
    "\20\u01b7\1\u01b8\1\0\1\u01b7\1\0\1\u0313\11\u01b7\2\0"+
    "\1\u01b7\5\0\1\u01b7\15\0\3\u01b7\4\0\20\u01b7\1\u01b8"+
    "\1\0\1\u01b7\1\0\3\u01b7\1\u0314\6\u01b7\2\0\1\u01b7"+
    "\5\0\1\u01b7\15\0\3\u01b7\4\0\20\u01b7\1\u01b8\1\0"+
    "\1\u01b7\1\0\1\u01b7\1\u0315\10\u01b7\2\0\1\u01b7\5\0"+
    "\1\u01b7\15\0\3\u01b7\4\0\20\u01b7\1\u01b8\1\0\1\u01b7"+
    "\1\0\1\u0316\11\u01b7\2\0\1\u01b7\5\0\1\u01b7\15\0"+
    "\3\u01b7\4\0\20\u01b7\1\u01b8\1\0\1\u01b7\1\0\3\u01b7"+
    "\1\u0317\6\u01b7\2\0\1\u01b7\5\0\1\u01b7\15\0\3\u01b7"+
    "\4\0\12\u01b7\1\u0318\5\u01b7\1\u01b8\1\0\1\u01b7\1\0"+
    "\12\u01b7\2\0\1\u01b7\5\0\1\u01b7\15\0\3\u0112\4\0"+
    "\20\u0112\1\u01c5\1\0\1\u0112\1\0\5\u0112\1\u0319\4\u0112"+
    "\2\0\1\u0112\5\0\1\u0112\15\0\3\u0112\4\0\20\u0112"+
    "\1\u01c5\1\0\1\u0112\1\0\1\u031a\11\u0112\2\0\1\u0112"+
    "\5\0\1\u0112\15\0\3\u0112\4\0\6\u0112\1\u031b\11\u0112"+
    "\1\u01c5\1\0\1\u0112\1\0\12\u0112\2\0\1\u0112\5\0"+
    "\1\u0112\15\0\3\u0112\4\0\20\u0112\1\u01c5\1\0\1\u0112"+
    "\1\0\1\u031c\11\u0112\2\0\1\u0112\5\0\1\u0112\15\0"+
    "\3\u0112\4\0\6\u0112\1\u031d\11\u0112\1\u01c5\1\0\1\u0112"+
    "\1\0\12\u0112\2\0\1\u0112\5\0\1\u0112\15\0\3\u0112"+
    "\4\0\20\u0112\1\u01c5\1\0\1\u0112\1\0\1\u031e\11\u0112"+
    "\2\0\1\u0112\5\0\1\u0112\51\0\1\u031f\47\0\1\u0320"+
    "\114\0\1\u0321\72\0\1\u0322\73\0\1\u0323\100\0\1\u0324"+
    "\63\0\1\u0325\74\0\1\u0326\47\0\1\u0327\72\0\1\u0328"+
    "\74\0\1\u0329\67\0\1\u032a\61\0\1\u02d6\1\0\1\u02d6"+
    "\3\0\1\u02d5\1\0\1\u02d6\3\0\1\u02d6\16\0\1\u02d6"+
    "\2\0\2\u02d6\3\0\2\u02d6\50\0\1\u026b\105\0\1\u032b"+
    "\70\0\1\u032c\73\0\1\u032d\50\0\1\u032e\113\0\1\u032f"+
    "\72\0\1\u0330\60\0\1\u0331\111\0\1\u0332\50\0\1\u0333"+
    "\116\0\1\u0334\70\0\1\u0335\43\0\1\u0336\123\0\1\u0337"+
    "\64\0\1\u0338\101\0\1\u0339\45\0\1\u033a\74\0\1\u033b"+
    "\66\0\1\u033c\112\0\1\u033d\71\0\1\u033e\77\0\1\u033f"+
    "\101\0\1\u0340\65\0\1\u0341\42\0\1\u0342\120\0\1\u0343"+
    "\65\0\1\u0344\55\0\1\u0345\116\0\1\u0346\63\0\1\u0347"+
    "\53\0\1\u0348\67\0\1\u0349\77\0\1\u034a\116\0\1\u034b"+
    "\46\0\1\u034c\110\0\1\u034d\36\0\3\273\4\0\20\273"+
    "\1\u0190\1\0\1\273\1\0\10\273\1\u034e\1\273\2\0"+
    "\1\273\5\0\1\273\15\0\3\273\4\0\13\273\1\u034f"+
    "\4\273\1\u0190\1\0\1\273\1\0\12\273\2\0\1\273"+
    "\5\0\1\273\15\0\3\273\4\0\5\273\1\u0350\12\273"+
    "\1\u0190\1\0\1\273\1\0\12\273\2\0\1\273\5\0"+
    "\1\273\15\0\3\273\4\0\20\273\1\u0190\1\0\1\273"+
    "\1\0\7\273\1\u0351\2\273\2\0\1\273\5\0\1\273"+
    "\15\0\3\273\4\0\20\273\1\u0190\1\0\1\273\1\0"+
    "\1\u0352\11\273\2\0\1\273\5\0\1\273\15\0\3\273"+
    "\4\0\20\273\1\u0190\1\0\1\273\1\0\7\273\1\u0353"+
    "\2\273\2\0\1\273\5\0\1\273\31\0\1\u0354\120\0"+
    "\1\u0355\105\0\1\u0356\61\0\1\u0357\103\0\1\u0358\26\0"+
    "\1\u0359\123\0\1\u035a\44\0\1\u035b\70\0\1\u035c\60\0"+
    "\3\u01b7\4\0\20\u01b7\1\u01b8\1\0\1\u01b7\1\0\10\u01b7"+
    "\1\u035d\1\u01b7\2\0\1\u01b7\5\0\1\u01b7\15\0\3\u01b7"+
    "\4\0\3\u01b7\1\u035e\14\u01b7\1\u01b8\1\0\1\u01b7\1\0"+
    "\12\u01b7\2\0\1\u01b7\5\0\1\u01b7\15\0\3\u01b7\4\0"+
    "\3\u01b7\1\u0317\14\u01b7\1\u01b8\1\0\1\u01b7\1\0\12\u01b7"+
    "\2\0\1\u01b7\5\0\1\u01b7\15\0\3\u01b7\4\0\20\u01b7"+
    "\1\u01b8\1\0\1\u01b7\1\0\1\u035f\11\u01b7\2\0\1\u01b7"+
    "\5\0\1\u01b7\15\0\3\u01b7\4\0\20\u01b7\1\u01b8\1\0"+
    "\1\u01b7\1\0\1\u0360\11\u01b7\2\0\1\u01b7\5\0\1\u01b7"+
    "\15\0\3\u01b7\4\0\20\u01b7\1\u01b8\1\0\1\u01b7\1\0"+
    "\1\u0361\11\u01b7\2\0\1\u01b7\5\0\1\u01b7\15\0\3\u01b7"+
    "\4\0\20\u01b7\1\u01b8\1\0\1\u01b7\1\0\7\u01b7\1\u0362"+
    "\2\u01b7\2\0\1\u01b7\5\0\1\u01b7\15\0\3\u01b7\4\0"+
    "\20\u01b7\1\u01b8\1\0\1\u01b7\1\0\12\u01b7\2\0\1\u01b7"+
    "\5\0\1\u0363\15\0\3\u0112\4\0\20\u0112\1\u01c5\1\0"+
    "\1\u0112\1\0\10\u0112\1\u0364\1\u0112\2\0\1\u0112\5\0"+
    "\1\u0112\15\0\3\u0112\4\0\13\u0112\1\u0365\4\u0112\1\u01c5"+
    "\1\0\1\u0112\1\0\12\u0112\2\0\1\u0112\5\0\1\u0112"+
    "\15\0\3\u0112\4\0\5\u0112\1\u0366\12\u0112\1\u01c5\1\0"+
    "\1\u0112\1\0\12\u0112\2\0\1\u0112\5\0\1\u0112\15\0"+
    "\3\u0112\4\0\20\u0112\1\u01c5\1\0\1\u0112\1\0\7\u0112"+
    "\1\u0367\2\u0112\2\0\1\u0112\5\0\1\u0112\15\0\3\u0112"+
    "\4\0\20\u0112\1\u01c5\1\0\1\u0112\1\0\1\u0368\11\u0112"+
    "\2\0\1\u0112\5\0\1\u0112\15\0\3\u0112\4\0\20\u0112"+
    "\1\u01c5\1\0\1\u0112\1\0\7\u0112\1\u0369\2\u0112\2\0"+
    "\1\u0112\5\0\1\u0112\50\0\1\u031f\75\0\1\u036a\76\0"+
    "\1\u036b\63\0\1\u036c\51\0\1\u036d\113\0\1\u036e\72\0"+
    "\1\u036f\73\0\1\u0370\74\0\1\u0371\76\0\1\u0372\72\0"+
    "\1\u0373\44\0\1\u0374\120\0\1\u0375\42\0\1\u0376\74\0"+
    "\1\u0377\76\0\1\u0378\63\0\1\u0379\75\0\1\u037a\112\0"+
    "\1\u037b\72\0\1\u037c\77\0\1\u037d\53\0\1\u037e\62\0"+
    "\1\u037f\113\0\1\u0380\51\0\1\u0381\120\0\1\u0382\53\0"+
    "\1\u0383\73\0\1\u0384\64\0\1\u0385\72\0\1\u0386\70\0"+
    "\1\u0387\74\0\1\u0388\70\0\1\u0389\74\0\1\u038a\117\0"+
    "\1\u038b\31\0\3\273\4\0\11\273\1\u038c\6\273\1\u0190"+
    "\1\0\1\273\1\0\12\273\2\0\1\273\5\0\1\273"+
    "\15\0\3\273\4\0\13\273\1\u038d\4\273\1\u0190\1\0"+
    "\1\273\1\0\12\273\2\0\1\273\5\0\1\273\15\0"+
    "\3\273\4\0\16\273\1\u038e\1\273\1\u0190\1\0\1\273"+
    "\1\0\12\273\2\0\1\273\5\0\1\273\15\0\3\273"+
    "\4\0\3\273\1\u038f\14\273\1\u0190\1\0\1\273\1\0"+
    "\12\273\2\0\1\273\5\0\1\273\15\0\3\273\4\0"+
    "\20\273\1\u0190\1\0\1\273\1\0\7\273\1\u0390\2\273"+
    "\2\0\1\273\5\0\1\273\15\0\3\273\4\0\3\273"+
    "\1\u0391\14\273\1\u0190\1\0\1\273\1\0\12\273\2\0"+
    "\1\273\5\0\1\273\42\0\1\u0392\57\0\1\u0393\120\0"+
    "\1\u0394\72\0\1\u0395\72\0\1\u0396\44\0\1\u0397\72\0"+
    "\1\u0398\60\0\3\u01b7\4\0\11\u01b7\1\u0399\6\u01b7\1\u01b8"+
    "\1\0\1\u01b7\1\0\12\u01b7\2\0\1\u01b7\5\0\1\u01b7"+
    "\15\0\3\u01b7\4\0\12\u01b7\1\u039a\5\u01b7\1\u01b8\1\0"+
    "\1\u01b7\1\0\12\u01b7\2\0\1\u01b7\5\0\1\u01b7\15\0"+
    "\3\u01b7\4\0\20\u01b7\1\u01b8\1\0\1\u01b7\1\0\3\u01b7"+
    "\1\u039b\6\u01b7\2\0\1\u01b7\5\0\1\u01b7\15\0\3\u01b7"+
    "\4\0\20\u01b7\1\u01b8\1\0\1\u01b7\1\0\1\u01b7\1\u039c"+
    "\10\u01b7\2\0\1\u01b7\5\0\1\u01b7\15\0\3\u01b7\4\0"+
    "\20\u01b7\1\u01b8\1\0\1\u01b7\1\0\3\u01b7\1\u039d\6\u01b7"+
    "\2\0\1\u01b7\5\0\1\u01b7\15\0\3\u01b7\4\0\20\u01b7"+
    "\1\u01b8\1\0\1\u01b7\1\0\3\u01b7\1\u039e\6\u01b7\2\0"+
    "\1\u01b7\5\0\1\u01b7\15\0\3\u01b7\4\0\20\u01b7\1\u01b8"+
    "\1\0\1\u01b7\1\0\5\u01b7\1\u039f\4\u01b7\2\0\1\u01b7"+
    "\5\0\1\u01b7\15\0\3\u0112\4\0\11\u0112\1\u03a0\6\u0112"+
    "\1\u01c5\1\0\1\u0112\1\0\12\u0112\2\0\1\u0112\5\0"+
    "\1\u0112\15\0\3\u0112\4\0\13\u0112\1\u03a1\4\u0112\1\u01c5"+
    "\1\0\1\u0112\1\0\12\u0112\2\0\1\u0112\5\0\1\u0112"+
    "\15\0\3\u0112\4\0\16\u0112\1\u03a2\1\u0112\1\u01c5\1\0"+
    "\1\u0112\1\0\12\u0112\2\0\1\u0112\5\0\1\u0112\15\0"+
    "\3\u0112\4\0\3\u0112\1\u03a3\14\u0112\1\u01c5\1\0\1\u0112"+
    "\1\0\12\u0112\2\0\1\u0112\5\0\1\u0112\15\0\3\u0112"+
    "\4\0\20\u0112\1\u01c5\1\0\1\u0112\1\0\7\u0112\1\u03a4"+
    "\2\u0112\2\0\1\u0112\5\0\1\u0112\15\0\3\u0112\4\0"+
    "\3\u0112\1\u03a5\14\u0112\1\u01c5\1\0\1\u0112\1\0\12\u0112"+
    "\2\0\1\u0112\5\0\1\u0112\55\0\1\u03a6\70\0\1\u03a7"+
    "\56\0\1\u03a8\110\0\1\u03a9\65\0\1\u03aa\52\0\1\u03ab"+
    "\116\0\1\u03ac\46\0\1\u03ad\74\0\1\u03ae\114\0\1\u03af"+
    "\66\0\1\u03b0\76\0\1\u03b1\73\0\1\u03b2\67\0\1\u03b3"+
    "\70\0\1\u03b4\72\0\1\u03b5\73\0\1\u03b6\57\0\1\u03b7"+
    "\113\0\1\u03b8\42\0\1\u03b9\117\0\1\u03ba\44\0\1\u03bb"+
    "\120\0\1\u03bc\72\0\1\u03bd\66\0\1\u03be\37\0\3\273"+
    "\4\0\3\273\1\u03bf\14\273\1\u0190\1\0\1\273\1\0"+
    "\12\273\2\0\1\273\5\0\1\273\15\0\3\273\4\0"+
    "\20\273\1\u0190\1\0\1\273\1\0\5\273\1\u03c0\4\273"+
    "\2\0\1\273\5\0\1\273\15\0\3\273\4\0\5\273"+
    "\1\u03c1\12\273\1\u0190\1\0\1\273\1\0\1\u03c2\11\273"+
    "\2\0\1\273\5\0\1\273\15\0\3\273\4\0\3\273"+
    "\1\u03c3\14\273\1\u0190\1\0\1\273\1\0\12\273\2\0"+
    "\1\273\5\0\1\273\50\0\1\u03c4\51\0\1\u03c5\113\0"+
    "\1\u03c6\51\0\1\u03c7\113\0\1\u03c8\37\0\3\u01b7\4\0"+
    "\3\u01b7\1\u03c9\14\u01b7\1\u01b8\1\0\1\u01b7\1\0\12\u01b7"+
    "\2\0\1\u01b7\5\0\1\u01b7\15\0\3\u01b7\4\0\20\u01b7"+
    "\1\u01b8\1\0\1\u01b7\1\0\1\u01b7\1\u03ca\10\u01b7\2\0"+
    "\1\u01b7\5\0\1\u01b7\15\0\3\u01b7\4\0\20\u01b7\1\u01b8"+
    "\1\0\1\u01b7\1\0\5\u01b7\1\u03cb\4\u01b7\2\0\1\u01b7"+
    "\5\0\1\u01b7\15\0\3\u01b7\4\0\20\u01b7\1\u01b8\1\0"+
    "\1\u01b7\1\0\1\u03cc\11\u01b7\2\0\1\u01b7\5\0\1\u01b7"+
    "\15\0\3\u01b7\4\0\5\u01b7\1\u03cd\12\u01b7\1\u01b8\1\0"+
    "\1\u01b7\1\0\12\u01b7\2\0\1\u01b7\5\0\1\u01b7\15\0"+
    "\3\u01b7\4\0\20\u01b7\1\u01b8\1\0\1\u01b7\1\0\7\u01b7"+
    "\1\u03ce\2\u01b7\2\0\1\u01b7\5\0\1\u01b7\15\0\3\u0112"+
    "\4\0\3\u0112\1\u03cf\14\u0112\1\u01c5\1\0\1\u0112\1\0"+
    "\12\u0112\2\0\1\u0112\5\0\1\u0112\15\0\3\u0112\4\0"+
    "\20\u0112\1\u01c5\1\0\1\u0112\1\0\5\u0112\1\u03d0\4\u0112"+
    "\2\0\1\u0112\5\0\1\u0112\15\0\3\u0112\4\0\5\u0112"+
    "\1\u03d1\12\u0112\1\u01c5\1\0\1\u0112\1\0\1\u03d2\11\u0112"+
    "\2\0\1\u0112\5\0\1\u0112\15\0\3\u0112\4\0\3\u0112"+
    "\1\u03d3\14\u0112\1\u01c5\1\0\1\u0112\1\0\12\u0112\2\0"+
    "\1\u0112\5\0\1\u0112\57\0\1\u03d4\70\0\1\u03d5\44\0"+
    "\1\u03d6\101\0\1\u03d7\107\0\1\u03d8\67\0\1\u03d9\72\0"+
    "\1\u03da\51\0\1\u03db\113\0\1\u03dc\64\0\1\u03dd\101\0"+
    "\1\u03de\76\0\1\u03df\74\0\1\u03e0\63\0\1\u03e1\72\0"+
    "\1\u03e2\72\0\1\u03e3\37\0\3\273\4\0\20\273\1\u0190"+
    "\1\0\1\273\1\0\1\u03e4\11\273\2\0\1\273\5\0"+
    "\1\273\15\0\3\273\4\0\20\273\1\u0190\1\0\1\273"+
    "\1\0\7\273\1\u03e5\2\273\2\0\1\273\5\0\1\273"+
    "\15\0\3\273\4\0\3\273\1\u03e6\14\273\1\u0190\1\0"+
    "\1\273\1\0\12\273\2\0\1\273\5\0\1\273\15\0"+
    "\3\273\4\0\2\273\1\u03e7\15\273\1\u0190\1\0\1\273"+
    "\1\0\12\273\2\0\1\273\5\0\1\273\15\0\3\273"+
    "\4\0\16\273\1\u03e8\1\273\1\u0190\1\0\1\273\1\0"+
    "\12\273\2\0\1\273\5\0\1\273\26\0\1\u03e9\120\0"+
    "\1\u03ea\55\0\1\u03eb\107\0\1\u03ec\33\0\3\u01b7\4\0"+
    "\20\u01b7\1\u01b8\1\0\1\u01b7\1\0\1\u03ed\11\u01b7\2\0"+
    "\1\u01b7\5\0\1\u01b7\15\0\3\u01b7\4\0\16\u01b7\1\u03ee"+
    "\1\u01b7\1\u01b8\1\0\1\u01b7\1\0\12\u01b7\2\0\1\u01b7"+
    "\5\0\1\u01b7\15\0\3\u01b7\4\0\20\u01b7\1\u01b8\1\0"+
    "\1\u01b7\1\0\7\u01b7\1\u03ef\2\u01b7\2\0\1\u01b7\5\0"+
    "\1\u01b7\15\0\3\u01b7\4\0\20\u01b7\1\u01b8\1\0\1\u01b7"+
    "\1\0\3\u01b7\1\u03f0\6\u01b7\2\0\1\u01b7\5\0\1\u01b7"+
    "\15\0\3\u01b7\4\0\20\u01b7\1\u01b8\1\0\1\u01b7\1\0"+
    "\7\u01b7\1\u03f1\2\u01b7\2\0\1\u01b7\5\0\1\u01b7\15\0"+
    "\3\u01b7\4\0\4\u01b7\1\u03f2\13\u01b7\1\u01b8\1\0\1\u01b7"+
    "\1\0\12\u01b7\2\0\1\u01b7\5\0\1\u01b7\15\0\3\u0112"+
    "\4\0\20\u0112\1\u01c5\1\0\1\u0112\1\0\1\u03f3\11\u0112"+
    "\2\0\1\u0112\5\0\1\u0112\15\0\3\u0112\4\0\20\u0112"+
    "\1\u01c5\1\0\1\u0112\1\0\7\u0112\1\u03f4\2\u0112\2\0"+
    "\1\u0112\5\0\1\u0112\15\0\3\u0112\4\0\3\u0112\1\u03f5"+
    "\14\u0112\1\u01c5\1\0\1\u0112\1\0\12\u0112\2\0\1\u0112"+
    "\5\0\1\u0112\15\0\3\u0112\4\0\2\u0112\1\u03f6\15\u0112"+
    "\1\u01c5\1\0\1\u0112\1\0\12\u0112\2\0\1\u0112\5\0"+
    "\1\u0112\15\0\3\u0112\4\0\16\u0112\1\u03f7\1\u0112\1\u01c5"+
    "\1\0\1\u0112\1\0\12\u0112\2\0\1\u0112\5\0\1\u0112"+
    "\30\0\1\u03f8\121\0\1\u03f9\72\0\1\u03fa\52\0\1\u03fb"+
    "\110\0\1\u03fc\54\0\1\u03fd\111\0\1\u03fe\43\0\1\u03ff"+
    "\60\0\3\273\4\0\4\273\1\u0400\13\273\1\u0190\1\0"+
    "\1\273\1\0\12\273\2\0\1\273\5\0\1\273\15\0"+
    "\3\273\4\0\3\273\1\u0401\14\273\1\u0190\1\0\1\273"+
    "\1\0\12\273\2\0\1\273\5\0\1\273\15\0\3\273"+
    "\4\0\20\273\1\u0190\1\0\1\273\1\0\1\u0402\11\273"+
    "\2\0\1\273\5\0\1\273\15\0\3\273\4\0\20\273"+
    "\1\u0190\1\0\1\273\1\0\7\273\1\u0403\2\273\2\0"+
    "\1\273\5\0\1\273\50\0\1\u0404\106\0\1\u0405\72\0"+
    "\1\u0406\23\0\3\u01b7\4\0\12\u01b7\1\u0407\5\u01b7\1\u01b8"+
    "\1\0\1\u01b7\1\0\12\u01b7\2\0\1\u01b7\5\0\1\u01b7"+
    "\15\0\3\u01b7\4\0\4\u01b7\1\u0408\13\u01b7\1\u01b8\1\0"+
    "\1\u01b7\1\0\12\u01b7\2\0\1\u01b7\5\0\1\u01b7\15\0"+
    "\3\u01b7\4\0\3\u01b7\1\u03ca\14\u01b7\1\u01b8\1\0\1\u01b7"+
    "\1\0\12\u01b7\2\0\1\u01b7\5\0\1\u01b7\15\0\3\u01b7"+
    "\4\0\16\u01b7\1\u0409\1\u01b7\1\u01b8\1\0\1\u01b7\1\0"+
    "\12\u01b7\2\0\1\u01b7\5\0\1\u01b7\15\0\3\u0112\4\0"+
    "\4\u0112\1\u040a\13\u0112\1\u01c5\1\0\1\u0112\1\0\12\u0112"+
    "\2\0\1\u0112\5\0\1\u0112\15\0\3\u0112\4\0\3\u0112"+
    "\1\u040b\14\u0112\1\u01c5\1\0\1\u0112\1\0\12\u0112\2\0"+
    "\1\u0112\5\0\1\u0112\15\0\3\u0112\4\0\20\u0112\1\u01c5"+
    "\1\0\1\u0112\1\0\1\u040c\11\u0112\2\0\1\u0112\5\0"+
    "\1\u0112\15\0\3\u0112\4\0\20\u0112\1\u01c5\1\0\1\u0112"+
    "\1\0\7\u0112\1\u040d\2\u0112\2\0\1\u0112\5\0\1\u0112"+
    "\30\0\1\u040e\75\0\1\u040f\75\0\1\u0410\67\0\1\u0411"+
    "\107\0\1\u0412\37\0\3\273\4\0\16\273\1\u0413\1\273"+
    "\1\u0190\1\0\1\273\1\0\12\273\2\0\1\273\5\0"+
    "\1\273\15\0\3\273\4\0\20\273\1\u0190\1\0\1\273"+
    "\1\0\1\273\1\u0414\10\273\2\0\1\273\5\0\1\273"+
    "\15\0\3\273\4\0\6\273\1\u0415\11\273\1\u0190\1\0"+
    "\1\273\1\0\12\273\2\0\1\273\5\0\1\273\15\0"+
    "\3\273\4\0\12\273\1\u0416\5\273\1\u0190\1\0\1\273"+
    "\1\0\12\273\2\0\1\273\5\0\1\273\32\0\1\u0417"+
    "\55\0\3\u01b7\4\0\20\u01b7\1\u01b8\1\0\1\u01b7\1\0"+
    "\1\u01b7\1\u0418\10\u01b7\2\0\1\u01b7\5\0\1\u01b7\15\0"+
    "\3\u01b7\4\0\16\u01b7\1\u0419\1\u01b7\1\u01b8\1\0\1\u01b7"+
    "\1\0\12\u01b7\2\0\1\u01b7\5\0\1\u01b7\15\0\3\u01b7"+
    "\4\0\13\u01b7\1\u041a\4\u01b7\1\u01b8\1\0\1\u01b7\1\0"+
    "\12\u01b7\2\0\1\u01b7\5\0\1\u01b7\15\0\3\u0112\4\0"+
    "\16\u0112\1\u041b\1\u0112\1\u01c5\1\0\1\u0112\1\0\12\u0112"+
    "\2\0\1\u0112\5\0\1\u0112\15\0\3\u0112\4\0\20\u0112"+
    "\1\u01c5\1\0\1\u0112\1\0\1\u0112\1\u041c\10\u0112\2\0"+
    "\1\u0112\5\0\1\u0112\15\0\3\u0112\4\0\6\u0112\1\u041d"+
    "\11\u0112\1\u01c5\1\0\1\u0112\1\0\12\u0112\2\0\1\u0112"+
    "\5\0\1\u0112\15\0\3\u0112\4\0\12\u0112\1\u041e\5\u0112"+
    "\1\u01c5\1\0\1\u0112\1\0\12\u0112\2\0\1\u0112\5\0"+
    "\1\u0112\31\0\1\u041f\120\0\1\u0420\44\0\1\u0421\56\0"+
    "\3\273\4\0\20\273\1\u0190\1\0\1\273\1\0\5\273"+
    "\1\u0422\4\273\2\0\1\273\5\0\1\273\15\0\3\273"+
    "\4\0\20\273\1\u0190\1\0\1\273\1\0\5\273\1\u0423"+
    "\4\273\2\0\1\273\5\0\1\273\15\0\3\273\4\0"+
    "\20\273\1\u0190\1\0\1\273\1\0\1\u0424\11\273\2\0"+
    "\1\273\5\0\1\273\15\0\3\273\4\0\20\273\1\u0190"+
    "\1\0\1\273\1\0\3\273\1\u0425\6\273\2\0\1\273"+
    "\5\0\1\273\50\0\1\u0426\37\0\3\u01b7\4\0\16\u01b7"+
    "\1\u0427\1\u01b7\1\u01b8\1\0\1\u01b7\1\0\12\u01b7\2\0"+
    "\1\u01b7\5\0\1\u01b7\15\0\3\u01b7\4\0\13\u01b7\1\u0428"+
    "\4\u01b7\1\u01b8\1\0\1\u01b7\1\0\12\u01b7\2\0\1\u01b7"+
    "\5\0\1\u01b7\15\0\3\u01b7\4\0\20\u01b7\1\u01b8\1\0"+
    "\1\u01b7\1\0\5\u01b7\1\u0429\4\u01b7\2\0\1\u01b7\5\0"+
    "\1\u01b7\15\0\3\u0112\4\0\20\u0112\1\u01c5\1\0\1\u0112"+
    "\1\0\5\u0112\1\u042a\4\u0112\2\0\1\u0112\5\0\1\u0112"+
    "\15\0\3\u0112\4\0\20\u0112\1\u01c5\1\0\1\u0112\1\0"+
    "\5\u0112\1\u042b\4\u0112\2\0\1\u0112\5\0\1\u0112\15\0"+
    "\3\u0112\4\0\20\u0112\1\u01c5\1\0\1\u0112\1\0\1\u042c"+
    "\11\u0112\2\0\1\u0112\5\0\1\u0112\15\0\3\u0112\4\0"+
    "\20\u0112\1\u01c5\1\0\1\u0112\1\0\3\u0112\1\u042d\6\u0112"+
    "\2\0\1\u0112\5\0\1\u0112\54\0\1\u042e\72\0\1\u042f"+
    "\33\0\3\273\4\0\20\273\1\u0190\1\0\1\273\1\0"+
    "\7\273\1\u0430\2\273\2\0\1\273\5\0\1\273\15\0"+
    "\3\273\4\0\20\273\1\u0190\1\0\1\273\1\0\10\273"+
    "\1\u0431\1\273\2\0\1\273\5\0\1\273\15\0\3\273"+
    "\4\0\20\273\1\u0190\1\0\1\273\1\0\7\273\1\u0432"+
    "\2\273\2\0\1\273\5\0\1\273\15\0\3\273\4\0"+
    "\20\273\1\u0190\1\0\1\273\1\0\1\u0433\11\273\2\0"+
    "\1\273\5\0\1\273\57\0\1\u0434\30\0\3\u01b7\4\0"+
    "\13\u01b7\1\u0435\4\u01b7\1\u01b8\1\0\1\u01b7\1\0\12\u01b7"+
    "\2\0\1\u01b7\5\0\1\u01b7\15\0\3\u01b7\4\0\20\u01b7"+
    "\1\u01b8\1\0\1\u01b7\1\0\5\u01b7\1\u0436\4\u01b7\2\0"+
    "\1\u01b7\5\0\1\u01b7\15\0\3\u01b7\4\0\20\u01b7\1\u01b8"+
    "\1\0\1\u01b7\1\0\10\u01b7\1\u0437\1\u01b7\2\0\1\u01b7"+
    "\5\0\1\u01b7\15\0\3\u0112\4\0\20\u0112\1\u01c5\1\0"+
    "\1\u0112\1\0\7\u0112\1\u0438\2\u0112\2\0\1\u0112\5\0"+
    "\1\u0112\15\0\3\u0112\4\0\20\u0112\1\u01c5\1\0\1\u0112"+
    "\1\0\10\u0112\1\u0439\1\u0112\2\0\1\u0112\5\0\1\u0112"+
    "\15\0\3\u0112\4\0\20\u0112\1\u01c5\1\0\1\u0112\1\0"+
    "\7\u0112\1\u043a\2\u0112\2\0\1\u0112\5\0\1\u0112\15\0"+
    "\3\u0112\4\0\20\u0112\1\u01c5\1\0\1\u0112\1\0\1\u043b"+
    "\11\u0112\2\0\1\u0112\5\0\1\u0112\50\0\1\u043c\72\0"+
    "\1\u043d\37\0\3\273\4\0\13\273\1\u043e\4\273\1\u0190"+
    "\1\0\1\273\1\0\12\273\2\0\1\273\5\0\1\273"+
    "\15\0\3\273\4\0\11\273\1\u043f\6\273\1\u0190\1\0"+
    "\1\273\1\0\12\273\2\0\1\273\5\0\1\273\15\0"+
    "\3\273\4\0\3\273\1\u0440\14\273\1\u0190\1\0\1\273"+
    "\1\0\12\273\2\0\1\273\5\0\1\273\27\0\1\u0441"+
    "\60\0\3\u01b7\4\0\20\u01b7\1\u01b8\1\0\1\u01b7\1\0"+
    "\1\u0442\11\u01b7\2\0\1\u01b7\5\0\1\u01b7\15\0\3\u01b7"+
    "\4\0\20\u01b7\1\u01b8\1\0\1\u01b7\1\0\10\u01b7\1\u0443"+
    "\1\u01b7\2\0\1\u01b7\5\0\1\u01b7\15\0\3\u01b7\4\0"+
    "\2\u01b7\1\u0444\15\u01b7\1\u01b8\1\0\1\u01b7\1\0\12\u01b7"+
    "\2\0\1\u01b7\5\0\1\u01b7\15\0\3\u0112\4\0\13\u0112"+
    "\1\u0445\4\u0112\1\u01c5\1\0\1\u0112\1\0\12\u0112\2\0"+
    "\1\u0112\5\0\1\u0112\15\0\3\u0112\4\0\11\u0112\1\u0446"+
    "\6\u0112\1\u01c5\1\0\1\u0112\1\0\12\u0112\2\0\1\u0112"+
    "\5\0\1\u0112\15\0\3\u0112\4\0\3\u0112\1\u0447\14\u0112"+
    "\1\u01c5\1\0\1\u0112\1\0\12\u0112\2\0\1\u0112\5\0"+
    "\1\u0112\37\0\1\u0448\50\0\3\273\4\0\3\273\1\u0449"+
    "\14\273\1\u0190\1\0\1\273\1\0\12\273\2\0\1\273"+
    "\5\0\1\273\15\0\3\273\4\0\3\273\1\u044a\14\273"+
    "\1\u0190\1\0\1\273\1\0\12\273\2\0\1\273\5\0"+
    "\1\273\15\0\3\u01b7\4\0\2\u01b7\1\u044b\15\u01b7\1\u01b8"+
    "\1\0\1\u01b7\1\0\12\u01b7\2\0\1\u01b7\5\0\1\u01b7"+
    "\15\0\3\u01b7\4\0\2\u01b7\1\u044c\15\u01b7\1\u01b8\1\0"+
    "\1\u01b7\1\0\12\u01b7\2\0\1\u01b7\5\0\1\u01b7\15\0"+
    "\3\u01b7\4\0\20\u01b7\1\u01b8\1\0\1\u01b7\1\0\5\u01b7"+
    "\1\u044d\4\u01b7\2\0\1\u01b7\5\0\1\u01b7\15\0\3\u0112"+
    "\4\0\3\u0112\1\u044e\14\u0112\1\u01c5\1\0\1\u0112\1\0"+
    "\12\u0112\2\0\1\u0112\5\0\1\u0112\15\0\3\u0112\4\0"+
    "\3\u0112\1\u044f\14\u0112\1\u01c5\1\0\1\u0112\1\0\12\u0112"+
    "\2\0\1\u0112\5\0\1\u0112\15\0\3\273\4\0\20\273"+
    "\1\u0190\1\0\1\273\1\0\1\273\1\u0450\10\273\2\0"+
    "\1\273\5\0\1\273\15\0\3\273\4\0\20\273\1\u0190"+
    "\1\0\1\273\1\0\1\u0451\11\273\2\0\1\273\5\0"+
    "\1\273\15\0\3\u01b7\4\0\20\u01b7\1\u01b8\1\0\1\u01b7"+
    "\1\0\11\u01b7\1\u0452\2\0\1\u01b7\5\0\1\u01b7\15\0"+
    "\3\u01b7\4\0\20\u01b7\1\u01b8\1\0\1\u01b7\1\0\5\u01b7"+
    "\1\u0453\4\u01b7\2\0\1\u01b7\5\0\1\u01b7\15\0\3\u01b7"+
    "\4\0\20\u01b7\1\u01b8\1\0\1\u01b7\1\0\7\u01b7\1\u0454"+
    "\2\u01b7\2\0\1\u01b7\5\0\1\u01b7\15\0\3\u0112\4\0"+
    "\20\u0112\1\u01c5\1\0\1\u0112\1\0\1\u0112\1\u0455\10\u0112"+
    "\2\0\1\u0112\5\0\1\u0112\15\0\3\u0112\4\0\20\u0112"+
    "\1\u01c5\1\0\1\u0112\1\0\1\u0456\11\u0112\2\0\1\u0112"+
    "\5\0\1\u0112\15\0\3\273\4\0\11\273\1\u0457\6\273"+
    "\1\u0190\1\0\1\273\1\0\12\273\2\0\1\273\5\0"+
    "\1\273\15\0\3\u01b7\4\0\20\u01b7\1\u01b8\1\0\1\u01b7"+
    "\1\0\7\u01b7\1\u0458\2\u01b7\2\0\1\u01b7\5\0\1\u01b7"+
    "\15\0\3\u01b7\4\0\4\u01b7\1\u0459\13\u01b7\1\u01b8\1\0"+
    "\1\u01b7\1\0\12\u01b7\2\0\1\u01b7\5\0\1\u01b7\15\0"+
    "\3\u0112\4\0\11\u0112\1\u045a\6\u0112\1\u01c5\1\0\1\u0112"+
    "\1\0\12\u0112\2\0\1\u0112\5\0\1\u0112\15\0\3\273"+
    "\4\0\20\273\1\u0190\1\0\1\273\1\0\4\273\1\u045b"+
    "\5\273\2\0\1\273\5\0\1\273\15\0\3\u01b7\4\0"+
    "\4\u01b7\1\u03ed\13\u01b7\1\u01b8\1\0\1\u01b7\1\0\12\u01b7"+
    "\2\0\1\u01b7\5\0\1\u01b7\15\0\3\u0112\4\0\20\u0112"+
    "\1\u01c5\1\0\1\u0112\1\0\4\u0112\1\u045c\5\u0112\2\0"+
    "\1\u0112\5\0\1\u0112\15\0\3\273\4\0\3\273\1\u045d"+
    "\14\273\1\u0190\1\0\1\273\1\0\12\273\2\0\1\273"+
    "\5\0\1\273\15\0\3\u0112\4\0\3\u0112\1\u045e\14\u0112"+
    "\1\u01c5\1\0\1\u0112\1\0\12\u0112\2\0\1\u0112\5\0"+
    "\1\u0112\15\0\3\273\4\0\20\273\1\u0190\1\0\1\273"+
    "\1\0\5\273\1\u045f\4\273\2\0\1\273\5\0\1\273"+
    "\15\0\3\u0112\4\0\20\u0112\1\u01c5\1\0\1\u0112\1\0"+
    "\5\u0112\1\u0460\4\u0112\2\0\1\u0112\5\0\1\u0112\15\0"+
    "\3\273\4\0\12\273\1\u0461\5\273\1\u0190\1\0\1\273"+
    "\1\0\12\273\2\0\1\273\5\0\1\273\15\0\3\u0112"+
    "\4\0\12\u0112\1\u0462\5\u0112\1\u01c5\1\0\1\u0112\1\0"+
    "\12\u0112\2\0\1\u0112\5\0\1\u0112\15\0\3\273\4\0"+
    "\20\273\1\u0190\1\0\1\273\1\0\7\273\1\u0463\2\273"+
    "\2\0\1\273\5\0\1\273\15\0\3\u0112\4\0\20\u0112"+
    "\1\u01c5\1\0\1\u0112\1\0\7\u0112\1\u0464\2\u0112\2\0"+
    "\1\u0112\5\0\1\u0112\13\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[53808];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\166\0\1\11\10\1\1\11\2\1\1\11\4\1\2\11"+
    "\2\1\1\11\1\1\2\11\3\1\1\11\12\1\1\11"+
    "\24\1\3\11\3\1\1\11\14\1\4\11\2\1\1\11"+
    "\1\1\1\11\1\1\4\11\7\1\2\11\1\1\1\11"+
    "\2\1\1\11\2\1\1\11\4\1\1\11\4\1\1\11"+
    "\2\1\1\11\2\1\1\11\2\1\1\11\1\1\2\11"+
    "\5\1\2\11\13\1\2\11\2\1\1\11\15\1\1\11"+
    "\16\1\2\11\3\1\1\11\6\1\1\11\3\1\1\11"+
    "\2\1\1\11\2\1\2\11\5\1\5\11\1\1\1\11"+
    "\2\1\1\11\3\1\1\11\1\1\5\0\3\11\3\0"+
    "\2\11\4\0\2\11\27\0\1\11\11\0\2\1\1\0"+
    "\12\1\7\0\1\11\1\0\1\11\4\0\1\11\4\0"+
    "\1\11\2\0\1\11\2\0\1\1\1\0\1\11\1\1"+
    "\1\0\12\1\1\11\2\0\4\1\1\0\6\1\4\0"+
    "\1\1\1\11\3\0\1\11\7\0\2\1\1\11\5\0"+
    "\6\11\1\1\5\0\1\11\51\0\13\1\2\0\1\1"+
    "\1\11\3\0\1\11\12\0\1\11\1\0\1\1\1\0"+
    "\13\1\1\0\1\1\1\11\12\1\3\0\2\11\11\0"+
    "\2\1\14\0\1\11\1\0\1\11\42\0\12\1\3\0"+
    "\1\11\1\0\3\11\4\0\1\11\3\0\12\1\1\11"+
    "\12\1\14\0\1\11\1\0\1\11\27\0\1\11\3\0"+
    "\2\11\12\0\1\11\6\1\3\0\1\11\6\0\17\1"+
    "\1\11\1\0\3\11\2\0\2\11\3\0\2\11\1\0"+
    "\1\11\5\0\1\11\22\0\2\11\5\0\6\1\6\0"+
    "\1\11\1\0\1\11\15\1\4\0\2\11\1\0\2\11"+
    "\3\0\1\11\10\0\1\11\1\0\1\11\5\0\1\11"+
    "\1\0\1\11\2\0\6\1\1\0\1\11\3\0\1\11"+
    "\1\0\15\1\5\0\1\11\1\0\1\11\2\0\1\11"+
    "\1\0\1\11\1\0\1\11\3\0\2\11\1\0\1\11"+
    "\2\0\1\11\5\1\4\0\1\11\13\1\2\0\1\11"+
    "\1\0\2\11\2\0\1\11\3\0\4\11\5\1\2\0"+
    "\1\11\1\0\13\1\1\11\1\0\1\11\4\0\1\11"+
    "\4\1\1\0\2\11\7\1\1\11\3\0\1\11\4\1"+
    "\1\0\7\1\1\0\1\11\1\0\4\1\1\0\7\1"+
    "\2\0\4\1\1\0\7\1\1\0\1\11\3\1\1\11"+
    "\6\1\1\11\34\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[1124];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */


  _XQueryLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _XQueryLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1836) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 116: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { yybegin(_WILDCARD_QNAME_); return XQ_PREFIX_NAME;
          }
        case 217: break;
        case 1: 
          { yybegin(YYINITIAL); return BAD_CHARACTER;
          }
        case 218: break;
        case 201: 
          { yybegin(_URILITERAL); return KW_COLLATION;
          }
        case 219: break;
        case 213: 
          { pushState(_AS_OCC); pushState(_CLOSE_BRACE); pushState(_QNAME); yybegin(_OPEN_BRACE);  return KW_SCHEMA_ATTRIBUTE;
          }
        case 220: break;
        case 193: 
          { pushState(_SEP); pushState(_ATLIST); yybegin(NAMESPACEDECL); return KW_NAMESPACE;
          }
        case 221: break;
        case 157: 
          { pushState(_SEP); pushState(_STRINGLITERAL); yybegin(_QNAME); return KW_OPTION;
          }
        case 222: break;
        case 106: 
          { pushState(_PREDICATE_LIST);  yypushback(yylength()); pushState(_OPT_EXPR_LIST_IN_BRACE); yybegin(_QNAME);
          }
        case 223: break;
        case 196: 
          { yybegin(_EXPR_SINGLE); return KW_SATISFIES;
          }
        case 224: break;
        case 163: 
          { yybegin(_DECLARE); return KW_DECLARE;
          }
        case 225: break;
        case 175: 
          { pushState(_PREDICATE_LIST); yybegin(_EXPR_LIST_IN_CURLY); return KW_ORDERED;
          }
        case 226: break;
        case 5: 
          { return XML_COMMENT_CHAR;
          }
        case 227: break;
        case 212: 
          { yybegin(_DECLARE_COPYNS); return KW_COPY_NAMESPACES;
          }
        case 228: break;
        case 19: 
          { yybegin(_URILITERAL); return OP_EQUALS;
          }
        case 229: break;
        case 31: 
          { yypushback(yylength()); pushState(_AS_AorE_); yybegin(_QNAME);
          }
        case 230: break;
        case 190: 
          { pushState(_SEP); yybegin(NAMESPACEDECL); return KW_NAMESPACE;
          }
        case 231: break;
        case 130: 
          { pushState(_AS_OCC); yybegin(_EMPTY_BRACES); return KW_ITEM;
          }
        case 232: break;
        case 94: 
          { return XQ_STR_ESCAPE_APOS;
          }
        case 233: break;
        case 107: 
          { pushState(_XML_PI_END); yybegin(_XML_PI_NAME); return XML_PI_START;
          }
        case 234: break;
        case 48: 
          { yypushback(1); pushState(_TYPESWITCH_EXPR_RETURN); yybegin(_VARNAME);
          }
        case 235: break;
        case 140: 
          { popState(); return XML_STR_CHAR_REF;
          }
        case 236: break;
        case 202: 
          { yybegin(_SEP); return KW_NO_INHERIT;
          }
        case 237: break;
        case 37: 
          { pushState(_EXPR_LIST); yybegin(_EXPR_SINGLE); return OP_COMMA;
          }
        case 238: break;
        case 58: 
          { yybegin(_PREDICATE_LIST);  return OP_DOT;
          }
        case 239: break;
        case 216: 
          { pushState(_AS_OCC); pushState(_AS_PI); yybegin(_OPEN_BRACE); return KW_PROCESSING_INSTRUCTION;
          }
        case 240: break;
        case 210: 
          { pushState(_AS_OCC); pushState(_CLOSE_BRACE); pushState(_QNAME); yybegin(_OPEN_BRACE); return KW_SCHEMA_ELEMENT;
          }
        case 241: break;
        case 29: 
          { pushState(_CLOSE_BRACE); yypushback(yylength()); yybegin(_NCNAME);
          }
        case 242: break;
        case 146: 
          { pushState(_QUANT_EXPR_IN); yybegin(_PARAM); return KW_EVERY;
          }
        case 243: break;
        case 126: 
          { yybegin(_XML_ATTRLIST_START); return XML_PI_NAME;
          }
        case 244: break;
        case 149: 
          { pushState(_FLWOR_BODY2); yypushback(yylength()); yybegin(_WHERE_CLAUSE);
          }
        case 245: break;
        case 150: 
          { yybegin(_EXPR_SINGLE); return KW_WHERE;
          }
        case 246: break;
        case 170: 
          { yybegin(_IMPORT_SCHEMA_DEFAULT_ELEMENT); return KW_ELEMENT;
          }
        case 247: break;
        case 145: 
          { yybegin(_SEP); return KW_STRIP;
          }
        case 248: break;
        case 101: 
          { yybegin(_IF_EXPR_); return KW_IF;
          }
        case 249: break;
        case 161: 
          { yybegin(_VALIDATE_EXPR_); return KW_STRICT;
          }
        case 250: break;
        case 208: 
          { pushState(_AS_OCC); pushState(_AS_DN); yybegin(_OPEN_BRACE); return KW_DOCUMENT_NODE;
          }
        case 251: break;
        case 108: 
          { yybegin(_VARNAME); return KW_AT;
          }
        case 252: break;
        case 191: 
          { pushState(_SEP); yybegin(_URILITERAL); return KW_COLLATION;
          }
        case 253: break;
        case 18: 
          { yybegin(STR_START_APOS); return XQ_STR_START;
          }
        case 254: break;
        case 91: 
          { popState(); return XQ_COMMENT_END;
          }
        case 255: break;
        case 80: 
          { popState(); return OP_RCURLY;
          }
        case 256: break;
        case 195: 
          { pushState(_AS_OCC); pushState(_AS_AorE); yybegin(_OPEN_BRACE); return KW_ATTRIBUTE;
          }
        case 257: break;
        case 112: 
          { popState(); return OP_LCURLYCURLY;
          }
        case 258: break;
        case 40: 
          { yypushback(yylength()); pushState(_CLOSE_BRACE); pushState(_EXPR_LIST); yybegin(_EXPR_SINGLE);
          }
        case 259: break;
        case 49: 
          { yypushback(yylength()); yybegin(_AS_);
          }
        case 260: break;
        case 174: 
          { yybegin(_TYPESWITCH_EXPR_DEFAULT_); return KW_DEFAULT;
          }
        case 261: break;
        case 21: 
          { pushState(_ATLIST_); yybegin(_URILITERAL); return OP_COMMA;
          }
        case 262: break;
        case 66: 
          { pushState(_LET_CLAUSE_); pushState(_LET_CLAUSE_VAR); yybegin(_PARAM); return OP_COMMA;
          }
        case 263: break;
        case 12: 
          { return XML_STR_CHAR;
          }
        case 264: break;
        case 99: 
          { yybegin(_AS_); return KW_AS;
          }
        case 265: break;
        case 125: 
          { pushState(_LET_CLAUSE_); pushState(_LET_CLAUSE_VAR); yybegin(_PARAM); return KW_LET;
          }
        case 266: break;
        case 189: 
          { pushState(_SEP); yybegin(NAMESPACEDECL); return KW_MODULE;
          }
        case 267: break;
        case 209: 
          { yybegin(_PRESERVE_OR_STRIP); return KW_BOUNDARY_SPACE;
          }
        case 268: break;
        case 180: 
          { yybegin(_DECLARE_COPYNS_); return KW_PRESERVE;
          }
        case 269: break;
        case 110: 
          { pushState(_ORDER_CLAUSE_LIST); pushState(_ORDER_CLAUSE_MODIFIER); yybegin(_EXPR_SINGLE); return KW_BY;
          }
        case 270: break;
        case 65: 
          { yybegin(_FOR_CLAUSE); return OP_COMMA;
          }
        case 271: break;
        case 147: 
          { pushState(_PREDICATE_LIST); pushState(_NODE_TEST); yybegin(_COLONCOLON); return KW_CHILD;
          }
        case 272: break;
        case 79: 
          { popState(); return OP_LCURLY;
          }
        case 273: break;
        case 41: 
          { popState(); return OP_RBRACE;
          }
        case 274: break;
        case 68: 
          { yypushback(1); yybegin(_ORDER_CLAUSE_MODIFIER_EMPTY);
          }
        case 275: break;
        case 77: 
          { yybegin(_EMPTY_BRACES_); return OP_LBRACE;
          }
        case 276: break;
        case 46: 
          { yybegin(_TYPESWITCH_EXPR_CASE); return OP_RBRACE;
          }
        case 277: break;
        case 165: 
          { pushState(_XQUERY_VERSION); yybegin(_STRINGLITERAL); return KW_VERSION;
          }
        case 278: break;
        case 97: 
          { yybegin(_EXPR_SINGLE); return OP_ASSIGN;
          }
        case 279: break;
        case 166: 
          { yybegin(_DECLARE_DEFAULT); return KW_DEFAULT;
          }
        case 280: break;
        case 74: 
          { yybegin(_XML_STR_START_QUOTE); return XML_STR_START;
          }
        case 281: break;
        case 75: 
          { yybegin(_XML_STR_START_APOS); return XML_STR_START;
          }
        case 282: break;
        case 83: 
          { popState(); return OP_COLON;
          }
        case 283: break;
        case 9: 
          { yypushback(yylength()); pushState(); yybegin(_STR_COMMON_CONTENT);
          }
        case 284: break;
        case 203: 
          { yypushback(yylength()); yybegin(_TYPESWITCH_EXPR);
          }
        case 285: break;
        case 67: 
          { pushState(_ORDER_CLAUSE_LIST); pushState(_ORDER_CLAUSE_MODIFIER); yybegin(_EXPR_SINGLE); return OP_COMMA;
          }
        case 286: break;
        case 124: 
          { pushState(_FOR_CLAUSE_VAR_IN); pushState(_FOR_CLAUSE_VAR_POS); yybegin(_PARAM); return KW_FOR;
          }
        case 287: break;
        case 42: 
          { pushState(_IF_EXPR__); pushState(_EXPR_LIST); yybegin(_EXPR_SINGLE); return OP_LBRACE;
          }
        case 288: break;
        case 115: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { yybegin(_QNAME_); return XQ_PREFIX_NAME;
          }
        case 289: break;
        case 185: 
          { yybegin(_VALIDATE_EXPR_X); return KW_VALIDATE;
          }
        case 290: break;
        case 199: 
          { pushState(_PREDICATE_LIST); pushState(_NODE_TEST); yybegin(_COLONCOLON); return KW_FOLLOWING;
          }
        case 291: break;
        case 78: 
          { popState(); return OP_LBRACE;
          }
        case 292: break;
        case 148: 
          { pushState(_FLWOR_BODY3); yypushback(yylength()); yybegin(_ORDER_CLAUSE);
          }
        case 293: break;
        case 54: 
          { popState(); return OP_SLASH;
          }
        case 294: break;
        case 117: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { yybegin(_QNAME_); return OP_STAR;
          }
        case 295: break;
        case 15: 
          { yybegin(YYINITIAL); return OP_SEPERATOR;
          }
        case 296: break;
        case 72: 
          { pushState(_XML_ATTRLIST_START); yybegin(_XML_ATTR_NAME); return WHITE_SPACE;
          }
        case 297: break;
        case 81: 
          { popState(); return OP_RSQUARE;
          }
        case 298: break;
        case 178: 
          { pushState(_SEP); pushState(_DECLARE_VARIABLE); yybegin(_PARAM); return KW_VARIABLE;
          }
        case 299: break;
        case 152: 
          { yybegin(_ORDER_CLAUSE_MODIFIER_EMPTY_); return KW_EMPTY;
          }
        case 300: break;
        case 4: 
          { return XQ_COMMENT_CHAR;
          }
        case 301: break;
        case 183: 
          { popState(); return KW_EXTERNAL;
          }
        case 302: break;
        case 128: 
          { popState(); return XQ_STR_ENT_REF;
          }
        case 303: break;
        case 96: 
          { return XML_STR_ESCAPE_APOS;
          }
        case 304: break;
        case 43: 
          { yybegin(_IF_EXPR_THEN); return OP_RBRACE;
          }
        case 305: break;
        case 60: 
          { pushState(_PREDICATE_LIST); yypushback(1); yybegin(_STRINGLITERAL);
          }
        case 306: break;
        case 27: 
          { popState(); return OP_QUESTION;
          }
        case 307: break;
        case 105: 
          { yybegin(_PREDICATE_LIST); return OP_DOTDOT;
          }
        case 308: break;
        case 87: 
          { yybegin(_QNAME_LOCAL); return OP_COLON;
          }
        case 309: break;
        case 144: 
          { yybegin(_SEP); return KW_LEAST;
          }
        case 310: break;
        case 129: 
          { pushState(_AS_OCC); yybegin(_EMPTY_BRACES); return KW_TEXT;
          }
        case 311: break;
        case 98: 
          { pushState(_ATLIST_); yybegin(_URILITERAL); return KW_AT;
          }
        case 312: break;
        case 39: 
          { yybegin(_EXPR_LIST_OR_RBRACE); return OP_LBRACE;
          }
        case 313: break;
        case 35: 
          { yypushback(yylength()); yybegin(_INSTANCEOF_EXPR);
          }
        case 314: break;
        case 187: 
          { yybegin(_ORDER_CLAUSE_MODIFIER_COLLATION); return KW_GREATEST;
          }
        case 315: break;
        case 156: 
          { yybegin(_IMPORT); return KW_IMPORT;
          }
        case 316: break;
        case 36: 
          { yypushback(1); popState();
          }
        case 317: break;
        case 56: 
          { yypushback(yylength()); pushState(_PREDICATE_LIST); yybegin(_NODE_TEST);
          }
        case 318: break;
        case 119: 
          { popState(); return XML_COMMENT_END;
          }
        case 319: break;
        case 215: 
          { pushState(_PREDICATE_LIST); pushState(_NODE_TEST); yybegin(_COLONCOLON); return KW_FOLLOWING_SIBLING;
          }
        case 320: break;
        case 168: 
          { yybegin(_DECLARE_DEFAULT_NAMESPACE); return KW_ELEMENT;
          }
        case 321: break;
        case 76: 
          { yypushback(yylength()); yybegin(_EXPR_LIST_IN_CURLY);
          }
        case 322: break;
        case 3: 
          { return XQ_INTEGER_LITERAL;
          }
        case 323: break;
        case 194: 
          { pushState(_SEP); pushState(_ATLIST); yybegin(_URILITERAL); return KW_NAMESPACE;
          }
        case 324: break;
        case 120: 
          { pushState(_FLWOR_HEAD); yypushback(yylength()); yybegin(_LET_CLAUSE);
          }
        case 325: break;
        case 24: 
          { popState(); yypushback(1);
          }
        case 326: break;
        case 118: 
          { return XQ_DOUBLE_LITERAL;
          }
        case 327: break;
        case 182: 
          { yybegin(_SEP); return KW_GREATEST;
          }
        case 328: break;
        case 113: 
          { popState(); return OP_RCURLYCURLY;
          }
        case 329: break;
        case 47: 
          { yypushback(yylength()); yybegin(_TYPESWITCH_EXPR_RETURN);
          }
        case 330: break;
        case 198: 
          { pushState(_PREDICATE_LIST); yybegin(_EXPR_LIST_IN_CURLY); return KW_UNORDERED;
          }
        case 331: break;
        case 86: 
          { popState(); return XQ_LOCAL_NAME;
          }
        case 332: break;
        case 102: 
          { pushState(_QUANT_EXPR_SATISFIES); yybegin(_EXPR_SINGLE); return KW_IN;
          }
        case 333: break;
        case 214: 
          { pushState(_PREDICATE_LIST); pushState(_NODE_TEST); yybegin(_COLONCOLON); return KW_DESCENDANT_OR_SELF;
          }
        case 334: break;
        case 164: 
          { yybegin(_SEP); return KW_ORDERED;
          }
        case 335: break;
        case 135: 
          { yybegin(_EXPR_SINGLE); return KW_ELSE;
          }
        case 336: break;
        case 71: 
          { return XML_PI_CHAR;
          }
        case 337: break;
        case 28: 
          { yypushback(1); yybegin(_CLOSE_BRACE);
          }
        case 338: break;
        case 181: 
          { yybegin(_DECLARE_DEFAULT_NAMESPACE); return KW_FUNCTION;
          }
        case 339: break;
        case 177: 
          { yybegin(DECLAREORDERING); return KW_ORDERING;
          }
        case 340: break;
        case 167: 
          { yybegin(_SEP); return KW_INHERIT;
          }
        case 341: break;
        case 206: 
          { yybegin(_DECLARE_COPYNS_); return KW_NO_PRESERVE;
          }
        case 342: break;
        case 73: 
          { yypushback(yylength()); pushState(_XML_ATTR_VALUE); pushState(_EQUALS); yybegin(_QNAME);
          }
        case 343: break;
        case 57: 
          { yybegin(_PREDICATE_LIST); return XQ_INTEGER_LITERAL;
          }
        case 344: break;
        case 64: 
          { pushState(_PREDICATE_LIST); pushState(_CLOSE_SQUARE); pushState(_EXPR_LIST); yybegin(_EXPR_SINGLE); return OP_LSQUARE;
          }
        case 345: break;
        case 30: 
          { pushState(_CLOSE_BRACE); yypushback(1); yybegin(_STRINGLITERAL);
          }
        case 346: break;
        case 158: 
          { yybegin(_IMPORT_MODULE); return KW_MODULE;
          }
        case 347: break;
        case 139: 
          { pushState(_PREDICATE_LIST); yybegin(XML_COMMENT); return XML_COMMENT_START;
          }
        case 348: break;
        case 14: 
          { popState(); return XML_STR_END;
          }
        case 349: break;
        case 88: 
          { yybegin(_WILDCARD_QNAME_LOCAL); return OP_COLON;
          }
        case 350: break;
        case 162: 
          { yybegin(_ORDER_CLAUSE); return KW_STABLE;
          }
        case 351: break;
        case 82: 
          { yybegin(_QNAME); return OP_VARSTART;
          }
        case 352: break;
        case 134: 
          { pushState(_IF_EXPR_ELSE); yybegin(_EXPR_SINGLE); return KW_THEN;
          }
        case 353: break;
        case 7: 
          { yybegin(_NAMESPACEDECL_); return XQ_LOCAL_NAME;
          }
        case 354: break;
        case 111: 
          { popState(); return XML_PI_END;
          }
        case 355: break;
        case 138: 
          { pushState(_PREDICATE_LIST); pushState(_NODE_TEST); yybegin(_COLONCOLON); return KW_SELF;
          }
        case 356: break;
        case 33: 
          { pushState(_AS_AorE__); yybegin(_QNAME); return OP_COMMA;
          }
        case 357: break;
        case 103: 
          { popState(); return OP_SLASHSLASH;
          }
        case 358: break;
        case 211: 
          { pushState(_CLOSE_BRACE); pushState(_CLOSE_BRACE); pushState(_QNAME); yybegin(_OPEN_BRACE); return KW_SCHEMA_ELEMENT;
          }
        case 359: break;
        case 200: 
          { return KW_ASCENDING;
          }
        case 360: break;
        case 90: 
          { pushState(); yybegin(EXPR_COMMENT); return XQ_COMMENT_START;
          }
        case 361: break;
        case 142: 
          { yybegin(_DECLARE_DEFAULT_ORDER); return KW_ORDER;
          }
        case 362: break;
        case 89: 
          { return XQ_DECIMAL_LITERAL;
          }
        case 363: break;
        case 132: 
          { pushState(_AS_OCC); yybegin(_EMPTY_BRACES); return KW_NODE;
          }
        case 364: break;
        case 25: 
          { popState(); return OP_PLUS;
          }
        case 365: break;
        case 70: 
          { yybegin(_XML_PI_CONTENT); return XML_PI_NAME;
          }
        case 366: break;
        case 188: 
          { yybegin(_SEP); return KW_UNORDERED;
          }
        case 367: break;
        case 95: 
          { return XML_STR_ESCAPE_QUOTE;
          }
        case 368: break;
        case 153: 
          { yybegin(_ORDER_CLAUSE_MODIFIER_COLLATION); return KW_LEAST;
          }
        case 369: break;
        case 51: 
          { yypushback(yylength()); yybegin(_STEP_EXPR);
          }
        case 370: break;
        case 172: 
          { pushState(_AS_OCC); yybegin(_EMPTY_BRACES); return KW_COMMENT;
          }
        case 371: break;
        case 173: 
          { pushState(_CLOSE_BRACE); pushState(_AS_AorE); yybegin(_OPEN_BRACE); return KW_ELEMENT;
          }
        case 372: break;
        case 205: 
          { return KW_DESCENDING;
          }
        case 373: break;
        case 133: 
          { yypushback(yylength()); yybegin(_QUANT_EXPR);
          }
        case 374: break;
        case 137: 
          { pushState(_TYPESWITCH_EXPR_CASE2); pushState(_TYPESWITCH_EXPR_RETURN); yybegin(_TYPESWITCH_EXPR_CASE_); return KW_CASE;
          }
        case 375: break;
        case 143: 
          { yybegin(_DECLARE_DEFAULT_ORDER_EMPTY); return KW_EMPTY;
          }
        case 376: break;
        case 207: 
          { yybegin(_PRESERVE_OR_STRIP); return KW_CONSTRUCTION;
          }
        case 377: break;
        case 13: 
          { yypushback(yylength()); pushState(); yybegin(_XML_STR_COMMON_CONTENT);
          }
        case 378: break;
        case 121: 
          { pushState(_FLWOR_HEAD); yypushback(yylength()); yybegin(_FOR_CLAUSE);
          }
        case 379: break;
        case 50: 
          { yypushback(1); pushState(_TYPESWITCH_EXPR_CASE_AS); yybegin(_VARNAME);
          }
        case 380: break;
        case 93: 
          { return XQ_STR_ESCAPE_QUOTE;
          }
        case 381: break;
        case 179: 
          { pushState(_SEP); yybegin(_URILITERAL); return KW_BASE_URI;
          }
        case 382: break;
        case 104: 
          { yybegin(_PREDICATE_LIST); return XQ_DECIMAL_LITERAL;
          }
        case 383: break;
        case 11: 
          { popState(); return BAD_CHARACTER;
          }
        case 384: break;
        case 62: 
          { pushState(_PREDICATE_LIST); yybegin(_NODE_TEST); return OP_AT;
          }
        case 385: break;
        case 92: 
          { pushState(); return XQ_COMMENT_START;
          }
        case 386: break;
        case 53: 
          { return OP_MINUS;
          }
        case 387: break;
        case 171: 
          { pushState(_AS_OCC); pushState(_AS_AorE); yybegin(_OPEN_BRACE); return KW_ELEMENT;
          }
        case 388: break;
        case 34: 
          { yybegin(_CLOSE_BRACE); return OP_QUESTION;
          }
        case 389: break;
        case 186: 
          { pushState(_PREDICATE_LIST); pushState(_NODE_TEST); yybegin(_COLONCOLON); return KW_DESCENDANT;
          }
        case 390: break;
        case 127: 
          { popState(); return XQ_STR_CHAR_REF;
          }
        case 391: break;
        case 32: 
          { yybegin(_AS_AorE_); return OP_STAR;
          }
        case 392: break;
        case 84: 
          { popState(); return OP_EQUALS;
          }
        case 393: break;
        case 85: 
          { popState(); return XQ_NCNAME;
          }
        case 394: break;
        case 197: 
          { pushState(_PREDICATE_LIST); pushState(_NODE_TEST); yybegin(_COLONCOLON); return KW_ATTRIBUTE;
          }
        case 395: break;
        case 184: 
          { yybegin(_SEP); return KW_PRESERVE;
          }
        case 396: break;
        case 155: 
          { yybegin(_MODULE); return KW_MODULE;
          }
        case 397: break;
        case 204: 
          { yybegin(_TYPESWITCH_EXPR_); return KW_TYPESWITCH;
          }
        case 398: break;
        case 100: 
          { yypushback(yylength()); yybegin(_IF_EXPR);
          }
        case 399: break;
        case 141: 
          { popState(); return XML_STR_ENT_REF;
          }
        case 400: break;
        case 2: 
          { return WHITE_SPACE;
          }
        case 401: break;
        case 69: 
          { yypushback(1); yybegin(_ORDER_CLAUSE_MODIFIER_COLLATION);
          }
        case 402: break;
        case 16: 
          { yybegin(_DECLARE_COPYNS__); return OP_COMMA;
          }
        case 403: break;
        case 159: 
          { yybegin(_IMPORT_SCHEMA); return KW_SCHEMA;
          }
        case 404: break;
        case 26: 
          { popState(); return OP_STAR;
          }
        case 405: break;
        case 38: 
          { pushState(_CLOSE_CURLY); pushState(_EXPR_LIST); yybegin(_EXPR_SINGLE); return OP_LCURLY;
          }
        case 406: break;
        case 8: 
          { return XQ_STR_CHAR;
          }
        case 407: break;
        case 44: 
          { pushState(_QUANT_EXPR_LIST); pushState(_QUANT_EXPR_IN); yybegin(_PARAM); return OP_COMMA;
          }
        case 408: break;
        case 61: 
          { pushState(_PREDICATE_LIST); yybegin(_EXPR_LIST_OR_RBRACE); return OP_LBRACE;
          }
        case 409: break;
        case 6: 
          { return BAD_CHARACTER;
          }
        case 410: break;
        case 52: 
          { return OP_PLUS;
          }
        case 411: break;
        case 176: 
          { pushState(_SEP); yybegin(_STRINGLITERAL); return KW_ENCODING;
          }
        case 412: break;
        case 59: 
          { pushState(_PREDICATE_LIST); yypushback(1); yybegin(_VARNAME);
          }
        case 413: break;
        case 169: 
          { yybegin(_IMPORT_SCHEMA_DEFAULT); return KW_DEFAULT;
          }
        case 414: break;
        case 160: 
          { yybegin(_EXPR_SINGLE); return KW_RETURN;
          }
        case 415: break;
        case 10: 
          { popState(); return XQ_STR_END;
          }
        case 416: break;
        case 20: 
          { yypushback(yylength()); popState();
          }
        case 417: break;
        case 122: 
          { yybegin(_VALIDATE_EXPR_); return KW_LAX;
          }
        case 418: break;
        case 114: 
          { popState(); return OP_COLONCOLON;
          }
        case 419: break;
        case 151: 
          { yybegin(_ORDER_CLAUSE_BY); return KW_ORDER;
          }
        case 420: break;
        case 22: 
          { yypushback(1); pushState(_AS); yybegin(_VARNAME);
          }
        case 421: break;
        case 123: 
          { yybegin(_PREDICATE_LIST); return XQ_DOUBLE_LITERAL;
          }
        case 422: break;
        case 23: 
          { yypushback(yylength()); pushState(_AS_OCC); yybegin(_QNAME);
          }
        case 423: break;
        case 45: 
          { pushState(_TYPESWITCH_EXPR__); pushState(_EXPR_LIST); yybegin(_EXPR_SINGLE); return OP_LBRACE;
          }
        case 424: break;
        case 136: 
          { pushState(_QUANT_EXPR_IN); yybegin(_PARAM); return KW_SOME;
          }
        case 425: break;
        case 131: 
          { yybegin(_EMPTY_BRACES); return KW_VOID;
          }
        case 426: break;
        case 17: 
          { yybegin(STR_START_QUOTE); return XQ_STR_START;
          }
        case 427: break;
        case 63: 
          { yypushback(yylength()); yybegin(_WILDCARD_QNAME);
          }
        case 428: break;
        case 154: 
          { yybegin(_XQUERY); return KW_XQUERY;
          }
        case 429: break;
        case 192: 
          { pushState(_SEP); yybegin(_URILITERAL); return KW_NAMESPACE;
          }
        case 430: break;
        case 109: 
          { yybegin(_EXPR_SINGLE); return KW_IN;
          }
        case 431: break;
        case 55: 
          { 
          }
        case 432: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
