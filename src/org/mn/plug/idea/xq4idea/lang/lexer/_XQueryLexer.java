/* The following code was generated by JFlex 1.4.3 on 10/04/11 19:45 */

package org.mn.plug.idea.xq4idea.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

// this lexer follows the principles set out in http://www.w3.org/TR/xquery-xpath-parsing/
/**
 * Generated lexer
 */
@SuppressWarnings({"UnusedDeclaration", "UnusedAssignment", "FieldCanBeLocal", "AccessStaticViaInstance", "JavaDoc", "ConstantConditions"})

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 10/04/11 19:45 from the specification file
 * <tt>C:/Users/Matt/IdeaProjects/ideaPlugins/xq4idea/source/xq4idea/src/org/mn/plug/idea/xq4idea/lang/lexer/_XQueryLexer.flex</tt>
 */
class _XQueryLexer extends AbstractLexer implements FlexLexer, XQueryTokenTypes {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int _WILDCARD_QNAME = 258;
  public static final int _IF_EXPR_THEN = 98;
  public static final int _IF_EXPR__ = 96;
  public static final int _DECLARE_DEFAULT = 26;
  public static final int _FOR_CLAUSE_VAR_POS = 194;
  public static final int _AS = 60;
  public static final int _AS_SELEM = 80;
  public static final int _PATH_EXPR = 164;
  public static final int _CLOSE_BRACE = 230;
  public static final int _XQUERY_VERSION = 14;
  public static final int _IMPORT_SCHEMA = 38;
  public static final int _WHERE_CLAUSE = 206;
  public static final int _AS_AorE = 74;
  public static final int _EXPR_LIST = 84;
  public static final int _OPEN_CURLY = 232;
  public static final int _VALIDATE_EXPR__ = 162;
  public static final int _ADD_EXPR = 136;
  public static final int _ATLIST = 54;
  public static final int NAMESPACEDECL = 6;
  public static final int _DECLARE_VARIABLE = 34;
  public static final int _TYPESWITCH_EXPR_RETURN = 128;
  public static final int _FLWOR_BODY3 = 186;
  public static final int _FLWOR_BODY2 = 184;
  public static final int _VALIDATE_EXPR_X = 158;
  public static final int _FLWOR_BODY1 = 182;
  public static final int _TYPESWITCH_EXPR = 110;
  public static final int _FOR_CLAUSE = 188;
  public static final int _INSTANCEOF_EXPR = 152;
  public static final int _FOR_CLAUSE_VAR_IN = 198;
  public static final int _STEP_EXPR = 174;
  public static final int _AS_SATTR = 72;
  public static final int _LET_CLAUSE_VAR = 204;
  public static final int _MULT_EXPR = 138;
  public static final int _EMPTY_BRACES = 224;
  public static final int _AS_AorE_ = 76;
  public static final int _URILITERAL = 48;
  public static final int _DECLARE_DEFAULT_NAMESPACE = 32;
  public static final int _VALIDATE_EXPR_ = 160;
  public static final int _SEP = 240;
  public static final int _OPEN_SQUARE = 236;
  public static final int _IF_EXPR_ELSE = 100;
  public static final int _VALUE_EXPR = 154;
  public static final int _FOR_CLAUSE_VAR_POS_ = 196;
  public static final int _QUANT_EXPR_LIST = 104;
  public static final int _AS_DN = 66;
  public static final int _AS_OCC = 64;
  public static final int _COLONCOLON = 248;
  public static final int _OPEN_BRACE = 228;
  public static final int STR_START_APOS = 10;
  public static final int _ORDER_CLAUSE_LIST = 212;
  public static final int _AND_EXPR = 132;
  public static final int _FLWOR_HEAD = 180;
  public static final int _AS_PI = 68;
  public static final int _TYPESWITCH_EXPR_ = 112;
  public static final int _IMPORT_MODULE = 44;
  public static final int _IMPORT_SCHEMA_DEFAULT_ELEMENT = 42;
  public static final int _QUANT_EXPR_SATISFIES = 108;
  public static final int _TYPESWITCH_EXPR_DEFAULT_ = 118;
  public static final int STR_START_QUOTE = 8;
  public static final int _TYPESWITCH_EXPR_CASE_AS = 126;
  public static final int _STABLE_ORDER_CLAUSE = 222;
  public static final int _QUANT_EXPR = 102;
  public static final int _AS_ = 62;
  public static final int _CLOSE_SQUARE = 238;
  public static final int _DECLARE_COPYNS_ = 22;
  public static final int DECLAREORDERING = 4;
  public static final int _ORDER_CLAUSE_MODIFIER_COLLATION = 220;
  public static final int _FOR_CLAUSE_ = 190;
  public static final int _OPT_EXPR_LIST_IN_BRACE = 88;
  public static final int _TYPESWITCH_EXPR__ = 114;
  public static final int _DECLARE_DEFAULT_ORDER_EMPTY = 30;
  public static final int _ORDER_CLAUSE = 208;
  public static final int _QNAME_LOCAL = 256;
  public static final int _WILDCARD_QNAME_LOCAL = 262;
  public static final int _LET_CLAUSE_ = 202;
  public static final int _INTERSECT_EXPR = 142;
  public static final int _STRINGLITERAL = 50;
  public static final int _QNAME_ = 254;
  public static final int _NODE_TEST = 176;
  public static final int _MODULE = 16;
  public static final int _AS_AorE__ = 78;
  public static final int _DECLARE_DEFAULT_ORDER = 28;
  public static final int _DECLARE = 18;
  public static final int _PREDICATE_LIST = 178;
  public static final int YYINITIAL = 0;
  public static final int _EMPTY_BRACES_ = 226;
  public static final int _RANGE_EXPR = 134;
  public static final int _COLON = 246;
  public static final int _EXPR_LIST_OR_RBRACE = 90;
  public static final int _EXPR_SINGLE = 82;
  public static final int _STAR = 244;
  public static final int _VALIDATE_EXPR = 156;
  public static final int _ATLIST_ = 56;
  public static final int _LET_CLAUSE = 200;
  public static final int _QNAME = 252;
  public static final int _ORDER_CLAUSE_MODIFIER = 214;
  public static final int _PARENTHESIZED_EXPR = 170;
  public static final int _TYPESWITCH_EXPR_DEFAULT = 116;
  public static final int _IMPORT_SCHEMA_DEFAULT = 40;
  public static final int _TYPESWITCH_EXPR_CASE = 120;
  public static final int _NCNAME = 250;
  public static final int _TYPESWITCH_EXPR_CASE_ = 124;
  public static final int _AS_ATTR = 70;
  public static final int _FORWARD_STEP = 172;
  public static final int _IMPORT = 36;
  public static final int _ORDER_CLAUSE_MODIFIER_EMPTY = 216;
  public static final int _XQUERY = 12;
  public static final int _PRESERVE_OR_STRIP = 46;
  public static final int _ORDER_CLAUSE_BY = 210;
  public static final int _OR_EXPR = 130;
  public static final int _PRIMARY_EXPR = 168;
  public static final int _CASTABLE_EXPR = 148;
  public static final int _VARNAME = 242;
  public static final int _TREAT_EXPR = 146;
  public static final int _UNION_EXPR = 140;
  public static final int _CLOSE_CURLY = 234;
  public static final int _ORDER_CLAUSE_MODIFIER_EMPTY_ = 218;
  public static final int _QUANT_EXPR_IN = 106;
  public static final int _EXPR_LIST_IN_CURLY = 86;
  public static final int EXPR_COMMENT = 2;
  public static final int _INSTANCE_OF_EXPR = 144;
  public static final int _NAMESPACEDECL_ = 52;
  public static final int _PARAM = 58;
  public static final int _IF_EXPR_ = 94;
  public static final int _FOR_CLAUSE_VAR = 192;
  public static final int _IF_EXPR = 92;
  public static final int _DECLARE_COPYNS = 20;
  public static final int _DECLARE_COPYNS__ = 24;
  public static final int _CAST_EXPR = 150;
  public static final int _TYPESWITCH_EXPR_CASE2 = 122;
  public static final int _FILTER_EXPR = 166;
  public static final int _WILDCARD_QNAME_ = 260;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 
    24, 24, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 30, 
    31, 31, 32, 32, 33, 33, 34, 34, 34, 34, 35, 35, 36, 36, 37, 37, 
    34, 34, 38, 38, 39, 39, 40, 40, 41, 41, 42, 42, 43, 43, 44, 44, 
    45, 45, 46, 46, 47, 47, 48, 48, 49, 49, 50, 50, 51, 51, 52, 52, 
    53, 53, 54, 54, 55, 55, 56, 56, 57, 57, 58, 58, 59, 59, 60, 60, 
    61, 61, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 
    34, 34, 34, 34, 34, 34, 34, 34, 62, 62, 34, 34, 34, 34, 63, 63, 
    40, 40, 34, 34, 34, 34, 64, 64, 34, 34, 34, 34, 34, 34, 65, 65, 
    66, 66, 67, 67, 68, 68, 69, 69, 70, 70, 71, 71, 72, 72, 73, 73, 
    34, 34, 74, 74, 34, 34, 75, 75, 76, 76, 77, 77, 78, 78, 79, 79, 
    80, 80, 81, 81, 82, 82, 83, 83, 84, 84, 85, 85, 86, 86, 87, 87, 
    88, 88, 89, 89, 90, 90, 89, 89, 91, 91, 92, 92, 34, 34, 93, 93, 
    94, 94, 95, 95, 96, 96, 97, 97, 98, 98, 99, 99, 100, 100, 101, 101, 
    102, 102, 103, 103, 104, 104, 105, 105
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\2\1\2\0\1\1\22\0\1\1\1\0\1\46\1\0\1\44"+
    "\1\0\1\0\1\47\1\52\1\50\1\14\1\5\1\42\1\12\1\3"+
    "\1\53\12\2\1\13\1\10\1\0\1\41\1\0\1\45\1\56\4\6"+
    "\1\4\1\6\24\6\1\57\1\0\1\61\1\0\1\6\1\0\1\25"+
    "\1\37\1\23\1\22\1\17\1\40\1\36\1\43\1\30\2\6\1\24"+
    "\1\26\1\35\1\27\1\31\1\15\1\20\1\34\1\32\1\16\1\33"+
    "\1\51\1\11\1\21\1\6\1\54\1\0\1\60\1\55\70\0\1\7"+
    "\10\0\27\6\1\0\37\6\1\0\72\6\2\0\13\6\2\0\10\6"+
    "\1\0\65\6\1\0\104\6\11\0\44\6\3\0\2\6\4\0\36\6"+
    "\70\0\131\6\22\0\7\6\16\0\2\7\56\0\106\7\32\0\2\7"+
    "\44\0\1\6\1\7\3\6\1\0\1\6\1\0\24\6\1\0\54\6"+
    "\1\0\7\6\3\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\22\6\15\0\14\6\1\0\102\6\1\0\14\6\1\0\44\6"+
    "\1\0\4\7\11\0\65\6\2\0\2\6\2\0\2\6\3\0\34\6"+
    "\2\0\10\6\2\0\2\6\67\0\46\6\2\0\1\6\7\0\46\6"+
    "\12\0\21\7\1\0\27\7\1\0\3\7\1\0\1\7\1\0\2\7"+
    "\1\0\1\7\13\0\33\6\5\0\3\6\56\0\32\6\5\0\1\7"+
    "\12\6\10\7\15\0\12\7\6\0\1\7\107\6\2\0\5\6\1\0"+
    "\17\6\1\0\4\6\1\0\1\6\17\7\2\6\2\7\1\0\4\7"+
    "\2\0\12\7\u0207\0\3\7\1\0\65\6\2\0\1\7\1\6\20\7"+
    "\3\0\4\7\3\0\12\6\2\7\2\0\12\7\21\0\3\7\1\0"+
    "\10\6\2\0\2\6\2\0\26\6\1\0\7\6\1\0\1\6\3\0"+
    "\4\6\2\0\1\7\1\0\7\7\2\0\2\7\2\0\3\7\11\0"+
    "\1\7\4\0\2\6\1\0\3\6\2\7\2\0\12\7\2\6\20\0"+
    "\1\7\2\0\6\6\4\0\2\6\2\0\26\6\1\0\7\6\1\0"+
    "\2\6\1\0\2\6\1\0\2\6\2\0\1\7\1\0\5\7\4\0"+
    "\2\7\2\0\3\7\13\0\4\6\1\0\1\6\7\0\12\7\2\7"+
    "\3\6\14\0\3\7\1\0\7\6\1\0\1\6\1\0\3\6\1\0"+
    "\26\6\1\0\7\6\1\0\2\6\1\0\5\6\2\0\1\7\1\6"+
    "\10\7\1\0\3\7\1\0\3\7\22\0\1\6\5\0\12\7\21\0"+
    "\3\7\1\0\10\6\2\0\2\6\2\0\26\6\1\0\7\6\1\0"+
    "\2\6\2\0\4\6\2\0\1\7\1\6\6\7\3\0\2\7\2\0"+
    "\3\7\10\0\2\7\4\0\2\6\1\0\3\6\4\0\12\7\22\0"+
    "\2\7\1\0\6\6\3\0\3\6\1\0\4\6\3\0\2\6\1\0"+
    "\1\6\1\0\2\6\3\0\2\6\3\0\3\6\3\0\10\6\1\0"+
    "\3\6\4\0\5\7\3\0\3\7\1\0\4\7\11\0\1\7\17\0"+
    "\11\7\21\0\3\7\1\0\10\6\1\0\3\6\1\0\27\6\1\0"+
    "\12\6\1\0\5\6\4\0\7\7\1\0\3\7\1\0\4\7\7\0"+
    "\2\7\11\0\2\6\4\0\12\7\22\0\2\7\1\0\10\6\1\0"+
    "\3\6\1\0\27\6\1\0\12\6\1\0\5\6\4\0\7\7\1\0"+
    "\3\7\1\0\4\7\7\0\2\7\7\0\1\6\1\0\2\6\4\0"+
    "\12\7\22\0\2\7\1\0\10\6\1\0\3\6\1\0\27\6\1\0"+
    "\20\6\4\0\6\7\2\0\3\7\1\0\4\7\11\0\1\7\10\0"+
    "\2\6\4\0\12\7\221\0\56\6\1\0\1\6\1\7\2\6\7\7"+
    "\5\0\6\6\1\7\10\7\1\0\12\7\47\0\2\6\1\0\1\6"+
    "\2\0\2\6\1\0\1\6\2\0\1\6\6\0\4\6\1\0\7\6"+
    "\1\0\3\6\1\0\1\6\1\0\1\6\2\0\2\6\1\0\2\6"+
    "\1\0\1\6\1\7\2\6\6\7\1\0\2\7\1\6\2\0\5\6"+
    "\1\0\1\7\1\0\6\7\2\0\12\7\76\0\2\7\6\0\12\7"+
    "\13\0\1\7\1\0\1\7\1\0\1\7\4\0\2\7\10\6\1\0"+
    "\41\6\7\0\24\7\1\0\6\7\4\0\6\7\1\0\1\7\1\0"+
    "\25\7\3\0\7\7\1\0\1\7\346\0\46\6\12\0\47\6\11\0"+
    "\1\6\1\0\2\6\1\0\3\6\1\0\1\6\1\0\2\6\1\0"+
    "\5\6\51\0\1\6\1\0\1\6\1\0\1\6\13\0\1\6\1\0"+
    "\1\6\1\0\1\6\3\0\2\6\3\0\1\6\5\0\3\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\3\0\2\6\3\0"+
    "\2\6\1\0\1\6\50\0\1\6\11\0\1\6\2\0\1\6\2\0"+
    "\2\6\7\0\2\6\1\0\1\6\1\0\7\6\50\0\1\6\4\0"+
    "\1\6\10\0\1\6\u0c06\0\234\6\4\0\132\6\6\0\26\6\2\0"+
    "\6\6\2\0\46\6\2\0\6\6\2\0\10\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\37\6\2\0\65\6\1\0\7\6\1\0"+
    "\1\6\3\0\3\6\1\0\7\6\3\0\4\6\2\0\6\6\4\0"+
    "\15\6\5\0\3\6\1\0\7\6\323\0\15\7\4\0\1\7\104\0"+
    "\1\6\3\0\2\6\2\0\1\6\121\0\3\6\u0e82\0\1\7\1\0"+
    "\1\6\31\0\11\6\6\7\1\0\5\7\13\0\124\6\4\0\2\7"+
    "\2\0\2\7\2\0\132\6\1\0\3\7\6\0\50\6\u1cd3\0\u51a6\6"+
    "\u0c5a\0\u2ba4\6\134\0\u0800\0\u1ffe\0\2\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\152\0\1\1\1\2\1\3\6\1\3\4\2\1\1\5"+
    "\1\6\2\7\1\1\1\10\12\1\1\11\24\1\1\12"+
    "\1\13\1\14\2\15\1\16\1\17\1\15\13\20\1\21"+
    "\1\22\1\23\1\24\2\1\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\10\34\1\35\1\36\1\35\1\37"+
    "\1\40\1\41\1\42\1\1\1\43\1\44\4\1\1\45"+
    "\3\1\1\46\1\47\1\1\1\50\1\51\1\1\1\52"+
    "\1\53\2\1\2\54\1\55\1\56\2\54\1\57\2\1"+
    "\1\60\1\61\1\62\1\63\11\61\1\64\1\65\1\66"+
    "\1\67\1\70\1\23\12\70\1\15\1\71\6\1\1\72"+
    "\1\15\2\1\1\73\3\1\1\74\4\75\3\76\2\1"+
    "\1\35\1\1\1\77\1\100\1\101\1\102\1\103\1\104"+
    "\1\105\1\1\1\106\1\107\1\110\1\111\2\107\1\1"+
    "\1\112\1\113\5\0\1\114\1\115\1\116\2\0\1\117"+
    "\1\120\27\0\1\121\11\0\1\122\1\123\1\0\12\20"+
    "\5\0\1\124\3\0\1\125\4\0\1\126\4\0\1\123"+
    "\2\0\1\127\2\0\1\130\1\0\1\131\1\132\1\0"+
    "\12\132\2\0\12\70\4\0\1\133\1\134\3\0\1\135"+
    "\7\0\1\136\1\137\1\140\1\141\1\142\50\0\13\20"+
    "\2\0\1\30\1\0\1\143\2\0\1\144\12\0\1\145"+
    "\1\0\1\146\1\0\13\132\14\70\3\0\1\147\1\150"+
    "\60\0\4\20\1\151\1\20\1\152\1\153\1\20\1\154"+
    "\4\0\1\155\1\156\1\157\1\0\1\160\3\0\1\161"+
    "\3\0\10\132\1\162\1\132\4\70\1\151\1\70\1\152"+
    "\1\153\1\70\1\154\44\0\1\163\1\0\1\164\1\165"+
    "\12\0\1\166\6\20\3\0\1\167\6\0\2\132\1\170"+
    "\6\132\6\70\1\171\1\0\1\172\1\173\1\174\2\0"+
    "\1\175\1\176\3\0\1\177\1\0\1\200\1\201\11\0"+
    "\1\202\16\0\1\203\1\204\5\0\6\20\6\0\1\205"+
    "\1\0\1\206\7\132\6\70\4\0\1\207\1\210\1\0"+
    "\1\211\1\212\2\0\1\213\11\0\1\214\1\0\1\215"+
    "\5\0\1\216\1\0\1\217\2\0\1\220\1\20\1\221"+
    "\3\20\1\222\4\0\1\223\1\0\4\132\1\224\2\132"+
    "\1\220\1\70\1\221\3\70\5\0\1\225\3\0\1\226"+
    "\1\227\1\0\1\230\1\0\1\231\3\0\1\232\1\233"+
    "\1\0\1\234\2\0\1\235\5\20\4\0\1\236\3\132"+
    "\1\237\2\132\5\70\2\0\1\240\1\0\1\241\1\242"+
    "\2\0\1\243\3\0\1\244\1\245\1\246\1\247\1\20"+
    "\1\250\3\20\2\0\1\251\1\0\1\252\1\132\1\253"+
    "\2\132\1\254\1\70\1\250\3\70\1\0\1\255\1\256"+
    "\4\0\1\257\4\20\1\0\1\260\1\261\1\132\1\162"+
    "\1\132\4\70\1\262\3\0\1\263\4\20\1\0\3\132"+
    "\4\70\1\0\1\264\1\0\4\20\1\0\3\132\4\70"+
    "\2\0\1\265\3\20\1\0\3\132\1\265\3\70\1\0"+
    "\1\266\1\20\1\267\1\20\1\270\3\132\1\70\1\267"+
    "\1\70\1\271\2\20\3\132\2\70\1\20\1\272\1\273"+
    "\2\132\1\70\1\272\1\20\1\132\1\131\1\70\1\20"+
    "\1\70\1\20\1\70\1\20\1\70\1\20\1\70\2\274";

  private static int [] zzUnpackAction() {
    int [] result = new int[1043];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\372\0\u012c\0\u015e"+
    "\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258\0\u028a\0\u02bc\0\u02ee"+
    "\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8\0\u041a\0\u044c\0\u047e"+
    "\0\u04b0\0\u04e2\0\u0514\0\u0546\0\u0578\0\u05aa\0\u05dc\0\u060e"+
    "\0\u0640\0\u0672\0\u06a4\0\u06d6\0\u0708\0\u073a\0\u076c\0\u079e"+
    "\0\u07d0\0\u0802\0\u0834\0\u0866\0\u0898\0\u08ca\0\u08fc\0\u092e"+
    "\0\u0960\0\u0992\0\u09c4\0\u09f6\0\u0a28\0\u0a5a\0\u0a8c\0\u0abe"+
    "\0\u0af0\0\u0b22\0\u0b54\0\u0b86\0\u0bb8\0\u0bea\0\u0c1c\0\u0c4e"+
    "\0\u0c80\0\u0cb2\0\u0ce4\0\u0d16\0\u0d48\0\u0d7a\0\u0dac\0\u0dde"+
    "\0\u0e10\0\u0e42\0\u0e74\0\u0ea6\0\u0ed8\0\u0f0a\0\u0f3c\0\u0f6e"+
    "\0\u0fa0\0\u0fd2\0\u1004\0\u1036\0\u1068\0\u109a\0\u10cc\0\u10fe"+
    "\0\u1130\0\u1162\0\u1194\0\u11c6\0\u11f8\0\u122a\0\u125c\0\u128e"+
    "\0\u12c0\0\u12f2\0\u1324\0\u1356\0\u1388\0\u13ba\0\u13ec\0\u141e"+
    "\0\u1450\0\u1482\0\u14b4\0\u14e6\0\u1518\0\u154a\0\u157c\0\u15ae"+
    "\0\u15e0\0\u1612\0\u1644\0\u14b4\0\u1676\0\u16a8\0\u16da\0\u170c"+
    "\0\u173e\0\u14b4\0\u1770\0\u17a2\0\u17d4\0\u14b4\0\u1806\0\u1838"+
    "\0\u186a\0\u189c\0\u18ce\0\u1900\0\u1932\0\u1964\0\u1996\0\u19c8"+
    "\0\u14b4\0\u19fa\0\u1a2c\0\u1a5e\0\u1a90\0\u1ac2\0\u1af4\0\u1b26"+
    "\0\u1b58\0\u1b8a\0\u1bbc\0\u1bee\0\u1c20\0\u1c52\0\u1c84\0\u1cb6"+
    "\0\u1ce8\0\u1d1a\0\u1d4c\0\u1d7e\0\u1db0\0\u14b4\0\u14b4\0\u14b4"+
    "\0\u1de2\0\u1e14\0\u1de2\0\u14b4\0\u1e46\0\u1e78\0\u1eaa\0\u1edc"+
    "\0\u1f0e\0\u1f40\0\u1f72\0\u1fa4\0\u1fd6\0\u2008\0\u203a\0\u206c"+
    "\0\u14b4\0\u14b4\0\u14b4\0\u14b4\0\u209e\0\u20d0\0\u14b4\0\u2102"+
    "\0\u14b4\0\u2134\0\u14b4\0\u14b4\0\u14b4\0\u14b4\0\u2166\0\u2198"+
    "\0\u21ca\0\u21fc\0\u222e\0\u2260\0\u1644\0\u14b4\0\u14b4\0\u1644"+
    "\0\u14b4\0\u1644\0\u2292\0\u14b4\0\u22c4\0\u1644\0\u14b4\0\u22f6"+
    "\0\u2328\0\u235a\0\u238c\0\u14b4\0\u23be\0\u23f0\0\u2422\0\u1644"+
    "\0\u14b4\0\u2454\0\u2486\0\u14b4\0\u24b8\0\u24ea\0\u14b4\0\u251c"+
    "\0\u254e\0\u14b4\0\u14e6\0\u14b4\0\u14b4\0\u2580\0\u1644\0\u25b2"+
    "\0\u25e4\0\u2616\0\u14b4\0\u14b4\0\u2648\0\u267a\0\u26ac\0\u26de"+
    "\0\u2710\0\u2742\0\u2774\0\u27a6\0\u27d8\0\u280a\0\u283c\0\u14b4"+
    "\0\u14b4\0\u1644\0\u14b4\0\u286e\0\u28a0\0\u28d2\0\u2904\0\u2936"+
    "\0\u2968\0\u299a\0\u29cc\0\u29fe\0\u2a30\0\u2a62\0\u2a94\0\u2ac6"+
    "\0\u14b4\0\u2198\0\u2af8\0\u2b2a\0\u2260\0\u2b5c\0\u2b8e\0\u1de2"+
    "\0\u2bc0\0\u2bf2\0\u2c24\0\u1de2\0\u2c56\0\u2c88\0\u2cba\0\u14b4"+
    "\0\u14b4\0\u2cec\0\u2d1e\0\u1644\0\u14b4\0\u2d50\0\u1644\0\u2d82"+
    "\0\u2db4\0\u2de6\0\u2e18\0\u1644\0\u1644\0\u14b4\0\u14b4\0\u14b4"+
    "\0\u14b4\0\u14b4\0\u2e4a\0\u2e7c\0\u2eae\0\u14b4\0\u14b4\0\u2ee0"+
    "\0\u2f12\0\u2f44\0\u14b4\0\u2f76\0\u2fa8\0\u2fda\0\u300c\0\u303e"+
    "\0\u3070\0\u14b4\0\u14b4\0\u14b4\0\u30a2\0\u30d4\0\u14b4\0\u14b4"+
    "\0\u3106\0\u3138\0\u316a\0\u319c\0\u31ce\0\u3200\0\u3232\0\u3264"+
    "\0\u3296\0\u32c8\0\u32fa\0\u332c\0\u335e\0\u3390\0\u33c2\0\u33f4"+
    "\0\u3426\0\u3458\0\u348a\0\u34bc\0\u34ee\0\u3520\0\u3552\0\u14b4"+
    "\0\u3584\0\u35b6\0\u35e8\0\u361a\0\u364c\0\u367e\0\u36b0\0\u36e2"+
    "\0\u3714\0\u1de2\0\u1de2\0\u3746\0\u3778\0\u37aa\0\u37dc\0\u380e"+
    "\0\u3840\0\u3872\0\u38a4\0\u38d6\0\u3908\0\u393a\0\u396c\0\u399e"+
    "\0\u39d0\0\u3a02\0\u3a34\0\u14b4\0\u3a66\0\u3a98\0\u3aca\0\u14b4"+
    "\0\u3afc\0\u3b2e\0\u3b60\0\u3b92\0\u14b4\0\u3bc4\0\u3bf6\0\u3c28"+
    "\0\u3c5a\0\u14b4\0\u3c8c\0\u3cbe\0\u14b4\0\u3cf0\0\u3d22\0\u3d54"+
    "\0\u3d86\0\u14b4\0\u26ac\0\u3db8\0\u3dea\0\u3e1c\0\u3e4e\0\u3e80"+
    "\0\u3eb2\0\u3ee4\0\u3f16\0\u3f48\0\u3f7a\0\u3fac\0\u3fde\0\u4010"+
    "\0\u4042\0\u4074\0\u40a6\0\u40d8\0\u410a\0\u413c\0\u416e\0\u41a0"+
    "\0\u41d2\0\u4204\0\u4236\0\u4268\0\u429a\0\u42cc\0\u1de2\0\u14b4"+
    "\0\u42fe\0\u4330\0\u4362\0\u14b4\0\u4394\0\u43c6\0\u43f8\0\u442a"+
    "\0\u445c\0\u448e\0\u44c0\0\u14b4\0\u14b4\0\u14b4\0\u14b4\0\u44f2"+
    "\0\u44f2\0\u4524\0\u4556\0\u4588\0\u45ba\0\u45ec\0\u461e\0\u4650"+
    "\0\u4682\0\u46b4\0\u46e6\0\u4718\0\u474a\0\u477c\0\u47ae\0\u47e0"+
    "\0\u4812\0\u4844\0\u4876\0\u48a8\0\u48da\0\u490c\0\u493e\0\u4970"+
    "\0\u49a2\0\u49d4\0\u4a06\0\u4a38\0\u4a6a\0\u4a9c\0\u4ace\0\u4b00"+
    "\0\u4b32\0\u4b64\0\u4b96\0\u4bc8\0\u4bfa\0\u4c2c\0\u4c5e\0\u4c90"+
    "\0\u4cc2\0\u4cf4\0\u4d26\0\u4d58\0\u4d8a\0\u4dbc\0\u4dee\0\u4e20"+
    "\0\u4e52\0\u4e84\0\u4eb6\0\u4ee8\0\u4f1a\0\u4f4c\0\u4f7e\0\u14b4"+
    "\0\u4fb0\0\u4fe2\0\u14b4\0\u5014\0\u5046\0\u5078\0\u50aa\0\u50dc"+
    "\0\u510e\0\u5140\0\u5172\0\u51a4\0\u51d6\0\u14b4\0\u5208\0\u523a"+
    "\0\u523a\0\u526c\0\u529e\0\u52d0\0\u5302\0\u5334\0\u5366\0\u5398"+
    "\0\u53ca\0\u53fc\0\u542e\0\u5460\0\u5492\0\u14b4\0\u54c4\0\u54f6"+
    "\0\u5528\0\u555a\0\u558c\0\u55be\0\u55f0\0\u5622\0\u5654\0\u5686"+
    "\0\u56b8\0\u56ea\0\u571c\0\u14b4\0\u14b4\0\u574e\0\u5780\0\u57b2"+
    "\0\u57e4\0\u5816\0\u5848\0\u587a\0\u58ac\0\u58de\0\u5910\0\u5942"+
    "\0\u5974\0\u59a6\0\u59d8\0\u5a0a\0\u5a3c\0\u5a6e\0\u5aa0\0\u5ad2"+
    "\0\u5b04\0\u5b36\0\u5b68\0\u5b9a\0\u5bcc\0\u5bfe\0\u5c30\0\u5c62"+
    "\0\u5c94\0\u5cc6\0\u5cf8\0\u5d2a\0\u5d5c\0\u5d8e\0\u5dc0\0\u5df2"+
    "\0\u5e24\0\u5e56\0\u5e88\0\u5eba\0\u5eec\0\u5f1e\0\u5f50\0\u5f82"+
    "\0\u5fb4\0\u5fe6\0\u6018\0\u604a\0\u607c\0\u60ae\0\u60e0\0\u6112"+
    "\0\u6144\0\u1e78\0\u6176\0\u1e78\0\u1e78\0\u61a8\0\u1e78\0\u61da"+
    "\0\u620c\0\u623e\0\u6270\0\u14b4\0\u14b4\0\u14b4\0\u62a2\0\u14b4"+
    "\0\u62d4\0\u6306\0\u6338\0\u14b4\0\u636a\0\u639c\0\u63ce\0\u6400"+
    "\0\u6432\0\u6464\0\u6496\0\u64c8\0\u64fa\0\u652c\0\u655e\0\u26ac"+
    "\0\u6590\0\u65c2\0\u65f4\0\u6626\0\u6658\0\u286e\0\u668a\0\u286e"+
    "\0\u286e\0\u66bc\0\u286e\0\u66ee\0\u6720\0\u6752\0\u6784\0\u67b6"+
    "\0\u67e8\0\u681a\0\u684c\0\u687e\0\u68b0\0\u68e2\0\u6914\0\u6946"+
    "\0\u6978\0\u69aa\0\u69dc\0\u6a0e\0\u6a40\0\u6a72\0\u6aa4\0\u6ad6"+
    "\0\u6b08\0\u6b3a\0\u6b6c\0\u6b9e\0\u6bd0\0\u6c02\0\u6c34\0\u6c66"+
    "\0\u6c98\0\u6cca\0\u6cfc\0\u6d2e\0\u6d60\0\u6d92\0\u6dc4\0\u14b4"+
    "\0\u6df6\0\u14b4\0\u14b4\0\u6e28\0\u6e5a\0\u6e8c\0\u6ebe\0\u6ef0"+
    "\0\u6f22\0\u6f54\0\u6f86\0\u6fb8\0\u6fea\0\u14b4\0\u701c\0\u704e"+
    "\0\u7080\0\u70b2\0\u70e4\0\u7116\0\u7148\0\u717a\0\u71ac\0\u14b4"+
    "\0\u71de\0\u7210\0\u7242\0\u7274\0\u72a6\0\u72d8\0\u730a\0\u733c"+
    "\0\u26ac\0\u736e\0\u73a0\0\u73d2\0\u7404\0\u7436\0\u7468\0\u749a"+
    "\0\u74cc\0\u74fe\0\u7530\0\u7562\0\u7594\0\u14b4\0\u75c6\0\u14b4"+
    "\0\u14b4\0\u14b4\0\u75f8\0\u762a\0\u14b4\0\u14b4\0\u765c\0\u768e"+
    "\0\u76c0\0\u14b4\0\u76f2\0\u14b4\0\u14b4\0\u7724\0\u7756\0\u7788"+
    "\0\u77ba\0\u77ec\0\u781e\0\u7850\0\u7882\0\u78b4\0\u14b4\0\u78e6"+
    "\0\u7918\0\u794a\0\u797c\0\u79ae\0\u79e0\0\u7a12\0\u7a44\0\u7a76"+
    "\0\u7aa8\0\u7ada\0\u7b0c\0\u7b3e\0\u7b70\0\u14b4\0\u14b4\0\u7ba2"+
    "\0\u7bd4\0\u7c06\0\u7c38\0\u7c6a\0\u7c9c\0\u7cce\0\u7d00\0\u7d32"+
    "\0\u7d64\0\u7d96\0\u7dc8\0\u7dfa\0\u7e2c\0\u7e5e\0\u7e90\0\u7ec2"+
    "\0\u14b4\0\u7ef4\0\u14b4\0\u7f26\0\u7f58\0\u7f8a\0\u7fbc\0\u7fee"+
    "\0\u8020\0\u8052\0\u8084\0\u80b6\0\u80e8\0\u811a\0\u814c\0\u817e"+
    "\0\u81b0\0\u81e2\0\u8214\0\u8246\0\u14b4\0\u14b4\0\u8278\0\u14b4"+
    "\0\u14b4\0\u82aa\0\u82dc\0\u14b4\0\u830e\0\u8340\0\u8372\0\u83a4"+
    "\0\u83d6\0\u8408\0\u843a\0\u846c\0\u849e\0\u14b4\0\u84d0\0\u14b4"+
    "\0\u8502\0\u8534\0\u8566\0\u8598\0\u85ca\0\u14b4\0\u85fc\0\u14b4"+
    "\0\u862e\0\u8660\0\u1e78\0\u8692\0\u1e78\0\u86c4\0\u86f6\0\u8728"+
    "\0\u14b4\0\u875a\0\u878c\0\u87be\0\u87f0\0\u14b4\0\u8822\0\u8854"+
    "\0\u8886\0\u88b8\0\u88ea\0\u26ac\0\u891c\0\u894e\0\u286e\0\u8980"+
    "\0\u286e\0\u89b2\0\u89e4\0\u8a16\0\u8a48\0\u8a7a\0\u8aac\0\u8ade"+
    "\0\u8b10\0\u14b4\0\u8b42\0\u8b74\0\u8ba6\0\u14b4\0\u14b4\0\u8bd8"+
    "\0\u14b4\0\u8c0a\0\u14b4\0\u8c3c\0\u8c6e\0\u8ca0\0\u14b4\0\u14b4"+
    "\0\u8cd2\0\u14b4\0\u8d04\0\u8d36\0\u14b4\0\u8d68\0\u8d9a\0\u8dcc"+
    "\0\u8dfe\0\u8e30\0\u8e62\0\u8e94\0\u8ec6\0\u8ef8\0\u14b4\0\u8f2a"+
    "\0\u8f5c\0\u8f8e\0\u8fc0\0\u8ff2\0\u9024\0\u9056\0\u9088\0\u90ba"+
    "\0\u90ec\0\u911e\0\u9150\0\u9182\0\u14b4\0\u91b4\0\u14b4\0\u14b4"+
    "\0\u91e6\0\u9218\0\u14b4\0\u924a\0\u927c\0\u92ae\0\u14b4\0\u14b4"+
    "\0\u14b4\0\u14b4\0\u92e0\0\u1e78\0\u9312\0\u9344\0\u9376\0\u93a8"+
    "\0\u93da\0\u14b4\0\u940c\0\u26ac\0\u943e\0\u26ac\0\u9470\0\u94a2"+
    "\0\u94d4\0\u9506\0\u286e\0\u9538\0\u956a\0\u959c\0\u95ce\0\u14b4"+
    "\0\u14b4\0\u9600\0\u9632\0\u9664\0\u9696\0\u14b4\0\u96c8\0\u96fa"+
    "\0\u972c\0\u975e\0\u9790\0\u14b4\0\u14b4\0\u97c2\0\u97f4\0\u9826"+
    "\0\u9858\0\u988a\0\u98bc\0\u98ee\0\u14b4\0\u9920\0\u9952\0\u9984"+
    "\0\u14b4\0\u99b6\0\u99e8\0\u9a1a\0\u9a4c\0\u9a7e\0\u9ab0\0\u9ae2"+
    "\0\u9b14\0\u9b46\0\u9b78\0\u9baa\0\u9bdc\0\u9c0e\0\u14b4\0\u9c40"+
    "\0\u9c72\0\u9ca4\0\u9cd6\0\u9d08\0\u9d3a\0\u9d6c\0\u9d9e\0\u9dd0"+
    "\0\u9e02\0\u9e34\0\u9e66\0\u9e98\0\u9eca\0\u9efc\0\u1e78\0\u9f2e"+
    "\0\u9f60\0\u9f92\0\u9fc4\0\u9ff6\0\ua028\0\ua05a\0\u286e\0\ua08c"+
    "\0\ua0be\0\ua0f0\0\ua122\0\u14b4\0\ua154\0\u1e78\0\ua186\0\u14b4"+
    "\0\ua1b8\0\ua1ea\0\ua21c\0\ua24e\0\u286e\0\ua280\0\u14b4\0\ua2b2"+
    "\0\ua2e4\0\ua316\0\ua348\0\ua37a\0\ua3ac\0\ua3de\0\ua410\0\u1e78"+
    "\0\u26ac\0\ua442\0\ua474\0\ua4a6\0\u286e\0\ua4d8\0\ua50a\0\u26ac"+
    "\0\ua53c\0\ua56e\0\ua5a0\0\ua5d2\0\ua604\0\ua636\0\ua668\0\ua69a"+
    "\0\ua6cc\0\u1e78\0\u286e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[1043];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\153\1\154\1\155\1\156\5\153\1\157\10\153\1\160"+
    "\3\153\1\161\1\153\1\162\21\153\1\163\7\153\13\164"+
    "\1\165\36\164\1\166\7\164\1\153\1\154\14\153\1\167"+
    "\10\153\1\170\22\153\1\163\10\153\1\154\2\153\1\171"+
    "\1\153\1\171\2\153\1\171\3\153\24\171\2\153\1\171"+
    "\5\153\1\171\1\163\7\153\46\172\1\173\62\172\1\174"+
    "\12\172\1\153\1\154\31\153\1\175\16\153\1\163\10\153"+
    "\1\154\6\153\1\176\6\153\1\177\32\153\1\163\10\153"+
    "\1\154\33\153\1\200\14\153\1\163\10\153\1\154\20\153"+
    "\1\201\1\202\3\153\1\203\3\153\1\204\1\153\1\205"+
    "\1\153\1\206\12\153\1\163\10\153\1\154\27\153\1\207"+
    "\3\153\1\210\14\153\1\163\10\153\1\154\40\153\1\211"+
    "\7\153\1\163\10\153\1\154\26\153\1\212\4\153\1\213"+
    "\14\153\1\163\10\153\1\154\15\153\1\214\3\153\1\215"+
    "\3\153\1\216\10\153\1\217\11\153\1\163\10\153\1\154"+
    "\15\153\1\220\32\153\1\163\10\153\1\154\22\153\1\221"+
    "\11\153\1\222\13\153\1\163\10\153\1\154\33\153\1\223"+
    "\14\153\1\163\10\153\1\154\11\153\1\224\3\153\1\225"+
    "\32\153\1\163\10\153\1\154\24\153\1\226\5\153\1\227"+
    "\15\153\1\163\10\153\1\154\20\153\1\230\12\153\1\231"+
    "\14\153\1\163\10\153\1\154\15\153\1\232\32\153\1\163"+
    "\10\153\1\154\33\153\1\233\14\153\1\163\10\153\1\154"+
    "\33\153\1\231\14\153\1\163\10\153\1\154\27\153\1\234"+
    "\2\153\1\235\15\153\1\163\10\153\1\154\44\153\1\236"+
    "\1\237\2\153\1\163\10\153\1\154\37\153\1\240\10\153"+
    "\1\163\7\153\1\241\1\154\23\241\1\242\35\241\1\154"+
    "\40\241\1\243\17\241\1\153\1\154\42\153\1\244\5\153"+
    "\1\163\7\153\1\241\1\154\23\241\1\245\34\241\1\153"+
    "\1\154\2\153\1\246\1\153\1\246\2\153\1\246\3\153"+
    "\2\246\1\247\2\246\1\250\1\251\1\246\1\252\2\246"+
    "\1\253\1\254\1\255\1\256\1\257\1\260\3\246\2\153"+
    "\1\246\5\153\1\246\1\163\7\153\5\261\1\262\6\261"+
    "\1\263\30\261\1\264\14\261\1\153\1\154\15\153\1\265"+
    "\14\153\1\266\13\153\1\267\1\153\1\163\10\153\1\154"+
    "\2\153\1\270\1\153\1\270\2\153\1\270\3\153\24\270"+
    "\2\153\1\270\2\153\2\271\1\267\1\270\1\163\10\153"+
    "\1\154\50\153\1\163\10\153\1\154\2\153\1\272\1\153"+
    "\1\272\2\153\1\272\2\153\1\273\24\272\2\153\1\272"+
    "\4\153\1\267\1\272\1\163\10\153\1\154\40\153\1\274"+
    "\5\153\1\267\1\153\1\163\10\153\1\154\43\153\1\275"+
    "\2\153\1\267\1\153\1\163\7\153\1\276\1\154\15\276"+
    "\1\277\4\276\1\300\3\276\1\301\1\276\1\302\1\276"+
    "\1\303\3\276\1\304\11\276\1\305\7\276\1\306\1\154"+
    "\40\306\1\307\7\306\1\310\7\306\1\153\1\154\50\153"+
    "\1\163\1\153\1\311\6\153\1\154\50\153\1\312\7\153"+
    "\1\313\1\154\46\313\1\314\11\313\1\153\1\154\26\153"+
    "\1\315\21\153\1\163\10\153\1\154\50\153\1\316\10\153"+
    "\1\154\46\153\1\317\1\153\1\163\10\153\1\154\30\153"+
    "\1\320\17\153\1\163\10\153\1\154\15\153\1\321\32\153"+
    "\1\163\10\153\1\154\15\153\1\322\14\153\1\323\15\153"+
    "\1\163\7\153\1\306\1\154\40\306\1\324\7\306\1\310"+
    "\7\306\1\153\1\154\26\153\1\325\21\153\1\163\10\153"+
    "\1\154\32\153\1\326\15\153\1\163\10\153\1\154\30\153"+
    "\1\327\17\153\1\163\10\153\1\154\50\153\1\330\10\153"+
    "\1\154\46\153\1\331\1\153\1\163\10\153\1\154\20\153"+
    "\1\332\27\153\1\163\7\153\1\333\1\154\42\333\1\334"+
    "\15\333\1\153\1\154\21\153\1\335\26\153\1\163\10\153"+
    "\1\154\20\153\1\332\1\335\26\153\1\163\7\153\1\336"+
    "\1\154\42\336\1\337\15\336\1\153\1\154\23\153\1\340"+
    "\24\153\1\163\10\153\1\154\16\153\1\341\31\153\1\163"+
    "\7\153\1\342\1\343\3\342\1\344\4\342\1\345\20\342"+
    "\1\346\16\342\1\347\1\350\6\342\1\153\1\154\22\153"+
    "\1\351\7\153\1\352\15\153\1\163\1\153\1\311\6\153"+
    "\1\154\50\153\1\163\2\153\1\353\4\153\1\354\1\154"+
    "\1\355\1\356\1\357\1\354\1\357\2\354\1\357\3\354"+
    "\1\357\1\360\3\357\1\361\1\362\1\357\1\363\1\357"+
    "\1\364\1\357\1\365\2\357\1\366\3\357\1\367\2\354"+
    "\1\357\1\370\1\354\2\371\1\354\1\357\1\372\3\354"+
    "\1\373\3\354\1\153\1\154\2\153\1\374\1\153\1\374"+
    "\2\153\1\374\2\153\1\375\2\374\1\376\2\374\1\377"+
    "\1\u0100\1\374\1\u0101\2\374\1\u0102\1\u0103\1\u0104\1\u0105"+
    "\1\u0106\1\u0107\3\374\2\153\1\374\5\153\1\374\1\163"+
    "\7\153\1\u0108\1\154\55\u0108\1\u0109\2\u0108\1\153\1\154"+
    "\16\153\1\341\3\153\1\u010a\2\153\1\u010b\4\153\1\u010c"+
    "\3\153\1\u010d\10\153\1\u010e\1\163\10\153\1\154\47\153"+
    "\1\u010e\1\163\10\153\1\154\25\153\1\u010b\4\153\1\u010c"+
    "\14\153\1\u010e\1\163\10\153\1\154\16\153\1\341\6\153"+
    "\1\u010b\4\153\1\u010c\14\153\1\u010e\1\163\10\153\1\154"+
    "\36\153\1\u010f\11\153\1\163\7\153\1\241\1\154\40\241"+
    "\1\u0110\20\241\1\154\23\241\1\u0111\34\241\1\153\1\154"+
    "\26\153\1\u0112\21\153\1\163\10\153\1\154\22\153\1\u0113"+
    "\25\153\1\163\7\153\1\241\1\154\40\241\1\u0114\17\241"+
    "\1\153\1\154\11\153\1\224\36\153\1\163\10\153\1\154"+
    "\47\153\1\u0115\1\163\10\153\1\154\25\153\1\u0116\22\153"+
    "\1\163\10\153\1\154\35\153\1\u0117\12\153\1\163\7\153"+
    "\1\306\1\154\40\306\1\u0118\7\306\1\310\7\306\1\u0119"+
    "\1\154\20\u0119\1\u011a\2\u0119\1\u011b\24\u0119\1\u011c\7\u0119"+
    "\1\u011d\1\154\15\u011d\1\u011e\32\u011d\1\u011f\7\u011d\1\153"+
    "\1\154\22\153\1\u0120\11\153\1\u0121\13\153\1\163\7\153"+
    "\1\306\1\154\21\306\1\u0122\26\306\1\310\7\306\1\153"+
    "\1\154\32\153\1\u0123\15\153\1\163\10\153\1\154\50\153"+
    "\1\u0124\10\153\1\154\46\153\1\314\1\153\1\163\10\153"+
    "\1\154\50\153\1\u0125\10\153\1\154\50\153\1\163\1\153"+
    "\1\u0126\6\153\1\154\50\153\1\163\5\153\1\u0127\2\153"+
    "\1\154\50\153\1\163\6\153\1\u0128\1\153\1\154\6\153"+
    "\1\176\41\153\1\163\10\153\1\154\42\153\1\u0129\5\153"+
    "\1\163\10\153\1\154\12\153\1\263\35\153\1\163\10\153"+
    "\1\154\11\153\1\u012a\36\153\1\163\10\153\1\154\11\153"+
    "\1\u012b\36\153\1\163\10\153\1\154\2\153\1\u012c\1\153"+
    "\1\u012c\2\153\1\u012c\3\153\24\u012c\2\153\1\u012c\5\153"+
    "\1\u012c\1\163\10\153\1\154\2\153\1\u012d\1\153\1\u012d"+
    "\2\153\1\u012d\3\153\24\u012d\2\153\1\u012d\5\153\1\u012d"+
    "\1\163\7\153\13\u012e\1\u012f\52\u012e\1\u0130\1\u012e\1\u0130"+
    "\2\u012e\1\u0130\3\u012e\24\u0130\2\u012e\1\u0130\5\u012e\1\u0130"+
    "\10\u012e\1\153\1\154\2\153\1\u0131\1\153\1\u0131\2\153"+
    "\1\u0131\2\153\1\u0132\24\u0131\2\153\1\u0131\5\153\1\u0131"+
    "\1\163\7\153\13\u012e\1\u0133\52\u012e\1\u0130\1\u012e\1\u0130"+
    "\2\u012e\1\u0130\2\u012e\1\263\24\u0130\2\u012e\1\u0130\5\u012e"+
    "\1\u0130\10\u012e\63\0\1\154\62\0\1\155\1\u0134\1\u0135"+
    "\12\0\1\u0135\44\0\1\u0134\74\0\1\u0136\63\0\1\u0137"+
    "\71\0\1\u0138\60\0\1\u0139\46\0\1\u013a\116\0\1\u013b"+
    "\24\0\1\u013c\103\0\1\u013d\44\0\1\u013e\43\0\3\171"+
    "\1\0\2\171\1\0\2\171\2\0\24\171\2\0\1\171"+
    "\5\0\1\171\56\0\1\u013f\62\0\1\u0140\31\0\1\u0141"+
    "\77\0\1\u0142\51\0\1\u0143\53\0\1\u0144\71\0\1\u0145"+
    "\52\0\1\u0146\10\0\1\u0147\55\0\1\u0148\61\0\1\u0149"+
    "\61\0\1\u014a\1\0\1\u014b\52\0\1\u014c\70\0\1\u014d"+
    "\67\0\1\u014e\53\0\1\u014f\56\0\1\u0150\64\0\1\u0151"+
    "\52\0\1\u0152\57\0\1\u0153\71\0\1\u0154\52\0\1\u0155"+
    "\62\0\1\u0156\66\0\1\u0157\75\0\1\u0158\31\0\1\u0159"+
    "\77\0\1\u015a\55\0\1\u015b\55\0\1\u015c\67\0\1\u015d"+
    "\60\0\1\u015e\62\0\1\u015f\54\0\1\u0160\73\0\1\u0161"+
    "\27\0\1\241\1\0\61\241\1\0\30\241\1\u0162\30\241"+
    "\1\0\32\241\1\u0163\25\241\2\0\3\246\1\0\2\246"+
    "\1\0\2\246\1\u0164\1\0\24\246\2\0\1\246\5\0"+
    "\1\246\12\0\3\246\1\0\2\246\1\0\2\246\1\u0164"+
    "\1\0\7\246\1\u0165\14\246\2\0\1\246\5\0\1\246"+
    "\12\0\3\246\1\0\2\246\1\0\2\246\1\u0164\1\0"+
    "\12\246\1\u0166\11\246\2\0\1\246\5\0\1\246\12\0"+
    "\3\246\1\0\2\246\1\0\2\246\1\u0164\1\0\12\246"+
    "\1\u0167\11\246\2\0\1\246\5\0\1\246\12\0\3\246"+
    "\1\0\2\246\1\0\2\246\1\u0164\1\0\15\246\1\u0168"+
    "\6\246\2\0\1\246\5\0\1\246\12\0\3\246\1\0"+
    "\2\246\1\0\2\246\1\u0164\1\0\15\246\1\u0169\6\246"+
    "\2\0\1\246\5\0\1\246\12\0\3\246\1\0\2\246"+
    "\1\0\2\246\1\u0164\1\0\3\246\1\u016a\20\246\2\0"+
    "\1\246\5\0\1\246\12\0\3\246\1\0\2\246\1\0"+
    "\2\246\1\u0164\1\0\2\246\1\u016b\21\246\2\0\1\246"+
    "\5\0\1\246\12\0\3\246\1\0\2\246\1\0\2\246"+
    "\1\u0164\1\0\12\246\1\u016c\11\246\2\0\1\246\5\0"+
    "\1\246\12\0\3\246\1\0\2\246\1\0\2\246\1\u0164"+
    "\1\0\6\246\1\u016d\15\246\2\0\1\246\5\0\1\246"+
    "\12\0\3\246\1\0\2\246\1\0\2\246\1\u0164\1\0"+
    "\12\246\1\u016e\11\246\2\0\1\246\5\0\1\246\34\0"+
    "\1\u016f\60\0\1\u0170\40\0\3\270\1\0\2\270\1\0"+
    "\2\270\2\0\24\270\2\0\1\270\5\0\1\270\12\0"+
    "\3\272\1\0\2\272\1\0\2\272\1\u0171\1\0\24\272"+
    "\2\0\1\272\5\0\1\272\43\0\1\u0172\45\0\1\u0173"+
    "\102\0\1\u0174\42\0\1\u0175\67\0\1\u0176\61\0\1\u0177"+
    "\32\0\1\313\1\0\46\313\1\0\11\313\40\0\1\u0178"+
    "\64\0\1\u0179\42\0\1\u017a\70\0\1\u017b\55\0\1\u017c"+
    "\67\0\1\u017d\51\0\1\u017e\55\0\1\u017f\57\0\1\u0180"+
    "\42\0\1\333\1\0\42\333\1\0\15\333\25\0\1\u0181"+
    "\34\0\1\336\1\0\42\336\1\0\15\336\34\0\1\u0182"+
    "\44\0\1\u0183\67\0\1\u0184\107\0\1\u0185\33\0\1\u0186"+
    "\66\0\1\u0187\31\0\1\355\1\u0188\1\u0189\12\0\1\u0189"+
    "\44\0\1\u0188\1\u018a\60\0\3\u018b\1\0\2\u018b\1\0"+
    "\2\u018b\1\u018c\1\0\24\u018b\2\0\1\u018b\5\0\1\u018b"+
    "\12\0\3\u018b\1\0\2\u018b\1\0\2\u018b\1\u018c\1\0"+
    "\20\u018b\1\u018d\3\u018b\2\0\1\u018b\5\0\1\u018b\12\0"+
    "\3\u018b\1\0\2\u018b\1\0\2\u018b\1\u018c\1\0\2\u018b"+
    "\1\u018e\21\u018b\2\0\1\u018b\5\0\1\u018b\12\0\3\u018b"+
    "\1\0\2\u018b\1\0\2\u018b\1\u018c\1\0\24\u018b\2\0"+
    "\1\u018f\5\0\1\u018b\12\0\3\u018b\1\0\2\u018b\1\0"+
    "\2\u018b\1\u018c\1\0\15\u018b\1\u0190\2\u018b\1\u0191\3\u018b"+
    "\2\0\1\u018b\5\0\1\u018b\12\0\3\u018b\1\0\2\u018b"+
    "\1\0\2\u018b\1\u018c\1\0\3\u018b\1\u0192\20\u018b\2\0"+
    "\1\u018b\5\0\1\u018b\12\0\3\u018b\1\0\2\u018b\1\0"+
    "\2\u018b\1\u018c\1\0\3\u018b\1\u0193\4\u018b\1\u0194\13\u018b"+
    "\2\0\1\u018b\5\0\1\u018b\12\0\3\u018b\1\0\2\u018b"+
    "\1\0\2\u018b\1\u018c\1\0\2\u018b\1\u0195\21\u018b\2\0"+
    "\1\u018b\5\0\1\u018b\12\0\3\u018b\1\0\2\u018b\1\0"+
    "\2\u018b\1\u018c\1\0\12\u018b\1\u0196\11\u018b\2\0\1\u018b"+
    "\5\0\1\u018b\12\0\3\374\1\0\2\374\1\0\2\374"+
    "\1\u0197\1\0\24\374\2\0\1\374\5\0\1\374\23\0"+
    "\1\u0198\50\0\3\374\1\0\2\374\1\0\2\374\1\u0197"+
    "\1\0\7\374\1\u0199\14\374\2\0\1\374\5\0\1\374"+
    "\12\0\3\374\1\0\2\374\1\0\2\374\1\u0197\1\0"+
    "\12\374\1\u019a\11\374\2\0\1\374\5\0\1\374\12\0"+
    "\3\374\1\0\2\374\1\0\2\374\1\u0197\1\0\12\374"+
    "\1\u019b\11\374\2\0\1\374\5\0\1\374\12\0\3\374"+
    "\1\0\2\374\1\0\2\374\1\u0197\1\0\15\374\1\u019c"+
    "\6\374\2\0\1\374\5\0\1\374\12\0\3\374\1\0"+
    "\2\374\1\0\2\374\1\u0197\1\0\15\374\1\u019d\6\374"+
    "\2\0\1\374\5\0\1\374\12\0\3\374\1\0\2\374"+
    "\1\0\2\374\1\u0197\1\0\3\374\1\u019e\20\374\2\0"+
    "\1\374\5\0\1\374\12\0\3\374\1\0\2\374\1\0"+
    "\2\374\1\u0197\1\0\2\374\1\u019f\21\374\2\0\1\374"+
    "\5\0\1\374\12\0\3\374\1\0\2\374\1\0\2\374"+
    "\1\u0197\1\0\12\374\1\u01a0\11\374\2\0\1\374\5\0"+
    "\1\374\12\0\3\374\1\0\2\374\1\0\2\374\1\u0197"+
    "\1\0\6\374\1\u01a1\15\374\2\0\1\374\5\0\1\374"+
    "\12\0\3\374\1\0\2\374\1\0\2\374\1\u0197\1\0"+
    "\12\374\1\u01a2\11\374\2\0\1\374\5\0\1\374\10\0"+
    "\1\u0108\1\0\55\u0108\1\0\2\u0108\20\0\1\u01a3\73\0"+
    "\1\u01a4\72\0\1\u01a5\45\0\1\u01a6\32\0\1\241\1\0"+
    "\30\241\1\u01a7\27\241\35\0\1\u01a8\43\0\1\u01a9\105\0"+
    "\1\u01aa\36\0\1\u01ab\62\0\1\u01ac\57\0\1\u01ad\76\0"+
    "\1\u01ae\53\0\1\u01af\52\0\1\u01b0\62\0\1\u01b1\70\0"+
    "\1\u01b2\64\0\1\u01b3\42\0\1\u01b4\50\0\3\u012c\1\0"+
    "\2\u012c\1\0\2\u012c\2\0\24\u012c\2\0\1\u012c\5\0"+
    "\1\u012c\12\0\3\u012d\1\0\2\u012d\1\0\2\u012d\1\u01b5"+
    "\1\0\24\u012d\2\0\1\u012d\5\0\1\u012d\12\0\3\u0130"+
    "\1\0\2\u0130\1\0\2\u0130\2\0\24\u0130\2\0\1\u0130"+
    "\5\0\1\u0130\12\0\3\u0131\1\0\2\u0131\1\0\2\u0131"+
    "\1\u01b6\1\0\24\u0131\2\0\1\u0131\5\0\1\u0131\23\0"+
    "\1\u01b7\50\0\1\u0134\1\0\1\u0135\12\0\1\u0135\44\0"+
    "\1\u01b8\2\0\1\u01b9\4\0\1\u01b9\65\0\1\u01ba\66\0"+
    "\1\u01bb\60\0\1\u01bc\70\0\1\u01bd\57\0\1\u01be\54\0"+
    "\1\u01bf\57\0\1\u01c0\64\0\1\u01c1\64\0\1\u01c2\73\0"+
    "\1\u01c3\52\0\1\u01c4\3\0\1\u01c5\46\0\1\u01c6\71\0"+
    "\1\u01c7\47\0\1\u01c8\67\0\1\u01c9\67\0\1\u01ca\43\0"+
    "\1\u01cb\62\0\1\u01cc\54\0\1\u01cd\112\0\1\u01ce\30\0"+
    "\1\u01cf\66\0\1\u01d0\66\0\1\u01d1\57\0\1\u01d2\74\0"+
    "\1\u01d3\55\0\1\u01d4\55\0\1\u01d5\53\0\1\u01d6\70\0"+
    "\1\u01d7\65\0\1\u01d8\51\0\1\u01d9\102\0\1\u01da\56\0"+
    "\1\u01db\47\0\1\u01dc\52\0\1\u01dd\70\0\1\u01de\52\0"+
    "\1\u01df\62\0\1\u01e0\45\0\1\u01e1\1\0\1\u01e1\2\0"+
    "\1\u01e1\3\0\24\u01e1\2\0\1\u01e1\5\0\1\u01e1\12\0"+
    "\3\246\1\0\2\246\1\0\2\246\1\u0164\1\0\2\246"+
    "\1\u01e2\21\246\2\0\1\246\5\0\1\246\12\0\3\246"+
    "\1\0\2\246\1\0\2\246\1\u0164\1\0\6\246\1\u01e3"+
    "\15\246\2\0\1\246\5\0\1\246\12\0\3\246\1\0"+
    "\2\246\1\0\2\246\1\u0164\1\0\11\246\1\u01e4\12\246"+
    "\2\0\1\246\5\0\1\246\12\0\3\246\1\0\2\246"+
    "\1\0\2\246\1\u0164\1\0\15\246\1\u01e5\6\246\2\0"+
    "\1\246\5\0\1\246\12\0\3\246\1\0\2\246\1\0"+
    "\2\246\1\u0164\1\0\2\246\1\u01e6\21\246\2\0\1\246"+
    "\5\0\1\246\12\0\3\246\1\0\2\246\1\0\2\246"+
    "\1\u0164\1\0\12\246\1\u01e7\11\246\2\0\1\246\5\0"+
    "\1\246\12\0\3\246\1\0\2\246\1\0\1\u01e8\1\246"+
    "\1\u0164\1\0\24\246\2\0\1\246\5\0\1\246\12\0"+
    "\3\246\1\0\2\246\1\0\2\246\1\u0164\1\0\13\246"+
    "\1\u01e9\10\246\2\0\1\246\5\0\1\246\12\0\3\246"+
    "\1\0\2\246\1\0\2\246\1\u0164\1\0\24\246\2\0"+
    "\1\u01ea\5\0\1\246\12\0\3\246\1\0\2\246\1\0"+
    "\2\246\1\u0164\1\0\5\246\1\u01eb\16\246\2\0\1\246"+
    "\5\0\1\246\27\0\1\u01ec\105\0\1\u01ed\22\0\1\u01ee"+
    "\1\0\1\u01ee\2\0\1\u01ee\3\0\24\u01ee\2\0\1\u01ee"+
    "\5\0\1\u01ee\27\0\1\u01ef\74\0\1\u01f0\60\0\1\u01f1"+
    "\56\0\1\u01f2\53\0\1\u01f3\60\0\1\u01f4\76\0\1\u01f5"+
    "\44\0\1\u01f6\70\0\1\u01f7\65\0\1\u01f8\60\0\1\u01f9"+
    "\70\0\1\u01fa\55\0\1\u01fb\57\0\1\u01fc\53\0\1\u01fd"+
    "\46\0\1\u01fe\70\0\1\u01ff\43\0\1\u0188\1\0\1\u0189"+
    "\12\0\1\u0189\44\0\1\u0200\2\0\1\u0201\4\0\1\u0201"+
    "\53\0\1\u0202\1\0\1\u0202\2\0\1\u0202\3\0\24\u0202"+
    "\2\0\1\u0202\5\0\1\u0202\12\0\3\u018b\1\0\2\u018b"+
    "\1\0\2\u018b\1\u018c\1\0\12\u018b\1\u0203\11\u018b\2\0"+
    "\1\u018b\5\0\1\u018b\12\0\3\u018b\1\0\2\u018b\1\0"+
    "\2\u018b\1\u018c\1\0\17\u018b\1\u0204\4\u018b\2\0\1\u018b"+
    "\5\0\1\u018b\12\0\3\u018b\1\0\2\u018b\1\0\2\u018b"+
    "\1\u018c\1\0\13\u018b\1\u0205\10\u018b\2\0\1\u018b\5\0"+
    "\1\u018b\12\0\3\u018b\1\0\2\u018b\1\0\2\u018b\1\u018c"+
    "\1\0\15\u018b\1\u0206\6\u018b\2\0\1\u018b\5\0\1\u018b"+
    "\12\0\3\u018b\1\0\2\u018b\1\0\2\u018b\1\u018c\1\0"+
    "\6\u018b\1\u0207\15\u018b\2\0\1\u018b\5\0\1\u018b\12\0"+
    "\3\u018b\1\0\2\u018b\1\0\2\u018b\1\u018c\1\0\5\u018b"+
    "\1\u0208\16\u018b\2\0\1\u018b\5\0\1\u018b\12\0\3\u018b"+
    "\1\0\2\u018b\1\0\2\u018b\1\u018c\1\0\2\u018b\1\u0209"+
    "\21\u018b\2\0\1\u018b\5\0\1\u018b\12\0\3\u018b\1\0"+
    "\2\u018b\1\0\2\u018b\1\u018c\1\0\3\u018b\1\u020a\20\u018b"+
    "\2\0\1\u018b\5\0\1\u018b\12\0\3\u018b\1\0\2\u018b"+
    "\1\0\2\u018b\1\u018c\1\0\7\u018b\1\u020b\14\u018b\2\0"+
    "\1\u018b\5\0\1\u018b\12\0\3\u018b\1\0\2\u018b\1\0"+
    "\2\u018b\1\u018c\1\0\7\u018b\1\u020c\14\u018b\2\0\1\u018b"+
    "\5\0\1\u018b\14\0\1\u020d\1\0\1\u020d\2\0\1\u020d"+
    "\2\0\1\u020e\24\u020d\2\0\1\u020d\5\0\1\u020d\14\0"+
    "\1\u020d\1\0\1\u020d\2\0\1\u020d\3\0\24\u020d\2\0"+
    "\1\u020d\5\0\1\u020d\12\0\3\374\1\0\2\374\1\0"+
    "\2\374\1\u0197\1\0\2\374\1\u020f\21\374\2\0\1\374"+
    "\5\0\1\374\12\0\3\374\1\0\2\374\1\0\2\374"+
    "\1\u0197\1\0\6\374\1\u0210\15\374\2\0\1\374\5\0"+
    "\1\374\12\0\3\374\1\0\2\374\1\0\2\374\1\u0197"+
    "\1\0\11\374\1\u0211\12\374\2\0\1\374\5\0\1\374"+
    "\12\0\3\374\1\0\2\374\1\0\2\374\1\u0197\1\0"+
    "\15\374\1\u0212\6\374\2\0\1\374\5\0\1\374\12\0"+
    "\3\374\1\0\2\374\1\0\2\374\1\u0197\1\0\2\374"+
    "\1\u0213\21\374\2\0\1\374\5\0\1\374\12\0\3\374"+
    "\1\0\2\374\1\0\2\374\1\u0197\1\0\12\374\1\u0214"+
    "\11\374\2\0\1\374\5\0\1\374\12\0\3\374\1\0"+
    "\2\374\1\0\1\u0215\1\374\1\u0197\1\0\24\374\2\0"+
    "\1\374\5\0\1\374\12\0\3\374\1\0\2\374\1\0"+
    "\2\374\1\u0197\1\0\13\374\1\u0216\10\374\2\0\1\374"+
    "\5\0\1\374\12\0\3\374\1\0\2\374\1\0\2\374"+
    "\1\u0197\1\0\24\374\2\0\1\u0217\5\0\1\374\12\0"+
    "\3\374\1\0\2\374\1\0\2\374\1\u0197\1\0\5\374"+
    "\1\u0218\16\374\2\0\1\374\5\0\1\374\32\0\1\u0219"+
    "\64\0\1\u021a\53\0\1\u021b\62\0\1\u021c\73\0\1\u021d"+
    "\46\0\1\u021e\64\0\1\u021f\73\0\1\u0220\50\0\1\u0221"+
    "\67\0\1\u0222\55\0\1\u0223\53\0\1\u0224\66\0\1\u0225"+
    "\62\0\1\u0226\36\0\1\u01b8\76\0\1\u0227\66\0\1\u0228"+
    "\53\0\1\u0229\72\0\1\u022a\52\0\1\u022b\60\0\1\u022c"+
    "\76\0\1\u022d\54\0\1\u022e\51\0\1\u022f\67\0\1\u0230"+
    "\55\0\1\u0231\74\0\1\u0232\44\0\1\u0233\72\0\1\u0234"+
    "\61\0\1\u0235\50\0\1\u0236\61\0\1\u0237\77\0\1\u0238"+
    "\60\0\1\u0239\56\0\1\u023a\47\0\1\u023b\72\0\1\u023c"+
    "\57\0\1\u023d\57\0\1\u023e\54\0\1\u023f\65\0\1\u0240"+
    "\70\0\1\u0241\63\0\1\u0242\52\0\1\u0243\53\0\1\u0244"+
    "\61\0\1\u0245\60\0\1\u0246\62\0\1\u0247\67\0\1\u0248"+
    "\53\0\1\u0249\70\0\1\u024a\52\0\1\u024b\76\0\1\u024c"+
    "\55\0\1\u024d\33\0\3\u01e1\1\0\2\u01e1\1\0\2\u01e1"+
    "\2\0\24\u01e1\2\0\1\u01e1\5\0\1\u01e1\12\0\3\246"+
    "\1\0\2\246\1\0\2\246\1\u0164\1\0\11\246\1\u024e"+
    "\12\246\2\0\1\246\5\0\1\246\12\0\3\246\1\0"+
    "\2\246\1\0\2\246\1\u0164\1\0\1\246\1\u024f\22\246"+
    "\2\0\1\246\5\0\1\246\12\0\3\246\1\0\2\246"+
    "\1\0\2\246\1\u0164\1\0\11\246\1\u0250\12\246\2\0"+
    "\1\246\5\0\1\246\12\0\3\246\1\0\2\246\1\0"+
    "\2\246\1\u0164\1\0\3\246\1\u0251\20\246\2\0\1\246"+
    "\5\0\1\246\12\0\3\246\1\0\2\246\1\0\2\246"+
    "\1\u0164\1\0\11\246\1\u0252\12\246\2\0\1\246\5\0"+
    "\1\246\12\0\3\246\1\0\2\246\1\0\2\246\1\u0164"+
    "\1\0\6\246\1\u0253\15\246\2\0\1\246\5\0\1\246"+
    "\12\0\3\246\1\0\2\246\1\0\2\246\1\u0164\1\0"+
    "\15\246\1\u0254\6\246\2\0\1\246\5\0\1\246\12\0"+
    "\3\246\1\0\2\246\1\0\2\246\1\u0164\1\0\5\246"+
    "\1\u0255\16\246\2\0\1\246\5\0\1\246\12\0\3\246"+
    "\1\0\2\246\1\0\2\246\1\u0164\1\0\2\246\1\u0256"+
    "\21\246\2\0\1\246\5\0\1\246\12\0\3\246\1\0"+
    "\2\246\1\0\2\246\1\u0164\1\0\2\246\1\u0257\21\246"+
    "\2\0\1\246\5\0\1\246\36\0\1\u0258\52\0\1\u0259"+
    "\44\0\3\u01ee\1\0\2\u01ee\1\0\2\u01ee\2\0\24\u01ee"+
    "\2\0\1\u01ee\5\0\1\u01ee\30\0\1\u025a\60\0\1\u025b"+
    "\61\0\1\u025c\77\0\1\u025d\43\0\1\u025e\62\0\1\u025f"+
    "\60\0\1\u0260\72\0\1\u0261\50\0\1\u0262\67\0\1\u0263"+
    "\53\0\1\u0264\60\0\1\u0265\73\0\1\u0266\61\0\1\u0267"+
    "\33\0\1\u0200\61\0\3\u0202\1\0\2\u0202\1\0\2\u0202"+
    "\2\0\24\u0202\2\0\1\u0202\5\0\1\u0202\12\0\3\u018b"+
    "\1\0\2\u018b\1\0\2\u018b\1\u018c\1\0\3\u018b\1\u0268"+
    "\20\u018b\2\0\1\u018b\5\0\1\u018b\12\0\3\u018b\1\0"+
    "\2\u018b\1\0\2\u018b\1\u018c\1\0\6\u018b\1\u0269\15\u018b"+
    "\2\0\1\u018b\5\0\1\u018b\12\0\3\u018b\1\0\2\u018b"+
    "\1\0\2\u018b\1\u018c\1\0\7\u018b\1\u026a\14\u018b\2\0"+
    "\1\u018b\5\0\1\u018b\12\0\3\u018b\1\0\2\u018b\1\0"+
    "\2\u018b\1\u018c\1\0\3\u018b\1\u026b\20\u018b\2\0\1\u018b"+
    "\5\0\1\u018b\12\0\3\u018b\1\0\2\u018b\1\0\2\u018b"+
    "\1\u018c\1\0\2\u018b\1\u026c\21\u018b\2\0\1\u018b\5\0"+
    "\1\u018b\12\0\3\u018b\1\0\2\u018b\1\0\2\u018b\1\u018c"+
    "\1\0\2\u018b\1\u026d\21\u018b\2\0\1\u018b\5\0\1\u018b"+
    "\12\0\3\u018b\1\0\2\u018b\1\0\2\u018b\1\u018c\1\0"+
    "\6\u018b\1\u026e\15\u018b\2\0\1\u018b\5\0\1\u018b\12\0"+
    "\3\u018b\1\0\2\u018b\1\0\2\u018b\1\u018c\1\0\2\u018b"+
    "\1\u026f\21\u018b\2\0\1\u018b\5\0\1\u018b\12\0\3\u018b"+
    "\1\0\2\u018b\1\0\2\u018b\1\u018c\1\0\23\u018b\1\u0270"+
    "\2\0\1\u018b\5\0\1\u018b\12\0\3\u018b\1\0\2\u018b"+
    "\1\0\2\u018b\1\u018c\1\0\7\u018b\1\u0271\14\u018b\2\0"+
    "\1\u018b\5\0\1\u018b\12\0\3\u020d\1\0\2\u020d\1\0"+
    "\2\u020d\2\0\24\u020d\2\0\1\u020d\5\0\1\u020d\12\0"+
    "\3\374\1\0\2\374\1\0\2\374\1\u0197\1\0\11\374"+
    "\1\u0272\12\374\2\0\1\374\5\0\1\374\12\0\3\374"+
    "\1\0\2\374\1\0\2\374\1\u0197\1\0\1\374\1\u0273"+
    "\22\374\2\0\1\374\5\0\1\374\12\0\3\374\1\0"+
    "\2\374\1\0\2\374\1\u0197\1\0\11\374\1\u0274\12\374"+
    "\2\0\1\374\5\0\1\374\12\0\3\374\1\0\2\374"+
    "\1\0\2\374\1\u0197\1\0\3\374\1\u0275\20\374\2\0"+
    "\1\374\5\0\1\374\12\0\3\374\1\0\2\374\1\0"+
    "\2\374\1\u0197\1\0\11\374\1\u0276\12\374\2\0\1\374"+
    "\5\0\1\374\12\0\3\374\1\0\2\374\1\0\2\374"+
    "\1\u0197\1\0\6\374\1\u0277\15\374\2\0\1\374\5\0"+
    "\1\374\12\0\3\374\1\0\2\374\1\0\2\374\1\u0197"+
    "\1\0\15\374\1\u0278\6\374\2\0\1\374\5\0\1\374"+
    "\12\0\3\374\1\0\2\374\1\0\2\374\1\u0197\1\0"+
    "\5\374\1\u0279\16\374\2\0\1\374\5\0\1\374\12\0"+
    "\3\374\1\0\2\374\1\0\2\374\1\u0197\1\0\2\374"+
    "\1\u027a\21\374\2\0\1\374\5\0\1\374\12\0\3\374"+
    "\1\0\2\374\1\0\2\374\1\u0197\1\0\2\374\1\u027b"+
    "\21\374\2\0\1\374\5\0\1\374\27\0\1\u027c\101\0"+
    "\1\u027d\42\0\1\u027e\61\0\1\u027f\60\0\1\u0280\65\0"+
    "\1\u0281\55\0\1\u0282\74\0\1\u0283\63\0\1\u0284\52\0"+
    "\1\u0285\60\0\1\u0286\74\0\1\u0287\42\0\1\u0288\66\0"+
    "\1\u0289\60\0\1\u028a\55\0\1\u028b\63\0\1\u028c\57\0"+
    "\1\u028d\71\0\1\u028e\53\0\1\u028f\73\0\1\u0290\43\0"+
    "\1\u0291\55\0\1\u0292\101\0\1\u0293\47\0\1\u0294\70\0"+
    "\1\u0295\57\0\1\u0296\70\0\1\u0297\37\0\1\u0298\71\0"+
    "\1\u0299\56\0\1\u029a\62\0\1\u029b\61\0\1\u029c\76\0"+
    "\1\u029d\43\0\1\u029e\67\0\1\u029f\54\0\1\u02a0\73\0"+
    "\1\u02a1\50\0\1\u02a2\72\0\1\u02a3\61\0\1\u02a4\63\0"+
    "\1\u02a5\45\0\1\u02a6\65\0\1\u02a7\63\0\1\u02a8\51\0"+
    "\1\u02a9\77\0\1\u02aa\44\0\1\u02ab\76\0\1\u02ac\44\0"+
    "\1\u02ad\73\0\1\u02ae\32\0\3\246\1\0\2\246\1\0"+
    "\2\246\1\u0164\1\0\2\246\1\u02af\21\246\2\0\1\246"+
    "\5\0\1\246\12\0\3\246\1\0\2\246\1\0\2\246"+
    "\1\u0164\1\0\11\246\1\u02b0\12\246\2\0\1\246\5\0"+
    "\1\246\12\0\3\246\1\0\2\246\1\0\2\246\1\u0164"+
    "\1\0\2\246\1\u02b1\21\246\2\0\1\246\5\0\1\246"+
    "\12\0\3\246\1\0\2\246\1\0\2\246\1\u0164\1\0"+
    "\13\246\1\u02b2\10\246\2\0\1\246\5\0\1\246\12\0"+
    "\3\246\1\0\2\246\1\0\2\246\1\u0164\1\0\2\246"+
    "\1\u02b3\21\246\2\0\1\246\5\0\1\246\12\0\3\246"+
    "\1\0\2\246\1\0\2\246\1\u0164\1\0\11\246\1\u02b4"+
    "\12\246\2\0\1\246\5\0\1\246\27\0\1\u02b5\70\0"+
    "\1\u02b6\54\0\1\u025c\74\0\1\u02b7\46\0\1\u02b8\74\0"+
    "\1\u02b9\61\0\1\u02ba\43\0\1\u02bb\63\0\1\u02bc\63\0"+
    "\1\u02bd\62\0\1\u02be\40\0\3\u018b\1\0\2\u018b\1\0"+
    "\2\u018b\1\u018c\1\0\5\u018b\1\u02bf\16\u018b\2\0\1\u018b"+
    "\5\0\1\u018b\12\0\3\u018b\1\0\2\u018b\1\0\2\u018b"+
    "\1\u018c\1\0\2\u018b\1\u02c0\21\u018b\2\0\1\u018b\5\0"+
    "\1\u018b\12\0\3\u018b\1\0\2\u018b\1\0\2\u018b\1\u018c"+
    "\1\0\5\u018b\1\u02c1\16\u018b\2\0\1\u018b\5\0\1\u018b"+
    "\12\0\3\u018b\1\0\2\u018b\1\0\2\u018b\1\u018c\1\0"+
    "\13\u018b\1\u02c2\10\u018b\2\0\1\u018b\5\0\1\u018b\12\0"+
    "\3\u018b\1\0\2\u018b\1\0\2\u018b\1\u018c\1\0\17\u018b"+
    "\1\u02c3\4\u018b\2\0\1\u018b\5\0\1\u018b\12\0\3\u018b"+
    "\1\0\2\u018b\1\0\2\u018b\1\u018c\1\0\3\u018b\1\u02c4"+
    "\20\u018b\2\0\1\u018b\5\0\1\u018b\12\0\3\u018b\1\0"+
    "\2\u018b\1\0\2\u018b\1\u018c\1\0\2\u018b\1\u02c5\21\u018b"+
    "\2\0\1\u018b\5\0\1\u018b\12\0\3\u018b\1\0\2\u018b"+
    "\1\0\2\u018b\1\u018c\1\0\20\u018b\1\u02c6\3\u018b\2\0"+
    "\1\u018b\5\0\1\u018b\12\0\3\u018b\1\0\2\u018b\1\0"+
    "\2\u018b\1\u018c\1\0\12\u018b\1\u02c7\11\u018b\2\0\1\u018b"+
    "\5\0\1\u018b\12\0\3\374\1\0\2\374\1\0\2\374"+
    "\1\u0197\1\0\2\374\1\u02c8\21\374\2\0\1\374\5\0"+
    "\1\374\12\0\3\374\1\0\2\374\1\0\2\374\1\u0197"+
    "\1\0\11\374\1\u02c9\12\374\2\0\1\374\5\0\1\374"+
    "\12\0\3\374\1\0\2\374\1\0\2\374\1\u0197\1\0"+
    "\2\374\1\u02ca\21\374\2\0\1\374\5\0\1\374\12\0"+
    "\3\374\1\0\2\374\1\0\2\374\1\u0197\1\0\13\374"+
    "\1\u02cb\10\374\2\0\1\374\5\0\1\374\12\0\3\374"+
    "\1\0\2\374\1\0\2\374\1\u0197\1\0\2\374\1\u02cc"+
    "\21\374\2\0\1\374\5\0\1\374\12\0\3\374\1\0"+
    "\2\374\1\0\2\374\1\u0197\1\0\11\374\1\u02cd\12\374"+
    "\2\0\1\374\5\0\1\374\30\0\1\u02ce\65\0\1\u02cf"+
    "\54\0\1\u02d0\61\0\1\u02d1\62\0\1\u02d2\60\0\1\u02d3"+
    "\77\0\1\u02d4\45\0\1\u02d5\72\0\1\u02d6\61\0\1\u02d7"+
    "\54\0\1\u02d8\60\0\1\u02d9\56\0\1\u02da\60\0\1\u02db"+
    "\60\0\1\u02dc\74\0\1\u02dd\46\0\1\u02de\61\0\1\u02df"+
    "\71\0\1\u02e0\62\0\1\u02e1\62\0\1\u02e2\54\0\1\u02e3"+
    "\72\0\1\u02e4\44\0\1\u02e5\71\0\1\u02e6\66\0\1\u02e7"+
    "\63\0\1\u02e8\53\0\1\u02e9\46\0\1\u02ea\70\0\1\u02eb"+
    "\54\0\1\u02ec\60\0\1\u02ed\72\0\1\u02ee\74\0\1\u02ef"+
    "\53\0\1\u02f0\56\0\1\u02f1\57\0\1\u02f2\50\0\1\u02f3"+
    "\73\0\1\u02f4\65\0\1\u02f5\43\0\1\u02f6\67\0\1\u02f7"+
    "\60\0\1\u02f8\66\0\1\u02f9\65\0\1\u02fa\55\0\1\u02fb"+
    "\50\0\1\u02fc\43\0\3\246\1\0\2\246\1\0\2\246"+
    "\1\u0164\1\0\20\246\1\u02fd\3\246\2\0\1\246\5\0"+
    "\1\246\12\0\3\246\1\0\2\246\1\0\2\246\1\u0164"+
    "\1\0\2\246\1\u02fe\21\246\2\0\1\246\5\0\1\246"+
    "\12\0\3\246\1\0\2\246\1\0\2\246\1\u0164\1\0"+
    "\20\246\1\u02ff\3\246\2\0\1\246\5\0\1\246\12\0"+
    "\3\246\1\0\2\246\1\0\2\246\1\u0164\1\0\22\246"+
    "\1\u0300\1\246\2\0\1\246\5\0\1\246\12\0\3\246"+
    "\1\0\2\246\1\0\2\246\1\u0164\1\0\17\246\1\u0301"+
    "\4\246\2\0\1\246\5\0\1\246\12\0\3\246\1\0"+
    "\2\246\1\0\2\246\1\u0164\1\0\10\246\1\u0302\13\246"+
    "\2\0\1\246\5\0\1\246\45\0\1\u0303\51\0\1\u0304"+
    "\105\0\1\u0305\50\0\1\u0306\72\0\1\u0307\34\0\1\u0308"+
    "\72\0\1\u0309\51\0\1\u030a\66\0\1\u030b\31\0\3\u018b"+
    "\1\0\2\u018b\1\0\2\u018b\1\u018c\1\0\2\u018b\1\u030c"+
    "\21\u018b\2\0\1\u018b\5\0\1\u018b\12\0\3\u018b\1\0"+
    "\2\u018b\1\0\2\u018b\1\u018c\1\0\20\u018b\1\u030d\3\u018b"+
    "\2\0\1\u018b\5\0\1\u018b\12\0\3\u018b\1\0\2\u018b"+
    "\1\0\2\u018b\1\u018c\1\0\22\u018b\1\u030e\1\u018b\2\0"+
    "\1\u018b\5\0\1\u018b\12\0\3\u018b\1\0\2\u018b\1\0"+
    "\2\u018b\1\u018c\1\0\15\u018b\1\u030f\6\u018b\2\0\1\u018b"+
    "\5\0\1\u018b\12\0\3\u018b\1\0\2\u018b\1\0\2\u018b"+
    "\1\u018c\1\0\2\u018b\1\u0310\21\u018b\2\0\1\u018b\5\0"+
    "\1\u018b\12\0\3\u018b\1\0\2\u018b\1\0\2\u018b\1\u018c"+
    "\1\0\2\u018b\1\u0311\21\u018b\2\0\1\u018b\5\0\1\u018b"+
    "\12\0\3\u018b\1\0\2\u018b\1\0\2\u018b\1\u018c\1\0"+
    "\15\u018b\1\u02c1\6\u018b\2\0\1\u018b\5\0\1\u018b\12\0"+
    "\3\u018b\1\0\2\u018b\1\0\2\u018b\1\u018c\1\0\24\u018b"+
    "\2\0\1\u018b\5\0\1\u0312\12\0\3\374\1\0\2\374"+
    "\1\0\2\374\1\u0197\1\0\20\374\1\u0313\3\374\2\0"+
    "\1\374\5\0\1\374\12\0\3\374\1\0\2\374\1\0"+
    "\2\374\1\u0197\1\0\2\374\1\u0314\21\374\2\0\1\374"+
    "\5\0\1\374\12\0\3\374\1\0\2\374\1\0\2\374"+
    "\1\u0197\1\0\20\374\1\u0315\3\374\2\0\1\374\5\0"+
    "\1\374\12\0\3\374\1\0\2\374\1\0\2\374\1\u0197"+
    "\1\0\22\374\1\u0316\1\374\2\0\1\374\5\0\1\374"+
    "\12\0\3\374\1\0\2\374\1\0\2\374\1\u0197\1\0"+
    "\17\374\1\u0317\4\374\2\0\1\374\5\0\1\374\12\0"+
    "\3\374\1\0\2\374\1\0\2\374\1\u0197\1\0\10\374"+
    "\1\u0318\13\374\2\0\1\374\5\0\1\374\27\0\1\u02ce"+
    "\77\0\1\u0319\46\0\1\u031a\56\0\1\u031b\74\0\1\u031c"+
    "\46\0\1\u031d\61\0\1\u031e\62\0\1\u031f\63\0\1\u0320"+
    "\74\0\1\u0321\61\0\1\u0322\51\0\1\u0323\66\0\1\u0324"+
    "\54\0\1\u0325\52\0\1\u0326\100\0\1\u0327\50\0\1\u0328"+
    "\62\0\1\u0329\54\0\1\u032a\61\0\1\u032b\74\0\1\u032c"+
    "\62\0\1\u032d\57\0\1\u032e\46\0\1\u032f\74\0\1\u0330"+
    "\57\0\1\u0331\60\0\1\u0332\66\0\1\u0333\52\0\1\u0334"+
    "\61\0\1\u0335\66\0\1\u0336\54\0\1\u0337\66\0\1\u0338"+
    "\54\0\1\u0339\67\0\1\u033a\30\0\3\246\1\0\2\246"+
    "\1\0\2\246\1\u0164\1\0\15\246\1\u033b\6\246\2\0"+
    "\1\246\5\0\1\246\12\0\3\246\1\0\2\246\1\0"+
    "\2\246\1\u0164\1\0\20\246\1\u033c\3\246\2\0\1\246"+
    "\5\0\1\246\12\0\3\246\1\0\2\246\1\0\2\246"+
    "\1\u0164\1\0\15\246\1\u033d\6\246\2\0\1\246\5\0"+
    "\1\246\12\0\3\246\1\0\2\246\1\0\2\246\1\u0164"+
    "\1\0\1\246\1\u033e\22\246\2\0\1\246\5\0\1\246"+
    "\12\0\3\246\1\0\2\246\1\0\2\246\1\u0164\1\0"+
    "\17\246\1\u033f\4\246\2\0\1\246\5\0\1\246\12\0"+
    "\3\246\1\0\2\246\1\0\1\246\1\u0340\1\u0164\1\0"+
    "\24\246\2\0\1\246\5\0\1\246\42\0\1\u0341\41\0"+
    "\1\u0342\77\0\1\u0343\61\0\1\u0344\61\0\1\u0345\63\0"+
    "\1\u0346\61\0\1\u0347\31\0\3\u018b\1\0\2\u018b\1\0"+
    "\2\u018b\1\u018c\1\0\3\u018b\1\u0348\20\u018b\2\0\1\u018b"+
    "\5\0\1\u018b\12\0\3\u018b\1\0\2\u018b\1\0\2\u018b"+
    "\1\u018c\1\0\5\u018b\1\u0349\16\u018b\2\0\1\u018b\5\0"+
    "\1\u018b\12\0\3\u018b\1\0\2\u018b\1\0\2\u018b\1\u018c"+
    "\1\0\1\u018b\1\u034a\22\u018b\2\0\1\u018b\5\0\1\u018b"+
    "\12\0\3\u018b\1\0\2\u018b\1\0\2\u018b\1\u018c\1\0"+
    "\12\u018b\1\u034b\11\u018b\2\0\1\u018b\5\0\1\u018b\12\0"+
    "\3\u018b\1\0\2\u018b\1\0\2\u018b\1\u018c\1\0\5\u018b"+
    "\1\u034c\16\u018b\2\0\1\u018b\5\0\1\u018b\12\0\3\u018b"+
    "\1\0\2\u018b\1\0\2\u018b\1\u018c\1\0\5\u018b\1\u034d"+
    "\16\u018b\2\0\1\u018b\5\0\1\u018b\12\0\3\u018b\1\0"+
    "\2\u018b\1\0\2\u018b\1\u018c\1\0\13\u018b\1\u034e\10\u018b"+
    "\2\0\1\u018b\5\0\1\u018b\12\0\3\374\1\0\2\374"+
    "\1\0\2\374\1\u0197\1\0\15\374\1\u034f\6\374\2\0"+
    "\1\374\5\0\1\374\12\0\3\374\1\0\2\374\1\0"+
    "\2\374\1\u0197\1\0\20\374\1\u0350\3\374\2\0\1\374"+
    "\5\0\1\374\12\0\3\374\1\0\2\374\1\0\2\374"+
    "\1\u0197\1\0\15\374\1\u0351\6\374\2\0\1\374\5\0"+
    "\1\374\12\0\3\374\1\0\2\374\1\0\2\374\1\u0197"+
    "\1\0\1\374\1\u0352\22\374\2\0\1\374\5\0\1\374"+
    "\12\0\3\374\1\0\2\374\1\0\2\374\1\u0197\1\0"+
    "\17\374\1\u0353\4\374\2\0\1\374\5\0\1\374\12\0"+
    "\3\374\1\0\2\374\1\0\1\374\1\u0354\1\u0197\1\0"+
    "\24\374\2\0\1\374\5\0\1\374\32\0\1\u0355\67\0"+
    "\1\u0356\65\0\1\u0357\55\0\1\u0358\50\0\1\u0359\100\0"+
    "\1\u035a\46\0\1\u035b\64\0\1\u035c\56\0\1\u035d\74\0"+
    "\1\u035e\42\0\1\u035f\65\0\1\u0360\66\0\1\u0361\52\0"+
    "\1\u0362\57\0\1\u0363\61\0\1\u0364\62\0\1\u0365\70\0"+
    "\1\u0366\67\0\1\u0367\56\0\1\u0368\52\0\1\u0369\62\0"+
    "\1\u036a\60\0\1\u036b\61\0\1\u036c\55\0\1\u036d\44\0"+
    "\3\246\1\0\2\246\1\0\2\246\1\u0164\1\0\15\246"+
    "\1\u036e\6\246\2\0\1\246\5\0\1\246\12\0\3\246"+
    "\1\0\2\246\1\0\2\246\1\u0164\1\0\15\246\1\u036f"+
    "\6\246\2\0\1\246\5\0\1\246\12\0\3\246\1\0"+
    "\2\246\1\0\2\246\1\u0164\1\0\13\246\1\u0370\10\246"+
    "\2\0\1\246\5\0\1\246\12\0\3\246\1\0\2\246"+
    "\1\0\2\246\1\u0164\1\0\2\246\1\u0371\5\246\1\u0372"+
    "\13\246\2\0\1\246\5\0\1\246\27\0\1\u0373\74\0"+
    "\1\u0374\46\0\1\u0375\74\0\1\u0376\46\0\1\u0377\44\0"+
    "\3\u018b\1\0\2\u018b\1\0\2\u018b\1\u018c\1\0\2\u018b"+
    "\1\u0378\21\u018b\2\0\1\u018b\5\0\1\u018b\12\0\3\u018b"+
    "\1\0\2\u018b\1\0\2\u018b\1\u018c\1\0\10\u018b\1\u0379"+
    "\13\u018b\2\0\1\u018b\5\0\1\u018b\12\0\3\u018b\1\0"+
    "\2\u018b\1\0\2\u018b\1\u018c\1\0\15\u018b\1\u037a\6\u018b"+
    "\2\0\1\u018b\5\0\1\u018b\12\0\3\u018b\1\0\2\u018b"+
    "\1\0\2\u018b\1\u018c\1\0\3\u018b\1\u037b\20\u018b\2\0"+
    "\1\u018b\5\0\1\u018b\12\0\3\u018b\1\0\2\u018b\1\0"+
    "\2\u018b\1\u018c\1\0\13\u018b\1\u037c\10\u018b\2\0\1\u018b"+
    "\5\0\1\u018b\12\0\3\u018b\1\0\2\u018b\1\0\2\u018b"+
    "\1\u018c\1\0\20\u018b\1\u037d\3\u018b\2\0\1\u018b\5\0"+
    "\1\u018b\12\0\3\374\1\0\2\374\1\0\2\374\1\u0197"+
    "\1\0\15\374\1\u037e\6\374\2\0\1\374\5\0\1\374"+
    "\12\0\3\374\1\0\2\374\1\0\2\374\1\u0197\1\0"+
    "\15\374\1\u037f\6\374\2\0\1\374\5\0\1\374\12\0"+
    "\3\374\1\0\2\374\1\0\2\374\1\u0197\1\0\13\374"+
    "\1\u0380\10\374\2\0\1\374\5\0\1\374\12\0\3\374"+
    "\1\0\2\374\1\0\2\374\1\u0197\1\0\2\374\1\u0381"+
    "\5\374\1\u0382\13\374\2\0\1\374\5\0\1\374\40\0"+
    "\1\u0383\66\0\1\u0384\56\0\1\u0385\56\0\1\u0386\54\0"+
    "\1\u0387\56\0\1\u0388\61\0\1\u0389\74\0\1\u038a\46\0"+
    "\1\u038b\54\0\1\u038c\67\0\1\u038d\71\0\1\u038e\66\0"+
    "\1\u038f\43\0\1\u0390\61\0\1\u0391\61\0\1\u0392\44\0"+
    "\3\246\1\0\2\246\1\0\1\246\1\u0393\1\u0164\1\0"+
    "\24\246\2\0\1\246\5\0\1\246\12\0\3\246\1\0"+
    "\2\246\1\0\2\246\1\u0164\1\0\2\246\1\u0394\21\246"+
    "\2\0\1\246\5\0\1\246\12\0\3\246\1\0\2\246"+
    "\1\0\2\246\1\u0164\1\0\20\246\1\u0395\3\246\2\0"+
    "\1\246\5\0\1\246\12\0\3\246\1\0\2\246\1\0"+
    "\2\246\1\u0164\1\0\7\246\1\u0396\14\246\2\0\1\246"+
    "\5\0\1\246\12\0\3\246\1\0\2\246\1\0\2\246"+
    "\1\u0164\1\0\15\246\1\u0397\6\246\2\0\1\246\5\0"+
    "\1\246\34\0\1\u0398\60\0\1\u0399\72\0\1\u039a\50\0"+
    "\1\u039b\40\0\3\u018b\1\0\2\u018b\1\0\2\u018b\1\u018c"+
    "\1\0\5\u018b\1\u039c\16\u018b\2\0\1\u018b\5\0\1\u018b"+
    "\12\0\3\u018b\1\0\2\u018b\1\0\2\u018b\1\u018c\1\0"+
    "\20\u018b\1\u039d\3\u018b\2\0\1\u018b\5\0\1\u018b\12\0"+
    "\3\u018b\1\0\2\u018b\1\0\2\u018b\1\u018c\1\0\2\u018b"+
    "\1\u039e\21\u018b\2\0\1\u018b\5\0\1\u018b\12\0\3\u018b"+
    "\1\0\2\u018b\1\0\1\u018b\1\u039f\1\u018c\1\0\24\u018b"+
    "\2\0\1\u018b\5\0\1\u018b\12\0\3\u018b\1\0\2\u018b"+
    "\1\0\2\u018b\1\u018c\1\0\20\u018b\1\u03a0\3\u018b\2\0"+
    "\1\u018b\5\0\1\u018b\12\0\3\u018b\1\0\2\u018b\1\0"+
    "\2\u018b\1\u018c\1\0\21\u018b\1\u03a1\2\u018b\2\0\1\u018b"+
    "\5\0\1\u018b\12\0\3\374\1\0\2\374\1\0\1\374"+
    "\1\u03a2\1\u0197\1\0\24\374\2\0\1\374\5\0\1\374"+
    "\12\0\3\374\1\0\2\374\1\0\2\374\1\u0197\1\0"+
    "\2\374\1\u03a3\21\374\2\0\1\374\5\0\1\374\12\0"+
    "\3\374\1\0\2\374\1\0\2\374\1\u0197\1\0\20\374"+
    "\1\u03a4\3\374\2\0\1\374\5\0\1\374\12\0\3\374"+
    "\1\0\2\374\1\0\2\374\1\u0197\1\0\7\374\1\u03a5"+
    "\14\374\2\0\1\374\5\0\1\374\12\0\3\374\1\0"+
    "\2\374\1\0\2\374\1\u0197\1\0\15\374\1\u03a6\6\374"+
    "\2\0\1\374\5\0\1\374\45\0\1\u03a7\62\0\1\u03a8"+
    "\60\0\1\u03a9\60\0\1\u03aa\55\0\1\u03ab\65\0\1\u03ac"+
    "\60\0\1\u03ad\60\0\1\u03ae\31\0\3\246\1\0\2\246"+
    "\1\0\2\246\1\u0164\1\0\20\246\1\u03af\3\246\2\0"+
    "\1\246\5\0\1\246\12\0\3\246\1\0\2\246\1\0"+
    "\2\246\1\u0164\1\0\21\246\1\u03b0\2\246\2\0\1\246"+
    "\5\0\1\246\12\0\3\246\1\0\2\246\1\0\2\246"+
    "\1\u0164\1\0\2\246\1\u03b1\21\246\2\0\1\246\5\0"+
    "\1\246\12\0\3\246\1\0\2\246\1\0\2\246\1\u0164"+
    "\1\0\15\246\1\u03b2\6\246\2\0\1\246\5\0\1\246"+
    "\27\0\1\u03b3\105\0\1\u03b4\61\0\1\u03b5\20\0\3\u018b"+
    "\1\0\2\u018b\1\0\2\u018b\1\u018c\1\0\15\u018b\1\u037b"+
    "\6\u018b\2\0\1\u018b\5\0\1\u018b\12\0\3\u018b\1\0"+
    "\2\u018b\1\0\2\u018b\1\u018c\1\0\12\u018b\1\u03b6\11\u018b"+
    "\2\0\1\u018b\5\0\1\u018b\12\0\3\u018b\1\0\2\u018b"+
    "\1\0\2\u018b\1\u018c\1\0\21\u018b\1\u03b7\2\u018b\2\0"+
    "\1\u018b\5\0\1\u018b\12\0\3\u018b\1\0\2\u018b\1\0"+
    "\1\u018b\1\u03b8\1\u018c\1\0\24\u018b\2\0\1\u018b\5\0"+
    "\1\u018b\12\0\3\374\1\0\2\374\1\0\2\374\1\u0197"+
    "\1\0\20\374\1\u03b9\3\374\2\0\1\374\5\0\1\374"+
    "\12\0\3\374\1\0\2\374\1\0\2\374\1\u0197\1\0"+
    "\21\374\1\u03ba\2\374\2\0\1\374\5\0\1\374\12\0"+
    "\3\374\1\0\2\374\1\0\2\374\1\u0197\1\0\2\374"+
    "\1\u03bb\21\374\2\0\1\374\5\0\1\374\12\0\3\374"+
    "\1\0\2\374\1\0\2\374\1\u0197\1\0\15\374\1\u03bc"+
    "\6\374\2\0\1\374\5\0\1\374\46\0\1\u03bd\54\0"+
    "\1\u03be\57\0\1\u03bf\63\0\1\u03c0\47\0\1\u03c1\44\0"+
    "\3\246\1\0\2\246\1\0\2\246\1\u0164\1\0\12\246"+
    "\1\u03c2\11\246\2\0\1\246\5\0\1\246\12\0\3\246"+
    "\1\0\2\246\1\0\1\246\1\u03c3\1\u0164\1\0\24\246"+
    "\2\0\1\246\5\0\1\246\12\0\3\246\1\0\2\246"+
    "\1\0\2\246\1\u0164\1\0\11\246\1\u03c4\12\246\2\0"+
    "\1\246\5\0\1\246\12\0\3\246\1\0\2\246\1\0"+
    "\2\246\1\u0164\1\0\3\246\1\u03c5\20\246\2\0\1\246"+
    "\5\0\1\246\36\0\1\u03c6\35\0\3\u018b\1\0\2\u018b"+
    "\1\0\2\u018b\1\u018c\1\0\3\u018b\1\u03c7\20\u018b\2\0"+
    "\1\u018b\5\0\1\u018b\12\0\3\u018b\1\0\2\u018b\1\0"+
    "\1\u018b\1\u03c8\1\u018c\1\0\24\u018b\2\0\1\u018b\5\0"+
    "\1\u018b\12\0\3\u018b\1\0\2\u018b\1\0\2\u018b\1\u018c"+
    "\1\0\17\u018b\1\u03c9\4\u018b\2\0\1\u018b\5\0\1\u018b"+
    "\12\0\3\374\1\0\2\374\1\0\2\374\1\u0197\1\0"+
    "\12\374\1\u03ca\11\374\2\0\1\374\5\0\1\374\12\0"+
    "\3\374\1\0\2\374\1\0\1\374\1\u03cb\1\u0197\1\0"+
    "\24\374\2\0\1\374\5\0\1\374\12\0\3\374\1\0"+
    "\2\374\1\0\2\374\1\u0197\1\0\11\374\1\u03cc\12\374"+
    "\2\0\1\374\5\0\1\374\12\0\3\374\1\0\2\374"+
    "\1\0\2\374\1\u0197\1\0\3\374\1\u03cd\20\374\2\0"+
    "\1\374\5\0\1\374\35\0\1\u03ce\71\0\1\u03cf\51\0"+
    "\1\u03d0\36\0\3\246\1\0\2\246\1\0\2\246\1\u0164"+
    "\1\0\5\246\1\u03d1\16\246\2\0\1\246\5\0\1\246"+
    "\12\0\3\246\1\0\2\246\1\0\2\246\1\u0164\1\0"+
    "\13\246\1\u03d2\10\246\2\0\1\246\5\0\1\246\12\0"+
    "\3\246\1\0\2\246\1\0\2\246\1\u0164\1\0\2\246"+
    "\1\u03d3\21\246\2\0\1\246\5\0\1\246\12\0\3\246"+
    "\1\0\2\246\1\0\2\246\1\u0164\1\0\13\246\1\u03d4"+
    "\10\246\2\0\1\246\5\0\1\246\27\0\1\u03d5\44\0"+
    "\3\u018b\1\0\2\u018b\1\0\1\u018b\1\u03d6\1\u018c\1\0"+
    "\24\u018b\2\0\1\u018b\5\0\1\u018b\12\0\3\u018b\1\0"+
    "\2\u018b\1\0\2\u018b\1\u018c\1\0\17\u018b\1\u03d7\4\u018b"+
    "\2\0\1\u018b\5\0\1\u018b\12\0\3\u018b\1\0\2\u018b"+
    "\1\0\2\u018b\1\u018c\1\0\13\u018b\1\u03d8\10\u018b\2\0"+
    "\1\u018b\5\0\1\u018b\12\0\3\374\1\0\2\374\1\0"+
    "\2\374\1\u0197\1\0\5\374\1\u03d9\16\374\2\0\1\374"+
    "\5\0\1\374\12\0\3\374\1\0\2\374\1\0\2\374"+
    "\1\u0197\1\0\13\374\1\u03da\10\374\2\0\1\374\5\0"+
    "\1\374\12\0\3\374\1\0\2\374\1\0\2\374\1\u0197"+
    "\1\0\2\374\1\u03db\21\374\2\0\1\374\5\0\1\374"+
    "\12\0\3\374\1\0\2\374\1\0\2\374\1\u0197\1\0"+
    "\13\374\1\u03dc\10\374\2\0\1\374\5\0\1\374\33\0"+
    "\1\u03dd\61\0\1\u03de\40\0\3\246\1\0\2\246\1\0"+
    "\2\246\1\u0164\1\0\2\246\1\u03df\21\246\2\0\1\246"+
    "\5\0\1\246\12\0\3\246\1\0\2\246\1\0\2\246"+
    "\1\u0164\1\0\20\246\1\u03e0\3\246\2\0\1\246\5\0"+
    "\1\246\12\0\3\246\1\0\2\246\1\0\2\246\1\u0164"+
    "\1\0\20\246\1\u03e1\3\246\2\0\1\246\5\0\1\246"+
    "\12\0\3\246\1\0\2\246\1\0\2\246\1\u0164\1\0"+
    "\22\246\1\u03e2\1\246\2\0\1\246\5\0\1\246\45\0"+
    "\1\u03e3\26\0\3\u018b\1\0\2\u018b\1\0\2\u018b\1\u018c"+
    "\1\0\17\u018b\1\u03e4\4\u018b\2\0\1\u018b\5\0\1\u018b"+
    "\12\0\3\u018b\1\0\2\u018b\1\0\2\u018b\1\u018c\1\0"+
    "\13\u018b\1\u03e5\10\u018b\2\0\1\u018b\5\0\1\u018b\12\0"+
    "\3\u018b\1\0\2\u018b\1\0\2\u018b\1\u018c\1\0\22\u018b"+
    "\1\u03e6\1\u018b\2\0\1\u018b\5\0\1\u018b\12\0\3\374"+
    "\1\0\2\374\1\0\2\374\1\u0197\1\0\2\374\1\u03e7"+
    "\21\374\2\0\1\374\5\0\1\374\12\0\3\374\1\0"+
    "\2\374\1\0\2\374\1\u0197\1\0\20\374\1\u03e8\3\374"+
    "\2\0\1\374\5\0\1\374\12\0\3\374\1\0\2\374"+
    "\1\0\2\374\1\u0197\1\0\20\374\1\u03e9\3\374\2\0"+
    "\1\374\5\0\1\374\12\0\3\374\1\0\2\374\1\0"+
    "\2\374\1\u0197\1\0\22\374\1\u03ea\1\374\2\0\1\374"+
    "\5\0\1\374\27\0\1\u03eb\61\0\1\u03ec\44\0\3\246"+
    "\1\0\2\246\1\0\2\246\1\u0164\1\0\17\246\1\u03ed"+
    "\4\246\2\0\1\246\5\0\1\246\12\0\3\246\1\0"+
    "\2\246\1\0\2\246\1\u0164\1\0\15\246\1\u03ee\6\246"+
    "\2\0\1\246\5\0\1\246\12\0\3\246\1\0\2\246"+
    "\1\0\2\246\1\u0164\1\0\1\246\1\u03ef\22\246\2\0"+
    "\1\246\5\0\1\246\42\0\1\u03f0\31\0\3\u018b\1\0"+
    "\2\u018b\1\0\2\u018b\1\u018c\1\0\2\u018b\1\u03f1\21\u018b"+
    "\2\0\1\u018b\5\0\1\u018b\12\0\3\u018b\1\0\2\u018b"+
    "\1\0\2\u018b\1\u018c\1\0\22\u018b\1\u03f2\1\u018b\2\0"+
    "\1\u018b\5\0\1\u018b\12\0\3\u018b\1\0\2\u018b\1\0"+
    "\2\u018b\1\u018c\1\0\7\u018b\1\u03f3\14\u018b\2\0\1\u018b"+
    "\5\0\1\u018b\12\0\3\374\1\0\2\374\1\0\2\374"+
    "\1\u0197\1\0\17\374\1\u03f4\4\374\2\0\1\374\5\0"+
    "\1\374\12\0\3\374\1\0\2\374\1\0\2\374\1\u0197"+
    "\1\0\15\374\1\u03f5\6\374\2\0\1\374\5\0\1\374"+
    "\12\0\3\374\1\0\2\374\1\0\2\374\1\u0197\1\0"+
    "\1\374\1\u03f6\22\374\2\0\1\374\5\0\1\374\44\0"+
    "\1\u03f7\27\0\3\246\1\0\2\246\1\0\2\246\1\u0164"+
    "\1\0\15\246\1\u03f8\6\246\2\0\1\246\5\0\1\246"+
    "\12\0\3\246\1\0\2\246\1\0\2\246\1\u0164\1\0"+
    "\15\246\1\u03f9\6\246\2\0\1\246\5\0\1\246\12\0"+
    "\3\u018b\1\0\2\u018b\1\0\2\u018b\1\u018c\1\0\7\u018b"+
    "\1\u03fa\14\u018b\2\0\1\u018b\5\0\1\u018b\12\0\3\u018b"+
    "\1\0\2\u018b\1\0\2\u018b\1\u018c\1\0\7\u018b\1\u03fb"+
    "\14\u018b\2\0\1\u018b\5\0\1\u018b\12\0\3\u018b\1\0"+
    "\2\u018b\1\0\2\u018b\1\u018c\1\0\13\u018b\1\u03fc\10\u018b"+
    "\2\0\1\u018b\5\0\1\u018b\12\0\3\374\1\0\2\374"+
    "\1\0\2\374\1\u0197\1\0\15\374\1\u03fd\6\374\2\0"+
    "\1\374\5\0\1\374\12\0\3\374\1\0\2\374\1\0"+
    "\2\374\1\u0197\1\0\15\374\1\u03fe\6\374\2\0\1\374"+
    "\5\0\1\374\12\0\3\246\1\0\2\246\1\0\2\246"+
    "\1\u0164\1\0\3\246\1\u03ff\20\246\2\0\1\246\5\0"+
    "\1\246\12\0\3\246\1\0\2\246\1\0\2\246\1\u0164"+
    "\1\0\2\246\1\u0400\21\246\2\0\1\246\5\0\1\246"+
    "\12\0\3\u018b\1\0\2\u018b\1\0\2\u018b\1\u018c\1\0"+
    "\23\u018b\1\u0401\2\0\1\u018b\5\0\1\u018b\12\0\3\u018b"+
    "\1\0\2\u018b\1\0\2\u018b\1\u018c\1\0\13\u018b\1\u0402"+
    "\10\u018b\2\0\1\u018b\5\0\1\u018b\12\0\3\u018b\1\0"+
    "\2\u018b\1\0\2\u018b\1\u018c\1\0\20\u018b\1\u0403\3\u018b"+
    "\2\0\1\u018b\5\0\1\u018b\12\0\3\374\1\0\2\374"+
    "\1\0\2\374\1\u0197\1\0\3\374\1\u0404\20\374\2\0"+
    "\1\374\5\0\1\374\12\0\3\374\1\0\2\374\1\0"+
    "\2\374\1\u0197\1\0\2\374\1\u0405\21\374\2\0\1\374"+
    "\5\0\1\374\12\0\3\246\1\0\2\246\1\0\2\246"+
    "\1\u0164\1\0\1\246\1\u0406\22\246\2\0\1\246\5\0"+
    "\1\246\12\0\3\u018b\1\0\2\u018b\1\0\2\u018b\1\u018c"+
    "\1\0\20\u018b\1\u0407\3\u018b\2\0\1\u018b\5\0\1\u018b"+
    "\12\0\3\u018b\1\0\2\u018b\1\0\2\u018b\1\u018c\1\0"+
    "\21\u018b\1\u0408\2\u018b\2\0\1\u018b\5\0\1\u018b\12\0"+
    "\3\374\1\0\2\374\1\0\2\374\1\u0197\1\0\1\374"+
    "\1\u0409\22\374\2\0\1\374\5\0\1\374\12\0\3\246"+
    "\1\0\2\246\1\0\2\246\1\u0164\1\0\6\246\1\u040a"+
    "\15\246\2\0\1\246\5\0\1\246\12\0\3\u018b\1\0"+
    "\2\u018b\1\0\2\u018b\1\u018c\1\0\21\u018b\1\u039e\2\u018b"+
    "\2\0\1\u018b\5\0\1\u018b\12\0\3\374\1\0\2\374"+
    "\1\0\2\374\1\u0197\1\0\6\374\1\u040b\15\374\2\0"+
    "\1\374\5\0\1\374\12\0\3\246\1\0\2\246\1\0"+
    "\2\246\1\u0164\1\0\15\246\1\u040c\6\246\2\0\1\246"+
    "\5\0\1\246\12\0\3\374\1\0\2\374\1\0\2\374"+
    "\1\u0197\1\0\15\374\1\u040d\6\374\2\0\1\374\5\0"+
    "\1\374\12\0\3\246\1\0\2\246\1\0\2\246\1\u0164"+
    "\1\0\13\246\1\u040e\10\246\2\0\1\246\5\0\1\246"+
    "\12\0\3\374\1\0\2\374\1\0\2\374\1\u0197\1\0"+
    "\13\374\1\u040f\10\374\2\0\1\374\5\0\1\374\12\0"+
    "\3\246\1\0\2\246\1\0\2\246\1\u0164\1\0\12\246"+
    "\1\u0410\11\246\2\0\1\246\5\0\1\246\12\0\3\374"+
    "\1\0\2\374\1\0\2\374\1\u0197\1\0\12\374\1\u0411"+
    "\11\374\2\0\1\374\5\0\1\374\12\0\3\246\1\0"+
    "\2\246\1\0\2\246\1\u0164\1\0\20\246\1\u0412\3\246"+
    "\2\0\1\246\5\0\1\246\12\0\3\374\1\0\2\374"+
    "\1\0\2\374\1\u0197\1\0\20\374\1\u0413\3\374\2\0"+
    "\1\374\5\0\1\374\10\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[42750];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\152\0\1\11\10\1\1\11\5\1\1\11\3\1\1\11"+
    "\12\1\1\11\24\1\3\11\3\1\1\11\14\1\4\11"+
    "\2\1\1\11\1\1\1\11\1\1\4\11\7\1\2\11"+
    "\1\1\1\11\2\1\1\11\2\1\1\11\4\1\1\11"+
    "\4\1\1\11\2\1\1\11\2\1\1\11\2\1\1\11"+
    "\1\1\2\11\5\1\2\11\13\1\2\11\1\1\1\11"+
    "\15\1\1\11\16\1\2\11\3\1\1\11\10\1\5\11"+
    "\3\1\2\11\3\1\1\11\1\1\5\0\3\11\2\0"+
    "\2\11\27\0\1\11\11\0\2\1\1\0\12\1\5\0"+
    "\1\11\3\0\1\11\4\0\1\11\4\0\1\11\2\0"+
    "\1\11\2\0\1\1\1\0\1\11\1\1\1\0\12\1"+
    "\2\0\12\1\4\0\1\1\1\11\3\0\1\11\7\0"+
    "\4\11\1\1\50\0\13\1\2\0\1\1\1\0\1\11"+
    "\2\0\1\11\12\0\1\11\1\0\1\1\1\0\14\1"+
    "\1\11\12\1\3\0\2\11\60\0\12\1\4\0\3\11"+
    "\1\0\1\11\3\0\1\11\3\0\24\1\44\0\1\11"+
    "\1\0\2\11\12\0\1\11\6\1\3\0\1\11\6\0"+
    "\17\1\1\11\1\0\3\11\2\0\2\11\3\0\1\11"+
    "\1\0\2\11\11\0\1\11\16\0\2\11\5\0\6\1"+
    "\6\0\1\11\1\0\1\11\15\1\4\0\2\11\1\0"+
    "\2\11\2\0\1\11\11\0\1\11\1\0\1\11\5\0"+
    "\1\11\1\0\1\11\2\0\6\1\1\11\4\0\1\11"+
    "\1\0\15\1\5\0\1\11\3\0\2\11\1\0\1\11"+
    "\1\0\1\11\3\0\2\11\1\0\1\11\2\0\1\11"+
    "\5\1\4\0\1\11\13\1\2\0\1\11\1\0\2\11"+
    "\2\0\1\11\3\0\4\11\5\1\2\0\1\11\1\0"+
    "\13\1\1\0\2\11\4\0\1\11\4\1\1\0\2\11"+
    "\7\1\1\11\3\0\1\11\4\1\1\0\7\1\1\0"+
    "\1\11\1\0\4\1\1\0\7\1\2\0\4\1\1\0"+
    "\7\1\1\0\1\11\3\1\1\11\6\1\1\11\34\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[1043];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */


  _XQueryLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _XQueryLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1332) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 96: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { yybegin(_WILDCARD_QNAME_); return XQ_PREFIX_NAME;
          }
        case 189: break;
        case 1: 
          { yybegin(YYINITIAL); return BAD_CHARACTER;
          }
        case 190: break;
        case 174: 
          { yybegin(_URILITERAL); return KW_COLLATION;
          }
        case 191: break;
        case 186: 
          { pushState(_AS_OCC); pushState(_CLOSE_BRACE); pushState(_QNAME); yybegin(_OPEN_BRACE);  return KW_SCHEMA_ATTRIBUTE;
          }
        case 192: break;
        case 166: 
          { pushState(_SEP); pushState(_ATLIST); yybegin(NAMESPACEDECL); return KW_NAMESPACE;
          }
        case 193: break;
        case 130: 
          { pushState(_SEP); pushState(_STRINGLITERAL); yybegin(_QNAME); return KW_OPTION;
          }
        case 194: break;
        case 90: 
          { pushState(_PREDICATE_LIST);  yypushback(yylength()); pushState(_OPT_EXPR_LIST_IN_BRACE); yybegin(_QNAME);
          }
        case 195: break;
        case 169: 
          { yybegin(_EXPR_SINGLE); return KW_SATISFIES;
          }
        case 196: break;
        case 136: 
          { yybegin(_DECLARE); return KW_DECLARE;
          }
        case 197: break;
        case 148: 
          { pushState(_PREDICATE_LIST); yybegin(_EXPR_LIST_IN_CURLY); return KW_ORDERED;
          }
        case 198: break;
        case 185: 
          { yybegin(_DECLARE_COPYNS); return KW_COPY_NAMESPACES;
          }
        case 199: break;
        case 12: 
          { yybegin(_URILITERAL); return OP_EQUALS;
          }
        case 200: break;
        case 24: 
          { yypushback(yylength()); pushState(_AS_AorE_); yybegin(_QNAME);
          }
        case 201: break;
        case 163: 
          { pushState(_SEP); yybegin(NAMESPACEDECL); return KW_NAMESPACE;
          }
        case 202: break;
        case 105: 
          { pushState(_AS_OCC); yybegin(_EMPTY_BRACES); return KW_ITEM;
          }
        case 203: break;
        case 80: 
          { return XQ_STR_ESCAPE_APOS;
          }
        case 204: break;
        case 41: 
          { yypushback(1); pushState(_TYPESWITCH_EXPR_RETURN); yybegin(_VARNAME);
          }
        case 205: break;
        case 175: 
          { yybegin(_SEP); return KW_NO_INHERIT;
          }
        case 206: break;
        case 30: 
          { pushState(_EXPR_LIST); yybegin(_EXPR_SINGLE); return OP_COMMA;
          }
        case 207: break;
        case 51: 
          { yybegin(_PREDICATE_LIST);  return OP_DOT;
          }
        case 208: break;
        case 188: 
          { pushState(_AS_OCC); pushState(_AS_PI); yybegin(_OPEN_BRACE); return KW_PROCESSING_INSTRUCTION;
          }
        case 209: break;
        case 183: 
          { pushState(_AS_OCC); pushState(_CLOSE_BRACE); pushState(_QNAME); yybegin(_OPEN_BRACE); return KW_SCHEMA_ELEMENT;
          }
        case 210: break;
        case 22: 
          { pushState(_CLOSE_BRACE); yypushback(yylength()); yybegin(_NCNAME);
          }
        case 211: break;
        case 119: 
          { pushState(_QUANT_EXPR_IN); yybegin(_PARAM); return KW_EVERY;
          }
        case 212: break;
        case 122: 
          { pushState(_FLWOR_BODY2); yypushback(yylength()); yybegin(_WHERE_CLAUSE);
          }
        case 213: break;
        case 123: 
          { yybegin(_EXPR_SINGLE); return KW_WHERE;
          }
        case 214: break;
        case 143: 
          { yybegin(_IMPORT_SCHEMA_DEFAULT_ELEMENT); return KW_ELEMENT;
          }
        case 215: break;
        case 118: 
          { yybegin(_SEP); return KW_STRIP;
          }
        case 216: break;
        case 85: 
          { yybegin(_IF_EXPR_); return KW_IF;
          }
        case 217: break;
        case 134: 
          { yybegin(_VALIDATE_EXPR_); return KW_STRICT;
          }
        case 218: break;
        case 181: 
          { pushState(_AS_OCC); pushState(_AS_DN); yybegin(_OPEN_BRACE); return KW_DOCUMENT_NODE;
          }
        case 219: break;
        case 91: 
          { yybegin(_VARNAME); return KW_AT;
          }
        case 220: break;
        case 164: 
          { pushState(_SEP); yybegin(_URILITERAL); return KW_COLLATION;
          }
        case 221: break;
        case 11: 
          { yybegin(STR_START_APOS); return XQ_STR_START;
          }
        case 222: break;
        case 77: 
          { popState(); return XQ_COMMENT_END;
          }
        case 223: break;
        case 66: 
          { popState(); return OP_RCURLY;
          }
        case 224: break;
        case 168: 
          { pushState(_AS_OCC); pushState(_AS_AorE); yybegin(_OPEN_BRACE); return KW_ATTRIBUTE;
          }
        case 225: break;
        case 33: 
          { yypushback(yylength()); pushState(_CLOSE_BRACE); pushState(_EXPR_LIST); yybegin(_EXPR_SINGLE);
          }
        case 226: break;
        case 42: 
          { yypushback(yylength()); yybegin(_AS_);
          }
        case 227: break;
        case 147: 
          { yybegin(_TYPESWITCH_EXPR_DEFAULT_); return KW_DEFAULT;
          }
        case 228: break;
        case 14: 
          { pushState(_ATLIST_); yybegin(_URILITERAL); return OP_COMMA;
          }
        case 229: break;
        case 59: 
          { pushState(_LET_CLAUSE_); pushState(_LET_CLAUSE_VAR); yybegin(_PARAM); return OP_COMMA;
          }
        case 230: break;
        case 83: 
          { yybegin(_AS_); return KW_AS;
          }
        case 231: break;
        case 104: 
          { pushState(_LET_CLAUSE_); pushState(_LET_CLAUSE_VAR); yybegin(_PARAM); return KW_LET;
          }
        case 232: break;
        case 162: 
          { pushState(_SEP); yybegin(NAMESPACEDECL); return KW_MODULE;
          }
        case 233: break;
        case 182: 
          { yybegin(_PRESERVE_OR_STRIP); return KW_BOUNDARY_SPACE;
          }
        case 234: break;
        case 153: 
          { yybegin(_DECLARE_COPYNS_); return KW_PRESERVE;
          }
        case 235: break;
        case 93: 
          { pushState(_ORDER_CLAUSE_LIST); pushState(_ORDER_CLAUSE_MODIFIER); yybegin(_EXPR_SINGLE); return KW_BY;
          }
        case 236: break;
        case 58: 
          { yybegin(_FOR_CLAUSE); return OP_COMMA;
          }
        case 237: break;
        case 120: 
          { pushState(_PREDICATE_LIST); pushState(_NODE_TEST); yybegin(_COLONCOLON); return KW_CHILD;
          }
        case 238: break;
        case 65: 
          { popState(); return OP_LCURLY;
          }
        case 239: break;
        case 34: 
          { popState(); return OP_RBRACE;
          }
        case 240: break;
        case 61: 
          { yypushback(1); yybegin(_ORDER_CLAUSE_MODIFIER_EMPTY);
          }
        case 241: break;
        case 63: 
          { yybegin(_EMPTY_BRACES_); return OP_LBRACE;
          }
        case 242: break;
        case 39: 
          { yybegin(_TYPESWITCH_EXPR_CASE); return OP_RBRACE;
          }
        case 243: break;
        case 138: 
          { pushState(_XQUERY_VERSION); yybegin(_STRINGLITERAL); return KW_VERSION;
          }
        case 244: break;
        case 81: 
          { yybegin(_EXPR_SINGLE); return OP_ASSIGN;
          }
        case 245: break;
        case 139: 
          { yybegin(_DECLARE_DEFAULT); return KW_DEFAULT;
          }
        case 246: break;
        case 69: 
          { popState(); return OP_COLON;
          }
        case 247: break;
        case 176: 
          { yypushback(yylength()); yybegin(_TYPESWITCH_EXPR);
          }
        case 248: break;
        case 60: 
          { pushState(_ORDER_CLAUSE_LIST); pushState(_ORDER_CLAUSE_MODIFIER); yybegin(_EXPR_SINGLE); return OP_COMMA;
          }
        case 249: break;
        case 103: 
          { pushState(_FOR_CLAUSE_VAR_IN); pushState(_FOR_CLAUSE_VAR_POS); yybegin(_PARAM); return KW_FOR;
          }
        case 250: break;
        case 35: 
          { pushState(_IF_EXPR__); pushState(_EXPR_LIST); yybegin(_EXPR_SINGLE); return OP_LBRACE;
          }
        case 251: break;
        case 95: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { yybegin(_QNAME_); return XQ_PREFIX_NAME;
          }
        case 252: break;
        case 158: 
          { yybegin(_VALIDATE_EXPR_X); return KW_VALIDATE;
          }
        case 253: break;
        case 172: 
          { pushState(_PREDICATE_LIST); pushState(_NODE_TEST); yybegin(_COLONCOLON); return KW_FOLLOWING;
          }
        case 254: break;
        case 64: 
          { popState(); return OP_LBRACE;
          }
        case 255: break;
        case 47: 
          { popState(); return OP_SLASH;
          }
        case 256: break;
        case 121: 
          { pushState(_FLWOR_BODY3); yypushback(yylength()); yybegin(_ORDER_CLAUSE);
          }
        case 257: break;
        case 97: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { yybegin(_QNAME_); return OP_STAR;
          }
        case 258: break;
        case 8: 
          { yybegin(YYINITIAL); return OP_SEPERATOR;
          }
        case 259: break;
        case 67: 
          { popState(); return OP_RSQUARE;
          }
        case 260: break;
        case 151: 
          { pushState(_SEP); pushState(_DECLARE_VARIABLE); yybegin(_PARAM); return KW_VARIABLE;
          }
        case 261: break;
        case 125: 
          { yybegin(_ORDER_CLAUSE_MODIFIER_EMPTY_); return KW_EMPTY;
          }
        case 262: break;
        case 4: 
          { return XQ_COMMENT_CHAR;
          }
        case 263: break;
        case 156: 
          { popState(); return KW_EXTERNAL;
          }
        case 264: break;
        case 36: 
          { yybegin(_IF_EXPR_THEN); return OP_RBRACE;
          }
        case 265: break;
        case 53: 
          { pushState(_PREDICATE_LIST); yypushback(1); yybegin(_STRINGLITERAL);
          }
        case 266: break;
        case 20: 
          { popState(); return OP_QUESTION;
          }
        case 267: break;
        case 73: 
          { yybegin(_QNAME_LOCAL); return OP_COLON;
          }
        case 268: break;
        case 117: 
          { yybegin(_SEP); return KW_LEAST;
          }
        case 269: break;
        case 106: 
          { pushState(_AS_OCC); yybegin(_EMPTY_BRACES); return KW_TEXT;
          }
        case 270: break;
        case 82: 
          { pushState(_ATLIST_); yybegin(_URILITERAL); return KW_AT;
          }
        case 271: break;
        case 32: 
          { yybegin(_EXPR_LIST_OR_RBRACE); return OP_LBRACE;
          }
        case 272: break;
        case 28: 
          { yypushback(yylength()); yybegin(_INSTANCEOF_EXPR);
          }
        case 273: break;
        case 160: 
          { yybegin(_ORDER_CLAUSE_MODIFIER_COLLATION); return KW_GREATEST;
          }
        case 274: break;
        case 129: 
          { yybegin(_IMPORT); return KW_IMPORT;
          }
        case 275: break;
        case 29: 
          { yypushback(1); popState();
          }
        case 276: break;
        case 49: 
          { yypushback(yylength()); pushState(_PREDICATE_LIST); yybegin(_NODE_TEST);
          }
        case 277: break;
        case 89: 
          { pushState(_PREDICATE_LIST); pushState(_NODE_TEST); yybegin(_COLONCOLON); return KW_FOLLOWING_SIBLING;
          }
        case 278: break;
        case 141: 
          { yybegin(_DECLARE_DEFAULT_NAMESPACE); return KW_ELEMENT;
          }
        case 279: break;
        case 3: 
          { return XQ_INTEGER_LITERAL;
          }
        case 280: break;
        case 167: 
          { pushState(_SEP); pushState(_ATLIST); yybegin(_URILITERAL); return KW_NAMESPACE;
          }
        case 281: break;
        case 99: 
          { pushState(_FLWOR_HEAD); yypushback(yylength()); yybegin(_LET_CLAUSE);
          }
        case 282: break;
        case 17: 
          { popState(); yypushback(1);
          }
        case 283: break;
        case 98: 
          { return XQ_DOUBLE_LITERAL;
          }
        case 284: break;
        case 155: 
          { yybegin(_SEP); return KW_GREATEST;
          }
        case 285: break;
        case 40: 
          { yypushback(yylength()); yybegin(_TYPESWITCH_EXPR_RETURN);
          }
        case 286: break;
        case 170: 
          { pushState(_PREDICATE_LIST); yybegin(_EXPR_LIST_IN_CURLY); return KW_UNORDERED;
          }
        case 287: break;
        case 71: 
          { popState(); return XQ_LOCAL_NAME;
          }
        case 288: break;
        case 86: 
          { pushState(_QUANT_EXPR_SATISFIES); yybegin(_EXPR_SINGLE); return KW_IN;
          }
        case 289: break;
        case 187: 
          { pushState(_PREDICATE_LIST); pushState(_NODE_TEST); yybegin(_COLONCOLON); return KW_DESCENDANT_OR_SELF;
          }
        case 290: break;
        case 137: 
          { yybegin(_SEP); return KW_ORDERED;
          }
        case 291: break;
        case 111: 
          { yybegin(_EXPR_SINGLE); return KW_ELSE;
          }
        case 292: break;
        case 21: 
          { yypushback(1); yybegin(_CLOSE_BRACE);
          }
        case 293: break;
        case 154: 
          { yybegin(_DECLARE_DEFAULT_NAMESPACE); return KW_FUNCTION;
          }
        case 294: break;
        case 150: 
          { yybegin(DECLAREORDERING); return KW_ORDERING;
          }
        case 295: break;
        case 140: 
          { yybegin(_SEP); return KW_INHERIT;
          }
        case 296: break;
        case 179: 
          { yybegin(_DECLARE_COPYNS_); return KW_NO_PRESERVE;
          }
        case 297: break;
        case 50: 
          { yybegin(_PREDICATE_LIST); return XQ_INTEGER_LITERAL;
          }
        case 298: break;
        case 57: 
          { pushState(_PREDICATE_LIST); pushState(_CLOSE_SQUARE); pushState(_EXPR_LIST); yybegin(_EXPR_SINGLE); return OP_LSQUARE;
          }
        case 299: break;
        case 23: 
          { pushState(_CLOSE_BRACE); yypushback(1); yybegin(_STRINGLITERAL);
          }
        case 300: break;
        case 131: 
          { yybegin(_IMPORT_MODULE); return KW_MODULE;
          }
        case 301: break;
        case 74: 
          { yybegin(_WILDCARD_QNAME_LOCAL); return OP_COLON;
          }
        case 302: break;
        case 135: 
          { yybegin(_ORDER_CLAUSE); return KW_STABLE;
          }
        case 303: break;
        case 68: 
          { yybegin(_QNAME); return OP_VARSTART;
          }
        case 304: break;
        case 110: 
          { pushState(_IF_EXPR_ELSE); yybegin(_EXPR_SINGLE); return KW_THEN;
          }
        case 305: break;
        case 5: 
          { yybegin(_NAMESPACEDECL_); return XQ_LOCAL_NAME;
          }
        case 306: break;
        case 114: 
          { pushState(_PREDICATE_LIST); pushState(_NODE_TEST); yybegin(_COLONCOLON); return KW_SELF;
          }
        case 307: break;
        case 26: 
          { pushState(_AS_AorE__); yybegin(_QNAME); return OP_COMMA;
          }
        case 308: break;
        case 87: 
          { popState(); return OP_SLASHSLASH;
          }
        case 309: break;
        case 184: 
          { pushState(_CLOSE_BRACE); pushState(_CLOSE_BRACE); pushState(_QNAME); yybegin(_OPEN_BRACE); return KW_SCHEMA_ELEMENT;
          }
        case 310: break;
        case 173: 
          { return KW_ASCENDING;
          }
        case 311: break;
        case 76: 
          { pushState(); yybegin(EXPR_COMMENT); return XQ_COMMENT_START;
          }
        case 312: break;
        case 115: 
          { yybegin(_DECLARE_DEFAULT_ORDER); return KW_ORDER;
          }
        case 313: break;
        case 75: 
          { return XQ_DECIMAL_LITERAL;
          }
        case 314: break;
        case 108: 
          { pushState(_AS_OCC); yybegin(_EMPTY_BRACES); return KW_NODE;
          }
        case 315: break;
        case 18: 
          { popState(); return OP_PLUS;
          }
        case 316: break;
        case 161: 
          { yybegin(_SEP); return KW_UNORDERED;
          }
        case 317: break;
        case 126: 
          { yybegin(_ORDER_CLAUSE_MODIFIER_COLLATION); return KW_LEAST;
          }
        case 318: break;
        case 44: 
          { yypushback(yylength()); yybegin(_STEP_EXPR);
          }
        case 319: break;
        case 145: 
          { pushState(_AS_OCC); yybegin(_EMPTY_BRACES); return KW_COMMENT;
          }
        case 320: break;
        case 146: 
          { pushState(_CLOSE_BRACE); pushState(_AS_AorE); yybegin(_OPEN_BRACE); return KW_ELEMENT;
          }
        case 321: break;
        case 178: 
          { return KW_DESCENDING;
          }
        case 322: break;
        case 109: 
          { yypushback(yylength()); yybegin(_QUANT_EXPR);
          }
        case 323: break;
        case 113: 
          { pushState(_TYPESWITCH_EXPR_CASE2); pushState(_TYPESWITCH_EXPR_RETURN); yybegin(_TYPESWITCH_EXPR_CASE_); return KW_CASE;
          }
        case 324: break;
        case 116: 
          { yybegin(_DECLARE_DEFAULT_ORDER_EMPTY); return KW_EMPTY;
          }
        case 325: break;
        case 180: 
          { yybegin(_PRESERVE_OR_STRIP); return KW_CONSTRUCTION;
          }
        case 326: break;
        case 100: 
          { pushState(_FLWOR_HEAD); yypushback(yylength()); yybegin(_FOR_CLAUSE);
          }
        case 327: break;
        case 43: 
          { yypushback(1); pushState(_TYPESWITCH_EXPR_CASE_AS); yybegin(_VARNAME);
          }
        case 328: break;
        case 79: 
          { return XQ_STR_ESCAPE_QUOTE;
          }
        case 329: break;
        case 152: 
          { pushState(_SEP); yybegin(_URILITERAL); return KW_BASE_URI;
          }
        case 330: break;
        case 88: 
          { yybegin(_PREDICATE_LIST); return XQ_DECIMAL_LITERAL;
          }
        case 331: break;
        case 72: 
          { popState(); return BAD_CHARACTER;
          }
        case 332: break;
        case 55: 
          { pushState(_PREDICATE_LIST); yybegin(_NODE_TEST); return OP_AT;
          }
        case 333: break;
        case 78: 
          { pushState(); return XQ_COMMENT_START;
          }
        case 334: break;
        case 46: 
          { return OP_MINUS;
          }
        case 335: break;
        case 144: 
          { pushState(_AS_OCC); pushState(_AS_AorE); yybegin(_OPEN_BRACE); return KW_ELEMENT;
          }
        case 336: break;
        case 27: 
          { yybegin(_CLOSE_BRACE); return OP_QUESTION;
          }
        case 337: break;
        case 159: 
          { pushState(_PREDICATE_LIST); pushState(_NODE_TEST); yybegin(_COLONCOLON); return KW_DESCENDANT;
          }
        case 338: break;
        case 25: 
          { yybegin(_AS_AorE_); return OP_STAR;
          }
        case 339: break;
        case 70: 
          { popState(); return XQ_NCNAME;
          }
        case 340: break;
        case 171: 
          { pushState(_PREDICATE_LIST); pushState(_NODE_TEST); yybegin(_COLONCOLON); return KW_ATTRIBUTE;
          }
        case 341: break;
        case 157: 
          { yybegin(_SEP); return KW_PRESERVE;
          }
        case 342: break;
        case 128: 
          { yybegin(_MODULE); return KW_MODULE;
          }
        case 343: break;
        case 177: 
          { yybegin(_TYPESWITCH_EXPR_); return KW_TYPESWITCH;
          }
        case 344: break;
        case 84: 
          { yypushback(yylength()); yybegin(_IF_EXPR);
          }
        case 345: break;
        case 2: 
          { return WHITE_SPACE;
          }
        case 346: break;
        case 62: 
          { yypushback(1); yybegin(_ORDER_CLAUSE_MODIFIER_COLLATION);
          }
        case 347: break;
        case 9: 
          { yybegin(_DECLARE_COPYNS__); return OP_COMMA;
          }
        case 348: break;
        case 132: 
          { yybegin(_IMPORT_SCHEMA); return KW_SCHEMA;
          }
        case 349: break;
        case 19: 
          { popState(); return OP_STAR;
          }
        case 350: break;
        case 31: 
          { pushState(_CLOSE_CURLY); pushState(_EXPR_LIST); yybegin(_EXPR_SINGLE); return OP_LCURLY;
          }
        case 351: break;
        case 6: 
          { return XQ_STR_CHAR;
          }
        case 352: break;
        case 37: 
          { pushState(_QUANT_EXPR_LIST); pushState(_QUANT_EXPR_IN); yybegin(_PARAM); return OP_COMMA;
          }
        case 353: break;
        case 54: 
          { pushState(_PREDICATE_LIST); yybegin(_EXPR_LIST_OR_RBRACE); return OP_LBRACE;
          }
        case 354: break;
        case 45: 
          { return OP_PLUS;
          }
        case 355: break;
        case 149: 
          { pushState(_SEP); yybegin(_STRINGLITERAL); return KW_ENCODING;
          }
        case 356: break;
        case 52: 
          { pushState(_PREDICATE_LIST); yypushback(1); yybegin(_VARNAME);
          }
        case 357: break;
        case 142: 
          { yybegin(_IMPORT_SCHEMA_DEFAULT); return KW_DEFAULT;
          }
        case 358: break;
        case 133: 
          { yybegin(_EXPR_SINGLE); return KW_RETURN;
          }
        case 359: break;
        case 7: 
          { popState(); return XQ_STR_END;
          }
        case 360: break;
        case 13: 
          { yypushback(yylength()); popState();
          }
        case 361: break;
        case 101: 
          { yybegin(_VALIDATE_EXPR_); return KW_LAX;
          }
        case 362: break;
        case 94: 
          { popState(); return OP_COLONCOLON;
          }
        case 363: break;
        case 15: 
          { yypushback(1); pushState(_AS); yybegin(_VARNAME);
          }
        case 364: break;
        case 124: 
          { yybegin(_ORDER_CLAUSE_BY); return KW_ORDER;
          }
        case 365: break;
        case 102: 
          { yybegin(_PREDICATE_LIST); return XQ_DOUBLE_LITERAL;
          }
        case 366: break;
        case 16: 
          { yypushback(yylength()); pushState(_AS_OCC); yybegin(_QNAME);
          }
        case 367: break;
        case 38: 
          { pushState(_TYPESWITCH_EXPR__); pushState(_EXPR_LIST); yybegin(_EXPR_SINGLE); return OP_LBRACE;
          }
        case 368: break;
        case 112: 
          { pushState(_QUANT_EXPR_IN); yybegin(_PARAM); return KW_SOME;
          }
        case 369: break;
        case 107: 
          { yybegin(_EMPTY_BRACES); return KW_VOID;
          }
        case 370: break;
        case 10: 
          { yybegin(STR_START_QUOTE); return XQ_STR_START;
          }
        case 371: break;
        case 56: 
          { yypushback(yylength()); yybegin(_WILDCARD_QNAME);
          }
        case 372: break;
        case 127: 
          { yybegin(_XQUERY); return KW_XQUERY;
          }
        case 373: break;
        case 165: 
          { pushState(_SEP); yybegin(_URILITERAL); return KW_NAMESPACE;
          }
        case 374: break;
        case 92: 
          { yybegin(_EXPR_SINGLE); return KW_IN;
          }
        case 375: break;
        case 48: 
          { 
          }
        case 376: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
