/* The following code was generated by JFlex 1.4.3 on 11/04/11 17:46 */

package org.mn.plug.idea.xq4idea.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

// this lexer follows the principles set out in http://www.w3.org/TR/xquery-xpath-parsing/
/**
 * Generated lexer
 */
@SuppressWarnings({"UnusedDeclaration", "UnusedAssignment", "FieldCanBeLocal", "AccessStaticViaInstance", "JavaDoc", "ConstantConditions"})

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 11/04/11 17:46 from the specification file
 * <tt>/home/matt/projects/opensource/github/xq4idea/source/xq4idea/src/org/mn/plug/idea/xq4idea/lang/lexer/_XQueryLexer.flex</tt>
 */
class _XQueryLexer extends AbstractLexer implements FlexLexer, XQueryTokenTypes {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int _WILDCARD_QNAME_ = 318;
  public static final int _QNAME = 308;
  public static final int _RANGE_EXPR = 150;
  public static final int _XML_TAG_NAME = 254;
  public static final int _PREDICATE_LIST = 192;
  public static final int _ORDER_CLAUSE_BY = 224;
  public static final int _ORDER_CLAUSE_MODIFIER_EMPTY = 230;
  public static final int _QNAME_LOCAL = 314;
  public static final int _XML_PI_NAME = 238;
  public static final int _IMPORT_SCHEMA = 46;
  public static final int STR_START_APOS = 12;
  public static final int _UNION_EXPR = 156;
  public static final int _XQUERY = 20;
  public static final int _ORDER_CLAUSE = 222;
  public static final int _OPEN_CURLY = 272;
  public static final int _AS = 68;
  public static final int _DECLARE_VARIABLE = 42;
  public static final int _XQUERY_VERSION = 22;
  public static final int _FORWARD_STEP = 178;
  public static final int _OPEN_BRACE = 268;
  public static final int _ITEM_TYPE_AorE = 82;
  public static final int _ITEM_TYPE_DN = 74;
  public static final int _IMPORT = 44;
  public static final int _ADD_EXPR = 152;
  public static final int _QUANT_EXPR = 118;
  public static final int _EMPTY_BRACES = 264;
  public static final int _IMPORT_MODULE = 52;
  public static final int _DECLARE_DEFAULT_ORDER_EMPTY = 38;
  public static final int _KW_OF = 304;
  public static final int YYINITIAL = 0;
  public static final int _ITEM_TYPE = 70;
  public static final int _PRAGMA_ = 284;
  public static final int _NODE_TEST = 190;
  public static final int _STR_COMMON_CONTENT = 14;
  public static final int _VALIDATE_EXPR = 162;
  public static final int _ITEM_TYPE_PI = 76;
  public static final int _XML_END_TAG = 256;
  public static final int _ATLIST = 62;
  public static final int _LET_CLAUSE = 214;
  public static final int _EMPTY_BRACES_ = 266;
  public static final int _ITEM_TYPE_AorE__ = 86;
  public static final int STR_START_QUOTE = 10;
  public static final int _CAST_AS_EXPR = 182;
  public static final int _FOR_CLAUSE = 202;
  public static final int _EXPR_LIST = 92;
  public static final int _KW_AS = 302;
  public static final int _TREAT_AS_EXPR = 186;
  public static final int _FOR_CLAUSE_VAR = 206;
  public static final int _TYPESWITCH_EXPR_CASE_ = 140;
  public static final int _PARENTHESIZED_EXPR = 176;
  public static final int _ITEM_TYPE_ATTR = 78;
  public static final int _STABLE_ORDER_CLAUSE = 236;
  public static final int _FOR_CLAUSE_ = 204;
  public static final int _PATH_EXPR = 170;
  public static final int _PRAGMA_CONTENT = 286;
  public static final int _COLON = 296;
  public static final int _IMPORT_SCHEMA_DEFAULT = 48;
  public static final int _TYPESWITCH_EXPR_ = 128;
  public static final int _ITEM_TYPE_AorE_ = 84;
  public static final int _FOR_CLAUSE_VAR_POS = 208;
  public static final int _ORDER_CLAUSE_LIST = 226;
  public static final int _CLOSE_CURLY = 274;
  public static final int _TYPESWITCH_EXPR_DEFAULT = 132;
  public static final int _TYPESWITCH_EXPR_CASE2 = 138;
  public static final int _NCNAME = 306;
  public static final int _STEP_EXPR = 180;
  public static final int _XML_PI_CONTENT = 240;
  public static final int _DECLARE = 26;
  public static final int _ITEM_TYPE_SATTR = 80;
  public static final int _VALUE_EXPR = 160;
  public static final int _TYPESWITCH_EXPR_CASE_AS = 142;
  public static final int _LET_CLAUSE_ = 216;
  public static final int _ITEM_TYPE_OCC = 72;
  public static final int _CLOSE_BRACE = 270;
  public static final int _INTERSECT_EXPR = 158;
  public static final int _XML_ATTR_VALUE = 248;
  public static final int _STRICT_QNAME = 310;
  public static final int _SEP = 290;
  public static final int _MODULE = 24;
  public static final int EXPR_COMMENT = 2;
  public static final int _DECLARE_DEFAULT_NAMESPACE = 40;
  public static final int _ORDER_CLAUSE_MODIFIER = 228;
  public static final int _XML_ELEMENT_CONTENT = 252;
  public static final int _IF_EXPR_ELSE = 116;
  public static final int _EXPR_SINGLE = 90;
  public static final int _DECLARE_COPYNS__ = 32;
  public static final int _NAMESPACEDECL_ = 60;
  public static final int _URILITERAL = 56;
  public static final int _VALIDATE_EXPR_ = 166;
  public static final int _TYPESWITCH_EXPR_CASE = 136;
  public static final int _FOR_CLAUSE_VAR_POS_ = 210;
  public static final int _FILTER_EXPR = 172;
  public static final int _IF_EXPR = 108;
  public static final int _TYPESWITCH_EXPR_DEFAULT_ = 134;
  public static final int _IMPORT_SCHEMA_DEFAULT_ELEMENT = 50;
  public static final int _XML_CDATA_END = 262;
  public static final int _OR_EXPR = 146;
  public static final int _CLOSE_TAG = 280;
  public static final int _PRIMARY_EXPR = 174;
  public static final int _ITEM_TYPE_SELEM = 88;
  public static final int _INSTANCEOF_EXPR = 188;
  public static final int _OPEN_SQUARE = 276;
  public static final int _MULT_EXPR = 154;
  public static final int _EXPR_LIST_IN_CURLY = 94;
  public static final int _LET_CLAUSE_VAR = 218;
  public static final int _VARNAME = 292;
  public static final int _XML_CLOSE_TAG = 258;
  public static final int _XML_ATTRLIST_START = 244;
  public static final int _PRESERVE_OR_STRIP = 54;
  public static final int _CASTABLE_AS_EXPR = 184;
  public static final int _EQUALS = 300;
  public static final int _XML_CDATA_CONTENT = 260;
  public static final int _TYPESWITCH_EXPR = 126;
  public static final int _TYPESWITCH_EXPR_RETURN = 144;
  public static final int _EXPR_LIST_OR_RCURLY = 102;
  public static final int NAMESPACEDECL = 8;
  public static final int _OPT_EXPR_LIST_IN_CURLY = 100;
  public static final int _QNAME_ = 312;
  public static final int _PARAM = 66;
  public static final int _XML_ATTR_NAME = 246;
  public static final int _IF_EXPR__ = 112;
  public static final int _EL_IN_CURLY_OR_QNAME = 104;
  public static final int _QUANT_EXPR_IN = 122;
  public static final int _IF_EXPR_ = 110;
  public static final int _ATLIST_ = 64;
  public static final int _EXPR_LIST_OR_RBRACE = 98;
  public static final int _FLWOR_HEAD = 194;
  public static final int _FOR_CLAUSE_VAR_IN = 212;
  public static final int _COLONCOLON = 298;
  public static final int _OPT_EXPR_LIST_IN_BRACE = 96;
  public static final int _DECLARE_COPYNS_ = 30;
  public static final int _XML_STR_START_APOS = 18;
  public static final int _ORDER_CLAUSE_MODIFIER_COLLATION = 234;
  public static final int _PRAGMA = 282;
  public static final int DECLAREORDERING = 6;
  public static final int _XML_STR_COMMON_CONTENT = 250;
  public static final int _EL_IN_CURLY_OR_NCNAME = 106;
  public static final int _QUANT_EXPR_SATISFIES = 124;
  public static final int _XML_PI_END = 242;
  public static final int _VALIDATE_EXPR__ = 168;
  public static final int _TYPESWITCH_EXPR__ = 130;
  public static final int _DECLARE_DEFAULT = 34;
  public static final int XML_COMMENT = 4;
  public static final int _VALIDATE_EXPR_X = 164;
  public static final int _ORDER_CLAUSE_MODIFIER_EMPTY_ = 232;
  public static final int _FLWOR_BODY3 = 200;
  public static final int _XML_STR_START_QUOTE = 16;
  public static final int _FLWOR_BODY2 = 198;
  public static final int _FLWOR_BODY1 = 196;
  public static final int _WILDCARD_QNAME_LOCAL = 320;
  public static final int _STAR = 294;
  public static final int _CLOSE_SQUARE = 278;
  public static final int _OPT_QUESTION = 288;
  public static final int _WHERE_CLAUSE = 220;
  public static final int _DECLARE_DEFAULT_ORDER = 36;
  public static final int _WILDCARD_QNAME = 316;
  public static final int _STRINGLITERAL = 58;
  public static final int _DECLARE_COPYNS = 28;
  public static final int _QUANT_EXPR_LIST = 120;
  public static final int _IF_EXPR_THEN = 114;
  public static final int _AND_EXPR = 148;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 
    24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 28, 28, 29, 29, 30, 30, 
    31, 31, 32, 32, 33, 33, 34, 34, 35, 35, 36, 36, 37, 37, 38, 38, 
    38, 38, 39, 39, 40, 40, 41, 41, 38, 38, 42, 42, 43, 43, 44, 44, 
    45, 45, 46, 46, 47, 47, 48, 48, 49, 49, 50, 50, 51, 51, 52, 52, 
    53, 53, 54, 54, 55, 55, 56, 56, 57, 57, 58, 58, 59, 59, 60, 60, 
    61, 61, 62, 62, 63, 63, 64, 64, 65, 65, 66, 66, 67, 67, 68, 68, 
    69, 69, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 
    38, 38, 38, 38, 70, 70, 44, 44, 38, 38, 38, 38, 71, 71, 38, 38, 
    38, 38, 38, 38, 72, 72, 73, 73, 74, 74, 75, 75, 76, 76, 77, 77, 
    78, 78, 79, 79, 80, 80, 81, 81, 82, 82, 83, 83, 84, 84, 38, 38, 
    85, 85, 38, 38, 86, 86, 87, 87, 88, 88, 89, 89, 90, 90, 91, 91, 
    92, 92, 93, 93, 94, 94, 95, 95, 96, 96, 97, 97, 98, 98, 99, 99, 
    100, 100, 101, 101, 102, 102, 103, 103, 104, 104, 105, 105, 106, 106, 107, 107, 
    108, 108, 109, 109, 110, 110, 111, 111, 112, 112, 113, 113, 114, 114, 113, 113, 
    115, 115, 116, 116, 38, 38, 117, 117, 118, 118, 119, 119, 120, 120, 121, 121, 
    122, 122, 123, 123, 124, 124, 125, 125, 126, 126, 127, 127, 128, 128, 129, 129, 
    130, 130, 131, 131, 132, 132, 133, 133, 134, 134, 135, 135, 136, 136, 137, 137, 
    138, 138
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\2\1\2\0\1\1\22\0\1\1\1\66\1\55\1\7\1\53"+
    "\1\0\1\6\1\56\1\61\1\57\1\35\1\5\1\51\1\27\1\3"+
    "\1\62\12\2\1\31\1\10\1\65\1\50\1\71\1\54\1\67\1\74"+
    "\1\12\1\72\1\73\1\4\1\12\15\33\1\75\6\33\1\70\1\0"+
    "\1\77\1\0\1\30\1\0\1\16\1\46\1\42\1\41\1\36\1\47"+
    "\1\15\1\52\1\43\2\33\1\13\1\17\1\45\1\23\1\20\1\21"+
    "\1\37\1\24\1\14\1\22\1\44\1\60\1\11\1\40\1\33\1\63"+
    "\1\0\1\76\1\64\53\0\1\32\12\0\1\32\1\0\1\26\2\0"+
    "\1\32\5\0\27\33\1\0\37\33\1\0\72\33\2\32\13\33\2\32"+
    "\10\33\1\32\65\33\1\32\104\33\11\32\44\33\3\32\2\33\4\32"+
    "\36\33\37\32\31\0\131\33\22\32\7\33\4\0\12\32\2\34\16\0"+
    "\5\32\11\0\1\32\21\0\106\26\32\0\2\26\30\0\1\32\13\0"+
    "\1\33\1\26\3\33\1\0\1\33\1\0\24\33\1\0\54\33\1\0"+
    "\7\33\3\32\1\33\1\32\1\33\1\32\1\33\1\32\1\33\1\32"+
    "\22\33\2\32\1\0\5\32\4\0\1\32\14\33\1\32\102\33\1\32"+
    "\14\33\1\32\44\33\1\0\4\26\3\0\6\32\65\33\2\32\2\33"+
    "\2\32\2\33\2\32\1\0\34\33\2\32\10\33\2\0\2\33\6\0"+
    "\20\32\41\0\46\33\2\0\1\33\7\0\46\33\1\32\11\0\21\26"+
    "\1\0\27\26\1\0\3\26\1\0\1\26\1\0\2\26\1\0\1\26"+
    "\13\0\33\33\5\0\3\33\56\0\32\33\5\0\1\34\12\33\10\26"+
    "\15\0\12\26\4\0\2\32\1\26\107\33\2\32\5\33\1\32\17\33"+
    "\1\32\4\33\1\0\1\33\17\26\2\33\2\26\1\0\4\26\2\32"+
    "\12\26\3\32\2\0\1\32\20\0\1\32\1\0\36\32\35\0\3\32"+
    "\60\0\46\32\13\0\1\32\u014f\0\3\26\1\32\65\33\2\0\1\26"+
    "\1\33\20\26\2\0\1\32\4\26\3\0\12\33\2\26\2\0\12\26"+
    "\21\0\3\26\1\0\10\33\2\0\2\33\2\0\26\33\1\0\7\33"+
    "\1\0\1\33\3\0\4\33\2\0\1\26\1\32\7\26\2\0\2\26"+
    "\2\0\3\26\11\0\1\26\4\0\2\33\1\0\3\33\2\26\2\0"+
    "\12\26\2\33\20\0\1\26\2\0\6\33\4\0\2\33\2\0\26\33"+
    "\1\0\7\33\1\0\2\33\1\0\2\33\1\0\2\33\2\0\1\26"+
    "\1\0\5\26\4\0\2\26\2\0\3\26\13\0\4\33\1\0\1\33"+
    "\7\0\12\26\2\26\3\33\14\0\3\26\1\0\7\33\1\32\1\33"+
    "\1\0\3\33\1\0\26\33\1\0\7\33\1\0\2\33\1\0\5\33"+
    "\2\0\1\26\1\33\10\26\1\0\3\26\1\0\3\26\2\0\1\32"+
    "\17\0\1\33\1\32\4\0\12\26\21\0\3\26\1\0\10\33\2\0"+
    "\2\33\2\0\26\33\1\0\7\33\1\0\2\33\1\0\1\32\4\33"+
    "\2\0\1\26\1\33\6\26\3\0\2\26\2\0\3\26\10\0\2\26"+
    "\4\0\2\33\1\0\3\33\4\0\12\26\1\0\1\32\20\0\1\26"+
    "\1\34\1\0\6\33\3\0\3\33\1\0\4\33\3\0\2\33\1\0"+
    "\1\33\1\0\2\33\3\0\2\33\3\0\3\33\3\0\10\33\1\0"+
    "\3\33\4\0\5\26\3\0\3\26\1\0\4\26\11\0\1\26\17\0"+
    "\11\26\21\0\3\26\1\0\10\33\1\0\3\33\1\0\27\33\1\0"+
    "\12\33\1\0\5\33\4\0\7\26\1\0\3\26\1\0\4\26\7\0"+
    "\2\26\11\0\2\33\4\0\12\26\22\0\2\26\1\0\10\33\1\0"+
    "\3\33\1\0\27\33\1\0\12\33\1\0\5\33\3\0\1\32\7\26"+
    "\1\0\3\26\1\0\4\26\7\0\2\26\7\0\1\33\1\0\2\33"+
    "\4\0\12\26\22\0\2\26\1\0\10\33\1\0\3\33\1\0\27\33"+
    "\1\0\20\33\4\0\6\26\2\0\3\26\1\0\4\26\11\0\1\26"+
    "\10\0\2\33\4\0\12\26\25\0\22\32\3\0\30\32\1\0\11\32"+
    "\1\0\1\32\2\0\7\32\72\0\56\33\1\32\1\33\1\26\2\33"+
    "\7\26\5\0\6\33\1\34\10\26\1\0\12\26\47\0\2\33\1\0"+
    "\1\33\2\0\2\33\1\0\1\33\2\0\1\33\6\0\4\33\1\0"+
    "\7\33\1\0\3\33\1\0\1\33\1\0\1\33\2\0\2\33\1\0"+
    "\2\33\1\32\1\33\1\26\2\33\6\26\1\0\2\26\1\33\2\0"+
    "\5\33\1\0\1\34\1\0\6\26\2\0\12\26\2\0\2\32\42\0"+
    "\1\32\27\0\2\26\6\0\12\26\13\0\1\26\1\0\1\26\1\0"+
    "\1\26\4\0\2\26\10\33\1\0\41\33\1\32\6\0\24\26\1\0"+
    "\2\26\4\34\4\0\6\26\1\0\1\26\1\0\25\26\3\0\7\26"+
    "\1\0\1\26\106\0\42\32\1\0\5\32\1\0\2\32\45\0\6\32"+
    "\112\0\46\33\12\0\47\33\2\32\7\0\1\33\1\32\2\33\1\32"+
    "\3\33\1\32\1\33\1\32\2\33\1\32\5\33\51\32\1\33\1\32"+
    "\1\33\1\32\1\33\13\32\1\33\1\32\1\33\1\32\1\33\3\32"+
    "\2\33\3\32\1\33\5\0\3\33\1\32\1\33\1\32\1\33\1\32"+
    "\1\33\1\32\1\33\3\32\2\33\3\32\2\33\1\32\1\33\50\32"+
    "\1\33\4\32\5\0\1\33\2\32\1\33\2\32\2\33\7\32\2\33"+
    "\1\32\1\33\1\32\7\33\50\32\1\33\4\32\1\33\10\32\1\33"+
    "\6\0\7\32\1\0\77\32\1\0\1\32\1\0\4\32\2\0\7\32"+
    "\1\0\1\32\1\0\4\32\2\0\47\32\1\0\1\32\1\0\4\32"+
    "\2\0\37\32\1\0\1\32\1\0\4\32\2\0\7\32\1\0\1\32"+
    "\1\0\4\32\2\0\7\32\1\0\7\32\1\0\27\32\1\0\37\32"+
    "\1\0\1\32\1\0\4\32\2\0\7\32\1\0\47\32\1\0\23\32"+
    "\105\0\125\32\14\0\u026c\32\2\0\10\32\12\0\32\32\5\0\113\32"+
    "\25\0\15\32\1\0\4\32\16\0\22\32\16\0\22\32\16\0\15\32"+
    "\1\0\3\32\17\0\64\32\43\0\1\32\4\0\1\32\103\0\130\32"+
    "\10\0\51\32\127\0\35\32\63\0\36\32\2\0\5\32\u038b\0\154\32"+
    "\224\0\234\33\4\0\132\33\6\0\26\33\2\0\6\33\2\0\46\33"+
    "\2\0\6\33\2\0\10\33\1\0\1\33\1\0\1\33\1\0\1\33"+
    "\1\0\37\33\2\0\65\33\1\0\7\33\1\0\1\33\3\0\3\33"+
    "\1\0\7\33\3\0\4\33\2\0\6\33\4\0\15\33\5\0\3\33"+
    "\1\0\7\33\164\0\1\32\15\0\1\32\120\0\15\26\4\0\1\26"+
    "\40\0\1\32\4\0\1\32\2\0\12\32\1\0\1\32\3\0\5\32"+
    "\6\0\1\32\1\0\1\33\1\0\1\32\1\0\2\33\2\32\1\25"+
    "\3\32\1\0\7\32\3\0\3\32\5\0\5\32\66\0\3\25\u0e82\0"+
    "\1\34\1\32\1\25\31\0\11\25\6\26\1\0\5\34\5\0\2\32"+
    "\4\0\124\33\2\32\2\0\2\26\2\0\2\34\1\32\1\0\132\33"+
    "\1\0\3\34\1\32\5\0\50\33\4\0\136\32\21\0\30\32\70\0"+
    "\20\32\u0200\0\u19b6\32\112\0\u51a6\33\132\0\u048d\32\u0773\0\u2ba4\33\134\0"+
    "\u0800\0\u1900\0\u012e\32\2\0\73\32\225\0\7\32\14\0\5\32\5\0"+
    "\1\32\1\0\12\32\1\0\15\32\1\0\5\32\1\0\1\32\1\0"+
    "\2\32\1\0\2\32\1\0\154\32\41\0\u016b\32\22\0\100\32\2\0"+
    "\66\32\50\0\14\32\164\0\5\32\1\0\207\32\44\0\32\32\6\0"+
    "\32\32\13\0\131\32\3\0\6\32\2\0\6\32\2\0\6\32\2\0"+
    "\3\32\41\0\2\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\213\0\1\1\1\2\5\1\3\3\1\4\1\5\4\6"+
    "\1\7\1\10\1\11\2\12\2\13\1\14\1\15\2\16"+
    "\1\6\1\17\12\6\1\20\24\6\1\21\1\22\1\23"+
    "\2\24\1\25\1\26\1\24\13\27\1\30\1\31\1\32"+
    "\1\33\2\6\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\10\43\1\44\1\45\1\44\1\46\1\47\1\50"+
    "\1\51\1\52\2\53\1\54\1\55\1\56\1\57\1\6"+
    "\1\60\1\61\4\6\1\62\3\6\1\63\1\64\1\6"+
    "\1\65\1\66\1\6\1\67\1\70\4\6\1\71\1\72"+
    "\1\73\1\74\13\72\1\75\1\76\1\77\1\100\1\101"+
    "\4\102\4\103\4\104\3\105\1\106\1\107\3\105\1\110"+
    "\5\111\1\32\6\111\1\24\1\112\6\6\1\113\1\24"+
    "\2\6\1\114\3\6\1\115\4\116\3\117\2\6\1\44"+
    "\1\6\1\5\2\120\1\5\2\121\1\13\1\24\1\122"+
    "\1\123\1\124\1\125\1\13\1\56\1\13\1\126\1\127"+
    "\1\130\1\13\1\131\1\13\1\132\1\0\1\133\1\134"+
    "\1\135\1\136\1\137\1\24\1\140\1\141\1\140\1\0"+
    "\1\24\1\142\1\143\1\6\1\144\2\6\1\145\1\146"+
    "\1\147\2\146\1\6\1\150\4\0\1\151\1\152\1\153"+
    "\3\0\1\154\1\155\4\0\1\156\1\157\27\0\1\160"+
    "\11\0\1\161\1\162\1\0\12\27\7\0\1\163\2\0"+
    "\1\164\4\0\1\165\4\0\1\162\3\0\1\166\1\0"+
    "\1\167\1\170\1\0\16\170\1\171\1\0\1\102\1\103"+
    "\1\104\3\24\1\172\1\173\1\0\4\111\1\0\6\111"+
    "\4\0\1\174\1\175\3\0\1\176\7\0\2\120\1\177"+
    "\5\0\1\200\1\201\1\202\2\0\1\203\2\0\1\204"+
    "\1\0\1\205\1\206\1\207\1\210\1\211\1\212\1\213"+
    "\4\0\1\214\51\0\13\27\2\0\1\37\1\215\3\0"+
    "\1\216\1\55\11\0\1\217\1\0\1\220\1\0\20\170"+
    "\1\0\1\102\1\103\1\104\2\24\14\111\3\0\1\221"+
    "\1\222\11\0\1\223\1\123\10\0\1\130\1\224\1\225"+
    "\1\141\6\0\1\226\1\0\1\227\42\0\1\230\6\27"+
    "\1\231\1\232\1\233\3\0\1\234\1\0\1\235\1\236"+
    "\1\237\4\0\1\240\2\0\1\241\7\170\1\242\6\170"+
    "\1\243\1\244\1\103\1\104\2\24\1\230\6\111\1\231"+
    "\1\232\1\233\14\0\1\245\1\0\1\246\1\0\1\247"+
    "\30\0\1\250\3\0\1\251\1\252\12\0\1\253\6\27"+
    "\3\0\1\254\5\0\13\170\1\255\1\170\1\102\1\103"+
    "\1\256\2\24\6\111\1\257\1\0\1\260\1\261\1\262"+
    "\2\0\1\263\1\264\4\0\1\224\1\265\1\266\1\0"+
    "\1\267\5\0\1\270\22\0\1\271\1\272\5\0\6\27"+
    "\6\0\1\273\1\274\13\170\1\102\1\103\2\24\6\111"+
    "\4\0\1\275\1\0\1\276\1\0\1\277\1\300\3\0"+
    "\1\301\10\0\1\302\1\0\1\303\5\0\1\304\1\0"+
    "\1\305\2\0\3\27\1\306\1\27\1\307\1\0\1\310"+
    "\3\0\1\311\5\170\1\312\1\313\2\170\1\314\1\170"+
    "\1\102\1\103\2\24\3\111\1\306\1\111\1\307\6\0"+
    "\1\315\1\0\1\316\2\0\1\317\1\0\1\320\1\0"+
    "\1\321\3\0\1\322\1\323\1\0\1\324\2\0\1\325"+
    "\5\27\4\0\1\170\1\326\3\170\1\327\2\170\1\330"+
    "\1\331\1\332\1\333\5\111\2\0\1\334\2\0\1\335"+
    "\1\336\2\0\1\337\3\0\1\340\1\341\1\342\1\343"+
    "\1\344\4\27\2\0\1\345\1\0\1\346\3\170\1\347"+
    "\1\170\1\350\1\344\4\111\1\351\1\0\1\352\1\353"+
    "\4\0\1\354\4\27\1\0\1\355\1\356\2\170\1\242"+
    "\1\170\4\111\1\357\3\0\1\360\4\27\1\0\4\170"+
    "\4\111\1\0\1\361\1\0\4\27\1\0\4\170\4\111"+
    "\2\0\3\27\1\362\1\0\4\170\3\111\1\362\1\0"+
    "\1\363\2\27\1\364\1\365\4\170\2\111\1\364\1\366"+
    "\2\27\4\170\2\111\1\27\1\367\1\370\3\170\1\111"+
    "\1\367\1\27\2\170\1\371\1\111\1\27\1\170\1\372"+
    "\1\111\1\27\1\170\1\111\1\27\1\170\1\111\1\27"+
    "\1\170\1\111\1\373\1\374\1\373";

  private static int [] zzUnpackAction() {
    int [] result = new int[1278];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\300\0\u0100\0\u0140\0\u0180\0\u01c0"+
    "\0\u0200\0\u0240\0\u0280\0\u02c0\0\u0300\0\u0340\0\u0380\0\u03c0"+
    "\0\u0400\0\u0440\0\u0480\0\u04c0\0\u0500\0\u0540\0\u0580\0\u05c0"+
    "\0\u0600\0\u0640\0\u0680\0\u06c0\0\u0700\0\u0740\0\u0780\0\u07c0"+
    "\0\u0800\0\u0840\0\u0880\0\u08c0\0\u0900\0\u0940\0\u0980\0\u09c0"+
    "\0\u0a00\0\u0a40\0\u0a80\0\u0ac0\0\u0b00\0\u0b40\0\u0b80\0\u0bc0"+
    "\0\u0c00\0\u0c40\0\u0c80\0\u0cc0\0\u0d00\0\u0d40\0\u0d80\0\u0dc0"+
    "\0\u0e00\0\u0e40\0\u0e80\0\u0ec0\0\u0f00\0\u0f40\0\u0f80\0\u0fc0"+
    "\0\u1000\0\u1040\0\u1080\0\u10c0\0\u1100\0\u1140\0\u1180\0\u11c0"+
    "\0\u1200\0\u1240\0\u1280\0\u12c0\0\u1300\0\u1340\0\u1380\0\u13c0"+
    "\0\u1400\0\u1440\0\u1480\0\u14c0\0\u1500\0\u1540\0\u1580\0\u15c0"+
    "\0\u1600\0\u1640\0\u1680\0\u16c0\0\u1700\0\u1740\0\u1780\0\u17c0"+
    "\0\u1800\0\u1840\0\u1880\0\u18c0\0\u1900\0\u1940\0\u1980\0\u19c0"+
    "\0\u1a00\0\u1a40\0\u1a80\0\u1ac0\0\u1b00\0\u1b40\0\u1b80\0\u1bc0"+
    "\0\u1c00\0\u1c40\0\u1c80\0\u1cc0\0\u1d00\0\u1d40\0\u1d80\0\u1dc0"+
    "\0\u1e00\0\u1e40\0\u1e80\0\u1ec0\0\u1f00\0\u1f40\0\u1f80\0\u1fc0"+
    "\0\u2000\0\u2040\0\u2080\0\u20c0\0\u2100\0\u2140\0\u2180\0\u21c0"+
    "\0\u2200\0\u2240\0\u2280\0\u1bc0\0\u22c0\0\u2300\0\u2340\0\u2380"+
    "\0\u23c0\0\u2400\0\u1bc0\0\u2440\0\u2480\0\u1bc0\0\u24c0\0\u1bc0"+
    "\0\u2500\0\u2540\0\u2400\0\u2580\0\u1bc0\0\u1bc0\0\u25c0\0\u2600"+
    "\0\u1bc0\0\u2640\0\u1bc0\0\u1bc0\0\u2680\0\u26c0\0\u2700\0\u1bc0"+
    "\0\u2740\0\u2780\0\u27c0\0\u2800\0\u2840\0\u2880\0\u28c0\0\u2900"+
    "\0\u2940\0\u2980\0\u1bc0\0\u29c0\0\u2a00\0\u2a40\0\u2a80\0\u2ac0"+
    "\0\u2b00\0\u2b40\0\u2b80\0\u2bc0\0\u2c00\0\u2c40\0\u2c80\0\u2cc0"+
    "\0\u2d00\0\u2d40\0\u2d80\0\u2dc0\0\u2e00\0\u2e40\0\u2e80\0\u1bc0"+
    "\0\u1bc0\0\u1bc0\0\u2ec0\0\u2f00\0\u2ec0\0\u1bc0\0\u2f40\0\u2f80"+
    "\0\u2fc0\0\u3000\0\u3040\0\u3080\0\u30c0\0\u3100\0\u3140\0\u3180"+
    "\0\u31c0\0\u3200\0\u1bc0\0\u1bc0\0\u1bc0\0\u1bc0\0\u3240\0\u3280"+
    "\0\u1bc0\0\u32c0\0\u1bc0\0\u3300\0\u1bc0\0\u1bc0\0\u1bc0\0\u1bc0"+
    "\0\u3340\0\u3380\0\u33c0\0\u3400\0\u3440\0\u3480\0\u2400\0\u1bc0"+
    "\0\u1bc0\0\u2400\0\u1bc0\0\u2400\0\u34c0\0\u1bc0\0\u1bc0\0\u1bc0"+
    "\0\u2400\0\u1bc0\0\u3500\0\u1bc0\0\u3540\0\u3580\0\u2400\0\u1bc0"+
    "\0\u35c0\0\u3600\0\u3640\0\u3680\0\u1bc0\0\u36c0\0\u3700\0\u3740"+
    "\0\u2400\0\u1bc0\0\u3780\0\u37c0\0\u1bc0\0\u3800\0\u3840\0\u1bc0"+
    "\0\u3880\0\u38c0\0\u3900\0\u3940\0\u1bc0\0\u1bc0\0\u3980\0\u39c0"+
    "\0\u3a00\0\u3a40\0\u3a80\0\u3ac0\0\u3b00\0\u3b40\0\u3b80\0\u3bc0"+
    "\0\u3c00\0\u3c40\0\u3c80\0\u1bc0\0\u1bc0\0\u2400\0\u3cc0\0\u1bc0"+
    "\0\u1bc0\0\u3d00\0\u3d40\0\u2400\0\u1bc0\0\u3d80\0\u3dc0\0\u2400"+
    "\0\u1bc0\0\u3e00\0\u3e40\0\u2400\0\u1bc0\0\u22c0\0\u3e80\0\u1bc0"+
    "\0\u1bc0\0\u3ec0\0\u3f00\0\u3f40\0\u3f80\0\u3fc0\0\u4000\0\u4040"+
    "\0\u4080\0\u40c0\0\u4100\0\u4140\0\u4180\0\u41c0\0\u4200\0\u4240"+
    "\0\u4280\0\u42c0\0\u1bc0\0\u3340\0\u4300\0\u4340\0\u3480\0\u4380"+
    "\0\u43c0\0\u2ec0\0\u4400\0\u4440\0\u4480\0\u2ec0\0\u44c0\0\u4500"+
    "\0\u4540\0\u1bc0\0\u1bc0\0\u4580\0\u45c0\0\u2400\0\u1bc0\0\u4600"+
    "\0\u2400\0\u4640\0\u4680\0\u46c0\0\u4700\0\u1bc0\0\u4740\0\u4780"+
    "\0\u47c0\0\u1bc0\0\u47c0\0\u4800\0\u1bc0\0\u4840\0\u4880\0\u1bc0"+
    "\0\u1bc0\0\u48c0\0\u4900\0\u4940\0\u4980\0\u49c0\0\u4a00\0\u4a40"+
    "\0\u1bc0\0\u4a80\0\u1bc0\0\u4ac0\0\u2400\0\u2400\0\u1bc0\0\u1bc0"+
    "\0\u1bc0\0\u4b00\0\u4b40\0\u4b80\0\u1bc0\0\u4bc0\0\u2400\0\u1bc0"+
    "\0\u1bc0\0\u4c00\0\u1bc0\0\u4c40\0\u4c80\0\u4cc0\0\u4d00\0\u1bc0"+
    "\0\u4d40\0\u4d80\0\u4dc0\0\u1bc0\0\u4e00\0\u4e40\0\u4e80\0\u4ec0"+
    "\0\u1bc0\0\u1bc0\0\u1bc0\0\u4f00\0\u4f40\0\u4f80\0\u1bc0\0\u1bc0"+
    "\0\u4fc0\0\u5000\0\u5040\0\u5080\0\u1bc0\0\u1bc0\0\u50c0\0\u5100"+
    "\0\u5140\0\u5180\0\u51c0\0\u5200\0\u5240\0\u5280\0\u52c0\0\u5300"+
    "\0\u5340\0\u5380\0\u53c0\0\u5400\0\u5440\0\u5480\0\u54c0\0\u5500"+
    "\0\u5540\0\u5580\0\u55c0\0\u5600\0\u5640\0\u1bc0\0\u5680\0\u56c0"+
    "\0\u5700\0\u5740\0\u5780\0\u57c0\0\u5800\0\u5840\0\u5880\0\u2ec0"+
    "\0\u2ec0\0\u58c0\0\u5900\0\u5940\0\u5980\0\u59c0\0\u5a00\0\u5a40"+
    "\0\u5a80\0\u5ac0\0\u5b00\0\u5b40\0\u5b80\0\u5bc0\0\u5c00\0\u5c40"+
    "\0\u5c80\0\u5cc0\0\u5d00\0\u1bc0\0\u5d40\0\u5d80\0\u1bc0\0\u5dc0"+
    "\0\u5e00\0\u5e40\0\u5e80\0\u1bc0\0\u5ec0\0\u5f00\0\u5f40\0\u5f80"+
    "\0\u1bc0\0\u5fc0\0\u6000\0\u6040\0\u6080\0\u60c0\0\u1bc0\0\u3a00"+
    "\0\u6100\0\u6140\0\u6180\0\u61c0\0\u6200\0\u6240\0\u6280\0\u62c0"+
    "\0\u6300\0\u6340\0\u6380\0\u63c0\0\u6400\0\u6440\0\u6480\0\u1bc0"+
    "\0\u64c0\0\u6500\0\u6540\0\u6580\0\u3e80\0\u65c0\0\u6600\0\u1bc0"+
    "\0\u1bc0\0\u6640\0\u6680\0\u66c0\0\u6700\0\u6740\0\u6780\0\u67c0"+
    "\0\u6800\0\u6840\0\u6880\0\u68c0\0\u6900\0\u6940\0\u6980\0\u69c0"+
    "\0\u6a00\0\u2ec0\0\u1bc0\0\u6a40\0\u6a80\0\u6ac0\0\u1bc0\0\u6b00"+
    "\0\u6b40\0\u6b80\0\u6bc0\0\u6c00\0\u6c40\0\u6c80\0\u6cc0\0\u6d00"+
    "\0\u1bc0\0\u6d40\0\u6d80\0\u6dc0\0\u6e00\0\u6e40\0\u1bc0\0\u1bc0"+
    "\0\u1bc0\0\u6e80\0\u6ec0\0\u1bc0\0\u6f00\0\u6f40\0\u1bc0\0\u6f80"+
    "\0\u1bc0\0\u1bc0\0\u1bc0\0\u1bc0\0\u1bc0\0\u1bc0\0\u1bc0\0\u6fc0"+
    "\0\u7000\0\u7040\0\u7080\0\u1bc0\0\u70c0\0\u7100\0\u7140\0\u7180"+
    "\0\u71c0\0\u7200\0\u7240\0\u7280\0\u72c0\0\u7300\0\u7340\0\u7380"+
    "\0\u73c0\0\u7400\0\u7440\0\u7480\0\u74c0\0\u7500\0\u7540\0\u7580"+
    "\0\u75c0\0\u7600\0\u7640\0\u7680\0\u76c0\0\u7700\0\u7740\0\u7780"+
    "\0\u77c0\0\u7800\0\u7840\0\u7880\0\u78c0\0\u7900\0\u7940\0\u7980"+
    "\0\u79c0\0\u7a00\0\u7a40\0\u7a80\0\u7ac0\0\u7b00\0\u7b40\0\u7b80"+
    "\0\u7bc0\0\u7c00\0\u7c40\0\u7c80\0\u7cc0\0\u7d00\0\u7d40\0\u7d80"+
    "\0\u7dc0\0\u7e00\0\u7e40\0\u1bc0\0\u7e80\0\u7ec0\0\u7f00\0\u1bc0"+
    "\0\u7f40\0\u7f80\0\u7fc0\0\u8000\0\u8040\0\u8080\0\u80c0\0\u8100"+
    "\0\u8140\0\u8180\0\u1bc0\0\u81c0\0\u8200\0\u8200\0\u8240\0\u8280"+
    "\0\u82c0\0\u8300\0\u8340\0\u8380\0\u83c0\0\u8400\0\u8440\0\u8480"+
    "\0\u84c0\0\u8500\0\u8540\0\u8580\0\u85c0\0\u8600\0\u8640\0\u8680"+
    "\0\u86c0\0\u8700\0\u8740\0\u8780\0\u87c0\0\u1bc0\0\u8800\0\u8840"+
    "\0\u8880\0\u88c0\0\u8900\0\u8940\0\u8980\0\u89c0\0\u8a00\0\u8a40"+
    "\0\u8a80\0\u8ac0\0\u8b00\0\u1bc0\0\u1bc0\0\u8b40\0\u8b80\0\u8bc0"+
    "\0\u8c00\0\u8c40\0\u8c80\0\u8cc0\0\u8d00\0\u8d40\0\u4740\0\u8d80"+
    "\0\u8dc0\0\u8e00\0\u8e40\0\u8e80\0\u8ec0\0\u8f00\0\u8f40\0\u8f80"+
    "\0\u8fc0\0\u9000\0\u1bc0\0\u9040\0\u9080\0\u90c0\0\u9100\0\u9140"+
    "\0\u9180\0\u91c0\0\u1bc0\0\u9200\0\u1bc0\0\u9240\0\u9280\0\u92c0"+
    "\0\u9300\0\u9340\0\u9380\0\u93c0\0\u9400\0\u9440\0\u9480\0\u94c0"+
    "\0\u9500\0\u9540\0\u9580\0\u95c0\0\u9600\0\u9640\0\u9680\0\u96c0"+
    "\0\u9700\0\u9740\0\u9780\0\u97c0\0\u9800\0\u9840\0\u9880\0\u98c0"+
    "\0\u9900\0\u9940\0\u9980\0\u99c0\0\u9a00\0\u9a40\0\u9a80\0\u2f80"+
    "\0\u9ac0\0\u9b00\0\u9b40\0\u9b80\0\u9bc0\0\u9c00\0\u2f80\0\u2f80"+
    "\0\u2f80\0\u9c40\0\u9c80\0\u9cc0\0\u1bc0\0\u9d00\0\u1bc0\0\u1bc0"+
    "\0\u1bc0\0\u9d40\0\u9d80\0\u9dc0\0\u9e00\0\u1bc0\0\u9e40\0\u9e80"+
    "\0\u3a00\0\u9ec0\0\u9f00\0\u9f40\0\u9f80\0\u9fc0\0\ua000\0\ua040"+
    "\0\u3a00\0\ua080\0\ua0c0\0\ua100\0\ua140\0\ua180\0\ua1c0\0\u1bc0"+
    "\0\ua200\0\ua240\0\ua280\0\ua2c0\0\ua300\0\u3fc0\0\ua340\0\ua380"+
    "\0\ua3c0\0\ua400\0\ua440\0\ua480\0\u3fc0\0\u3fc0\0\u3fc0\0\ua4c0"+
    "\0\ua500\0\ua540\0\ua580\0\ua5c0\0\ua600\0\ua640\0\ua680\0\ua6c0"+
    "\0\ua700\0\ua740\0\ua780\0\u1bc0\0\ua7c0\0\u1bc0\0\ua800\0\u1bc0"+
    "\0\ua840\0\ua880\0\ua8c0\0\ua900\0\ua940\0\ua980\0\ua9c0\0\uaa00"+
    "\0\uaa40\0\uaa80\0\uaac0\0\uab00\0\uab40\0\uab80\0\uabc0\0\uac00"+
    "\0\uac40\0\uac80\0\uacc0\0\uad00\0\uad40\0\uad80\0\uadc0\0\uae00"+
    "\0\u1bc0\0\uae40\0\uae80\0\uaec0\0\u1bc0\0\u1bc0\0\uaf00\0\uaf40"+
    "\0\uaf80\0\uafc0\0\ub000\0\ub040\0\ub080\0\ub0c0\0\ub100\0\ub140"+
    "\0\u1bc0\0\ub180\0\ub1c0\0\ub200\0\ub240\0\ub280\0\ub2c0\0\ub300"+
    "\0\ub340\0\ub380\0\u1bc0\0\ub3c0\0\ub400\0\ub440\0\ub480\0\ub4c0"+
    "\0\ub500\0\ub540\0\ub580\0\ub5c0\0\ub600\0\ub640\0\ub680\0\ub6c0"+
    "\0\ub700\0\ub740\0\ub780\0\u3a00\0\ub7c0\0\ub800\0\ub840\0\u3e00"+
    "\0\ub880\0\ub8c0\0\ub900\0\ub940\0\ub980\0\ub9c0\0\uba00\0\uba40"+
    "\0\u1bc0\0\uba80\0\u1bc0\0\u1bc0\0\u1bc0\0\ubac0\0\ubb00\0\u1bc0"+
    "\0\u1bc0\0\ubb40\0\ubb80\0\ubbc0\0\ubc00\0\ubc40\0\u1bc0\0\u1bc0"+
    "\0\ubc80\0\u1bc0\0\ubcc0\0\ubd00\0\ubd40\0\ubd80\0\ubdc0\0\u1bc0"+
    "\0\ube00\0\ube40\0\ube80\0\ubec0\0\ubf00\0\ubf40\0\ubf80\0\ubfc0"+
    "\0\uc000\0\uc040\0\uc080\0\uc0c0\0\uc100\0\uc140\0\uc180\0\uc1c0"+
    "\0\uc200\0\uc240\0\u1bc0\0\u1bc0\0\uc280\0\uc2c0\0\uc300\0\uc340"+
    "\0\uc380\0\uc3c0\0\uc400\0\uc440\0\uc480\0\uc4c0\0\uc500\0\uc540"+
    "\0\uc580\0\uc5c0\0\uc600\0\uc640\0\uc680\0\u1bc0\0\u1bc0\0\uc6c0"+
    "\0\uc700\0\uc740\0\uc780\0\uc7c0\0\uc800\0\uc840\0\uc880\0\uc8c0"+
    "\0\uc900\0\uc940\0\uc980\0\uc9c0\0\uca00\0\uca40\0\uca80\0\ucac0"+
    "\0\ucb00\0\ucb40\0\ucb80\0\ucbc0\0\ucc00\0\ucc40\0\ucc80\0\uccc0"+
    "\0\u1bc0\0\ucd00\0\u1bc0\0\ucd40\0\u1bc0\0\u1bc0\0\ucd80\0\ucdc0"+
    "\0\uce00\0\u1bc0\0\uce40\0\uce80\0\ucec0\0\ucf00\0\ucf40\0\ucf80"+
    "\0\ucfc0\0\ud000\0\u1bc0\0\ud040\0\u1bc0\0\ud080\0\ud0c0\0\ud100"+
    "\0\ud140\0\ud180\0\u1bc0\0\ud1c0\0\u1bc0\0\ud200\0\ud240\0\ud280"+
    "\0\ud2c0\0\ud300\0\u2f80\0\ud340\0\u2f80\0\ud380\0\u1bc0\0\ud3c0"+
    "\0\ud400\0\ud440\0\u1bc0\0\ud480\0\ud4c0\0\ud500\0\ud540\0\ud580"+
    "\0\u3a00\0\u3a00\0\ud5c0\0\ud600\0\u3a00\0\ud640\0\ud680\0\ud6c0"+
    "\0\ud700\0\ud740\0\ud780\0\ud7c0\0\ud800\0\u3fc0\0\ud840\0\u3fc0"+
    "\0\ud880\0\ud8c0\0\ud900\0\ud940\0\ud980\0\ud9c0\0\u1bc0\0\uda00"+
    "\0\u1bc0\0\uda40\0\uda80\0\u1bc0\0\udac0\0\u1bc0\0\udb00\0\u1bc0"+
    "\0\udb40\0\udb80\0\udbc0\0\u1bc0\0\u1bc0\0\udc00\0\u1bc0\0\udc40"+
    "\0\udc80\0\u1bc0\0\udcc0\0\udd00\0\udd40\0\udd80\0\uddc0\0\ude00"+
    "\0\ude40\0\ude80\0\udec0\0\udf00\0\udf40\0\udf80\0\udfc0\0\ue000"+
    "\0\u3a00\0\ue040\0\ue080\0\u3d00\0\u3d80\0\u3e80\0\u3e80\0\ue0c0"+
    "\0\ue100\0\ue140\0\ue180\0\ue1c0\0\ue200\0\ue240\0\u1bc0\0\ue280"+
    "\0\ue2c0\0\u1bc0\0\u1bc0\0\ue300\0\ue340\0\u1bc0\0\ue380\0\ue3c0"+
    "\0\ue400\0\u1bc0\0\u1bc0\0\u1bc0\0\u1bc0\0\u2f80\0\ue440\0\ue480"+
    "\0\ue4c0\0\ue500\0\ue540\0\ue580\0\u1bc0\0\ue5c0\0\u3a00\0\ue600"+
    "\0\ue640\0\ue680\0\u3a00\0\ue6c0\0\ue700\0\u3fc0\0\ue740\0\ue780"+
    "\0\ue7c0\0\ue800\0\u1bc0\0\ue840\0\u1bc0\0\u1bc0\0\ue880\0\ue8c0"+
    "\0\ue900\0\ue940\0\u1bc0\0\ue980\0\ue9c0\0\uea00\0\uea40\0\uea80"+
    "\0\u1bc0\0\u1bc0\0\ueac0\0\ueb00\0\ueb40\0\ueb80\0\uebc0\0\uec00"+
    "\0\uec40\0\uec80\0\u1bc0\0\uecc0\0\ued00\0\ued40\0\u1bc0\0\ued80"+
    "\0\uedc0\0\uee00\0\uee40\0\uee80\0\ueec0\0\uef00\0\uef40\0\uef80"+
    "\0\uefc0\0\uf000\0\uf040\0\uf080\0\uf0c0\0\u1bc0\0\uf100\0\uf140"+
    "\0\uf180\0\uf1c0\0\uf200\0\uf240\0\uf280\0\uf2c0\0\uf300\0\uf340"+
    "\0\uf380\0\uf3c0\0\uf400\0\uf440\0\uf480\0\uf4c0\0\uf500\0\uf540"+
    "\0\uf580\0\u2f80\0\uf5c0\0\uf600\0\uf640\0\uf680\0\uf6c0\0\uf700"+
    "\0\uf740\0\uf780\0\u3fc0\0\uf7c0\0\u1bc0\0\uf800\0\uf840\0\u2f80"+
    "\0\u1bc0\0\uf880\0\uf8c0\0\uf900\0\uf940\0\uf980\0\uf9c0\0\u3fc0"+
    "\0\u1bc0\0\ufa00\0\ufa40\0\ufa80\0\ufac0\0\ufb00\0\ufb40\0\ufb80"+
    "\0\ufbc0\0\ufc00\0\u2f80\0\u3a00\0\ufc40\0\ufc80\0\ufcc0\0\ufd00"+
    "\0\u3fc0\0\ufd40\0\ufd80\0\ufdc0\0\u3a00\0\ufe00\0\ufe40\0\ufe80"+
    "\0\u3a00\0\ufec0\0\uff00\0\uff40\0\uff80\0\uffc0\1\0\1\100"+
    "\1\200\1\300\1\u0100\0\u2f80\0\u3a00\0\u3fc0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[1278];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\214\1\215\7\214\1\216\5\214\1\217\21\214\1\220"+
    "\1\214\1\221\15\214\1\222\16\214\31\223\1\224\27\223"+
    "\1\225\16\223\27\226\1\227\50\226\1\230\1\215\20\230"+
    "\1\231\1\232\35\230\1\233\17\230\1\215\2\230\1\234"+
    "\4\230\15\234\2\230\1\234\2\230\1\234\2\230\12\234"+
    "\2\230\1\234\5\230\1\234\1\233\10\230\4\234\2\230"+
    "\6\235\1\236\46\235\1\237\30\235\1\236\47\235\1\240"+
    "\21\235\6\241\1\242\71\241\6\243\1\244\46\243\1\245"+
    "\5\243\1\244\1\243\1\244\10\243\1\244\7\243\1\244"+
    "\47\243\1\246\4\243\1\244\1\243\1\244\10\243\1\244"+
    "\1\243\1\230\1\215\42\230\1\247\14\230\1\233\17\230"+
    "\1\215\6\230\1\250\25\230\1\251\22\230\1\233\17\230"+
    "\1\215\43\230\1\252\13\230\1\233\17\230\1\215\21\230"+
    "\1\253\15\230\1\254\1\255\1\230\1\256\1\257\1\260"+
    "\12\230\1\233\17\230\1\215\16\230\1\261\24\230\1\262"+
    "\13\230\1\233\17\230\1\215\47\230\1\263\7\230\1\233"+
    "\17\230\1\215\41\230\1\264\1\230\1\265\13\230\1\233"+
    "\17\230\1\215\21\230\1\266\12\230\1\267\3\230\1\270"+
    "\4\230\1\271\11\230\1\233\17\230\1\215\34\230\1\272"+
    "\22\230\1\233\17\230\1\215\11\230\1\273\1\230\1\274"+
    "\43\230\1\233\17\230\1\215\43\230\1\275\13\230\1\233"+
    "\17\230\1\215\27\230\1\276\4\230\1\277\22\230\1\233"+
    "\17\230\1\215\15\230\1\300\4\230\1\301\34\230\1\233"+
    "\17\230\1\215\37\230\1\302\3\230\1\303\13\230\1\233"+
    "\17\230\1\215\34\230\1\304\22\230\1\233\17\230\1\215"+
    "\43\230\1\305\13\230\1\233\17\230\1\215\43\230\1\303"+
    "\13\230\1\233\17\230\1\215\16\230\1\306\3\230\1\307"+
    "\34\230\1\233\17\230\1\215\53\230\1\310\1\311\2\230"+
    "\1\233\17\230\1\215\46\230\1\312\10\230\1\233\16\230"+
    "\1\313\1\215\14\313\1\314\62\313\1\215\47\313\1\315"+
    "\26\313\1\230\1\215\51\230\1\316\5\230\1\233\16\230"+
    "\1\313\1\215\14\313\1\317\61\313\1\230\1\215\2\230"+
    "\1\320\4\230\3\320\1\321\1\320\1\322\1\320\1\323"+
    "\3\320\1\324\1\320\2\230\1\320\2\230\1\320\2\230"+
    "\1\325\2\320\1\326\1\327\1\330\1\331\1\332\2\320"+
    "\2\230\1\320\5\230\1\320\1\233\10\230\4\320\2\230"+
    "\5\333\1\334\27\333\1\335\16\333\1\336\23\333\1\230"+
    "\1\215\22\230\1\337\11\230\1\340\20\230\1\341\1\230"+
    "\1\233\17\230\1\215\2\230\1\342\4\230\15\342\2\230"+
    "\1\342\2\230\1\342\2\230\12\342\2\230\1\342\2\230"+
    "\2\343\1\341\1\342\1\233\10\230\4\342\3\230\1\215"+
    "\57\230\1\233\17\230\1\215\2\230\1\344\4\230\15\344"+
    "\2\230\1\344\2\230\1\344\1\230\1\345\12\344\2\230"+
    "\1\344\4\230\1\341\1\344\1\233\10\230\4\344\3\230"+
    "\1\215\47\230\1\346\5\230\1\341\1\230\1\233\17\230"+
    "\1\215\52\230\1\347\2\230\1\341\1\230\1\233\16\230"+
    "\1\350\1\215\11\350\1\351\1\352\7\350\1\353\11\350"+
    "\1\354\4\350\1\355\3\350\1\356\11\350\1\357\16\350"+
    "\1\360\1\215\47\360\1\361\7\360\1\362\16\360\1\230"+
    "\1\215\57\230\1\233\1\230\1\363\15\230\1\215\57\230"+
    "\1\364\16\230\1\365\1\215\55\365\1\366\20\365\1\230"+
    "\1\215\57\230\1\233\1\230\1\367\14\230\1\370\1\215"+
    "\57\370\1\371\14\370\1\372\1\370\1\230\1\215\2\230"+
    "\1\373\4\230\15\373\2\230\1\373\2\230\1\373\2\230"+
    "\12\373\2\230\1\373\5\230\1\373\1\233\1\230\1\374"+
    "\6\230\4\373\3\230\1\215\2\230\1\375\4\230\15\375"+
    "\2\230\1\375\2\230\1\375\2\230\12\375\2\230\1\375"+
    "\5\230\1\375\1\233\1\230\1\374\6\230\4\375\3\230"+
    "\1\215\41\230\1\376\15\230\1\233\17\230\1\215\57\230"+
    "\1\377\17\230\1\215\55\230\1\u0100\1\230\1\233\17\230"+
    "\1\215\12\230\1\u0101\44\230\1\233\17\230\1\215\34\230"+
    "\1\u0102\22\230\1\233\17\230\1\215\22\230\1\u0103\11\230"+
    "\1\u0104\22\230\1\233\16\230\1\360\1\215\47\360\1\u0105"+
    "\7\360\1\362\16\360\1\230\1\215\41\230\1\u0106\15\230"+
    "\1\233\17\230\1\215\22\230\1\u0107\34\230\1\233\17\230"+
    "\1\215\12\230\1\u0108\44\230\1\233\17\230\1\215\57\230"+
    "\1\u0109\17\230\1\215\55\230\1\u010a\1\230\1\233\17\230"+
    "\1\215\37\230\1\u010b\17\230\1\233\16\230\1\u010c\1\215"+
    "\51\u010c\1\u010d\24\u010c\1\230\1\215\40\230\1\u010e\16\230"+
    "\1\233\17\230\1\215\37\230\1\u010b\1\u010e\16\230\1\233"+
    "\16\230\1\u010f\1\215\51\u010f\1\u0110\24\u010f\1\230\1\215"+
    "\14\230\1\u0111\42\230\1\233\17\230\1\215\35\230\1\u0112"+
    "\21\230\1\233\17\230\1\215\11\230\1\u0113\10\230\1\u0114"+
    "\34\230\1\233\1\230\1\363\15\230\1\215\57\230\1\233"+
    "\2\230\1\u0115\13\230\1\u0116\1\215\1\u0117\1\u0118\1\u0119"+
    "\4\u0116\3\u0119\1\u011a\1\u0119\1\u011b\1\u0119\1\u011c\1\u0119"+
    "\1\u011d\1\u011e\1\u011f\1\u0119\2\u0116\1\u0119\2\u0116\1\u0119"+
    "\2\u0116\1\u0120\2\u0119\1\u0121\1\u0122\4\u0119\1\u0123\2\u0116"+
    "\1\u0119\1\u0124\1\u0116\2\u0125\1\u0116\1\u0119\1\u0126\3\u0116"+
    "\1\u0127\1\u0116\1\u0128\2\u0116\4\u0119\2\u0116\1\u0129\1\215"+
    "\2\u0129\1\u012a\4\u0129\14\u012a\5\u0129\3\u012a\1\u0129\4\u012a"+
    "\1\u012b\5\u012a\2\u0129\1\u012a\5\u0129\1\u012a\1\u012c\10\u0129"+
    "\4\u012a\2\u0129\1\u012d\1\215\2\u012d\1\u012e\4\u012d\14\u012e"+
    "\5\u012d\3\u012e\1\u012d\4\u012e\1\u012f\5\u012e\2\u012d\1\u012e"+
    "\5\u012d\1\u012e\1\u0130\10\u012d\4\u012e\2\u012d\1\u0131\1\215"+
    "\2\u0131\1\u0132\4\u0131\3\u0132\1\u0133\10\u0132\5\u0131\3\u0132"+
    "\1\u0131\12\u0132\2\u0131\1\u0132\5\u0131\1\u0132\1\u0134\10\u0131"+
    "\4\u0132\2\u0131\1\u0135\1\u0136\2\u0135\1\u0137\1\u0138\3\u0135"+
    "\14\u0137\2\u0135\1\u0139\2\u0135\3\u0137\1\u0135\5\u0137\1\u013a"+
    "\1\u013b\3\u0137\2\u0135\1\u0137\5\u0135\1\u0137\1\u013c\1\u013d"+
    "\7\u0135\4\u0137\2\u0135\1\230\1\215\2\230\1\u013e\4\230"+
    "\3\u013e\1\u013f\1\u013e\1\u0140\1\u013e\1\u0141\3\u013e\1\u0142"+
    "\1\u013e\2\230\1\u013e\2\230\1\u013e\1\230\1\u0143\1\u0144"+
    "\2\u013e\1\u0145\1\u0146\1\u0147\1\u0148\1\u0149\2\u013e\2\230"+
    "\1\u013e\5\230\1\u013e\1\233\10\230\4\u013e\2\230\1\u014a"+
    "\1\215\66\u014a\1\u014b\7\u014a\1\230\1\215\11\230\1\u014c"+
    "\7\230\1\u014d\1\u014e\12\230\1\u0112\7\230\1\u014f\10\230"+
    "\1\u0150\1\233\17\230\1\215\56\230\1\u0150\1\233\17\230"+
    "\1\215\21\230\1\u014d\1\u014e\33\230\1\u0150\1\233\17\230"+
    "\1\215\21\230\1\u014d\1\u014e\12\230\1\u0112\20\230\1\u0150"+
    "\1\233\17\230\1\215\45\230\1\u0151\11\230\1\233\16\230"+
    "\1\313\1\215\47\313\1\u0152\27\313\1\215\14\313\1\u0153"+
    "\61\313\1\230\1\215\41\230\1\u0154\15\230\1\233\17\230"+
    "\1\215\11\230\1\u0155\45\230\1\233\16\230\1\313\1\215"+
    "\47\313\1\u0156\26\313\1\230\1\215\27\230\1\276\27\230"+
    "\1\233\17\230\1\215\56\230\1\u0157\1\233\17\230\1\215"+
    "\21\230\1\u0158\35\230\1\233\17\230\1\215\44\230\1\u0159"+
    "\12\230\1\233\16\230\1\360\1\215\47\360\1\u015a\7\360"+
    "\1\362\16\360\1\u015b\1\215\14\u015b\1\u015c\22\u015b\1\u015d"+
    "\17\u015b\1\u015e\16\u015b\1\u015f\1\215\34\u015f\1\u0160\22\u015f"+
    "\1\u0161\16\u015f\1\230\1\215\11\230\1\u0162\1\230\1\u0163"+
    "\43\230\1\233\16\230\1\360\1\215\40\360\1\u0164\16\360"+
    "\1\362\16\360\1\230\1\215\22\230\1\u0165\34\230\1\233"+
    "\16\230\4\u0166\1\u0167\4\u0166\1\u0168\13\u0167\3\u0166\1\u0167"+
    "\1\u0166\3\u0167\1\u0166\12\u0167\2\u0166\1\u0167\1\u0166\1\u0169"+
    "\3\u0166\1\u0167\11\u0166\4\u0167\2\u0166\1\u016a\1\215\52\u016a"+
    "\1\u016b\23\u016a\1\241\1\215\52\241\1\u016c\23\241\1\u016d"+
    "\1\u016e\102\u016d\1\u016f\4\u016d\15\u016f\2\u016d\1\u016f\2\u016d"+
    "\1\u016f\2\u016d\12\u016f\2\u016d\1\u016f\5\u016d\1\u016f\11\u016d"+
    "\4\u016f\2\u016d\1\241\1\215\53\241\1\u0170\1\u0171\27\241"+
    "\1\u0172\54\241\1\u0173\12\241\1\u0174\1\241\6\u0175\1\244"+
    "\54\u0175\1\244\1\u0175\1\u0176\10\u0175\1\244\1\u0175\4\241"+
    "\1\u0177\4\241\15\u0177\2\241\1\u0177\2\241\1\u0177\2\241"+
    "\12\u0177\2\241\1\u0177\5\241\1\u0177\11\241\4\u0177\3\241"+
    "\1\215\60\241\1\u0178\6\241\1\u0179\7\241\1\215\63\241"+
    "\1\u017a\12\241\77\u017b\1\u017c\100\0\1\230\1\215\57\230"+
    "\1\u017d\17\230\1\215\55\230\1\366\1\230\1\233\17\230"+
    "\1\215\57\230\1\u017e\17\230\1\215\57\230\1\233\1\230"+
    "\1\u017f\15\230\1\215\57\230\1\233\14\230\1\372\2\230"+
    "\1\215\57\230\1\233\15\230\1\u0180\1\u0166\1\215\67\u0166"+
    "\1\u0181\6\u0166\1\u016d\1\215\57\u016d\1\u0182\16\u016d\1\0"+
    "\1\u0183\2\0\1\u0184\4\0\15\u0184\2\0\1\u0184\2\0"+
    "\1\u0184\2\0\12\u0184\2\0\1\u0184\5\0\1\u0184\11\0"+
    "\4\u0184\2\0\7\u0185\1\u0186\70\u0185\1\u016d\1\215\52\u016d"+
    "\1\336\4\u016d\1\u0187\16\u016d\1\230\1\215\6\230\1\250"+
    "\50\230\1\233\17\230\1\215\51\230\1\u0188\5\230\1\233"+
    "\17\230\1\215\33\230\1\335\23\230\1\233\17\230\1\215"+
    "\27\230\1\u0189\27\230\1\233\17\230\1\215\27\230\1\u018a"+
    "\27\230\1\233\16\230\1\241\1\215\46\241\1\u018b\27\241"+
    "\1\230\1\215\14\230\1\u018c\42\230\1\233\17\230\1\215"+
    "\21\230\1\u018d\35\230\1\233\17\230\1\215\2\230\1\u018e"+
    "\4\230\15\u018e\2\230\1\u018e\2\230\1\u018e\2\230\12\u018e"+
    "\2\230\1\u018e\5\230\1\u018e\1\233\10\230\4\u018e\3\230"+
    "\1\215\2\230\1\u018f\4\230\15\u018f\2\230\1\u018f\2\230"+
    "\1\u018f\2\230\12\u018f\2\230\1\u018f\5\230\1\u018f\1\233"+
    "\10\230\4\u018f\2\230\4\0\1\u018f\4\0\15\u018f\2\0"+
    "\1\u018f\2\0\1\u018f\2\0\12\u018f\2\0\1\u018f\5\0"+
    "\1\u018f\11\0\4\u018f\2\0\31\241\1\u0190\52\241\1\u0191"+
    "\4\241\15\u0191\2\241\1\u0191\2\241\1\u0191\2\241\12\u0191"+
    "\2\241\1\u0191\5\241\1\u0191\11\241\4\u0191\2\241\1\230"+
    "\1\215\2\230\1\u0192\4\230\15\u0192\2\230\1\u0192\2\230"+
    "\1\u0192\1\230\1\u0193\12\u0192\2\230\1\u0192\5\230\1\u0192"+
    "\1\233\10\230\4\u0192\2\230\31\241\1\u0194\52\241\1\u0191"+
    "\4\241\15\u0191\2\241\1\u0191\2\241\1\u0191\1\241\1\335"+
    "\12\u0191\2\241\1\u0191\5\241\1\u0191\11\241\4\u0191\2\241"+
    "\1\0\1\215\117\0\1\u0195\101\0\1\u0196\112\0\1\u0197"+
    "\60\0\1\u0198\111\0\1\u0199\125\0\1\u019a\51\0\1\u019b"+
    "\46\0\27\226\1\u019c\50\226\45\0\1\u019d\71\0\1\u019e"+
    "\42\0\3\234\4\0\20\234\2\0\2\234\1\0\12\234"+
    "\2\0\1\234\5\0\1\234\11\0\4\234\57\0\1\u019f"+
    "\100\0\1\u01a0\30\0\1\u01a1\3\0\1\u01a2\1\0\1\u01a2"+
    "\1\u01a3\2\0\1\u01a4\133\0\1\u01a5\100\0\1\u01a6\57\0"+
    "\1\u01a7\106\0\1\u01a8\50\0\1\u01a9\101\0\1\u01aa\16\0"+
    "\1\u01ab\76\0\1\u01ac\64\0\1\u01ad\72\0\1\u01ae\77\0"+
    "\1\u01af\77\0\1\u01b0\4\0\1\u01b1\113\0\1\u01b2\63\0"+
    "\1\u01b3\121\0\1\u01b4\55\0\1\u01b5\113\0\1\u01b6\53\0"+
    "\1\u01b7\107\0\1\u01b8\76\0\1\u01b9\74\0\1\u01ba\116\0"+
    "\1\u01bb\100\0\1\u01bc\56\0\1\u01bd\131\0\1\u01be\40\0"+
    "\1\u01bf\111\0\1\u01c0\116\0\1\u01c1\73\0\1\u01c2\57\0"+
    "\1\u01c3\74\0\1\u01c4\102\0\1\u01c5\120\0\1\u01c6\54\0"+
    "\1\u01c7\63\0\1\313\1\0\77\313\1\0\12\313\1\u01c8"+
    "\64\313\1\0\22\313\1\u01c9\53\313\2\0\3\320\4\0"+
    "\20\320\1\u01ca\1\0\2\320\1\0\12\320\2\0\1\320"+
    "\5\0\1\320\11\0\4\320\4\0\3\320\4\0\20\320"+
    "\1\u01ca\1\0\2\320\1\0\1\u01cb\11\320\2\0\1\320"+
    "\5\0\1\320\11\0\4\320\4\0\3\320\4\0\3\320"+
    "\1\u01cc\14\320\1\u01ca\1\0\2\320\1\0\12\320\2\0"+
    "\1\320\5\0\1\320\11\0\4\320\4\0\3\320\4\0"+
    "\20\320\1\u01ca\1\0\2\320\1\0\1\320\1\u01cd\10\320"+
    "\2\0\1\320\5\0\1\320\11\0\4\320\4\0\3\320"+
    "\4\0\20\320\1\u01ca\1\0\2\320\1\0\4\320\1\u01ce"+
    "\5\320\2\0\1\320\5\0\1\320\11\0\4\320\4\0"+
    "\3\320\4\0\2\320\1\u01cf\15\320\1\u01ca\1\0\2\320"+
    "\1\0\12\320\2\0\1\320\5\0\1\320\11\0\4\320"+
    "\4\0\3\320\4\0\12\320\1\u01d0\5\320\1\u01ca\1\0"+
    "\2\320\1\0\12\320\2\0\1\320\5\0\1\320\11\0"+
    "\4\320\4\0\3\320\4\0\12\320\1\u01d1\5\320\1\u01ca"+
    "\1\0\2\320\1\0\12\320\2\0\1\320\5\0\1\320"+
    "\11\0\4\320\4\0\3\320\4\0\3\320\1\u01d2\14\320"+
    "\1\u01ca\1\0\2\320\1\0\12\320\2\0\1\320\5\0"+
    "\1\320\11\0\4\320\4\0\3\320\4\0\12\320\1\u01d3"+
    "\5\320\1\u01ca\1\0\2\320\1\0\12\320\2\0\1\320"+
    "\5\0\1\320\11\0\4\320\4\0\3\320\4\0\12\320"+
    "\1\u01d4\5\320\1\u01ca\1\0\2\320\1\0\12\320\2\0"+
    "\1\320\5\0\1\320\11\0\4\320\44\0\1\u01d5\50\0"+
    "\1\u01d6\66\0\3\342\4\0\20\342\2\0\2\342\1\0"+
    "\12\342\2\0\1\342\5\0\1\342\11\0\4\342\4\0"+
    "\3\344\4\0\20\344\1\u01d7\1\0\2\344\1\0\12\344"+
    "\2\0\1\344\5\0\1\344\11\0\4\344\40\0\1\u01d8"+
    "\101\0\1\u01d9\62\0\1\u01da\120\0\1\u01db\102\0\1\u01dc"+
    "\53\0\1\u01dd\54\0\1\365\1\0\55\365\1\0\20\365"+
    "\2\0\3\373\4\0\20\373\1\u01de\1\0\2\373\1\0"+
    "\12\373\2\0\1\373\5\0\1\373\11\0\4\373\4\0"+
    "\3\375\4\0\20\375\2\0\2\375\1\0\12\375\2\0"+
    "\1\375\5\0\1\375\11\0\4\375\51\0\1\u01df\102\0"+
    "\1\u01e0\40\0\1\u01e1\107\0\1\u01e2\120\0\1\u01e3\100\0"+
    "\1\u01e4\50\0\1\u01e5\121\0\1\u01e6\75\0\1\u01e7\41\0"+
    "\1\u010c\1\0\51\u010c\1\0\24\u010c\16\0\1\u01e8\61\0"+
    "\1\u010f\1\0\51\u010f\1\0\24\u010f\24\0\1\u01e9\111\0"+
    "\1\u01ea\57\0\1\u01eb\75\0\1\u01ec\65\0\1\u0117\1\u01ed"+
    "\1\u01ee\31\0\1\u01ee\43\0\1\u01ed\1\u01ef\76\0\3\u01f0"+
    "\4\0\20\u01f0\1\u01f1\1\0\2\u01f0\1\0\12\u01f0\2\0"+
    "\1\u01f0\5\0\1\u01f0\11\0\4\u01f0\4\0\3\u01f0\4\0"+
    "\20\u01f0\1\u01f1\1\0\2\u01f0\1\0\1\u01f2\11\u01f0\2\0"+
    "\1\u01f0\5\0\1\u01f0\11\0\4\u01f0\4\0\3\u01f0\4\0"+
    "\3\u01f0\1\u01f3\14\u01f0\1\u01f1\1\0\2\u01f0\1\0\7\u01f0"+
    "\1\u01f4\2\u01f0\2\0\1\u01f0\5\0\1\u01f0\11\0\4\u01f0"+
    "\4\0\3\u01f0\4\0\5\u01f0\1\u01f5\12\u01f0\1\u01f1\1\0"+
    "\2\u01f0\1\0\1\u01f0\1\u01f6\10\u01f0\2\0\1\u01f0\5\0"+
    "\1\u01f0\11\0\4\u01f0\4\0\3\u01f0\4\0\20\u01f0\1\u01f1"+
    "\1\0\2\u01f0\1\0\7\u01f0\1\u01f7\2\u01f0\2\0\1\u01f0"+
    "\5\0\1\u01f0\11\0\4\u01f0\4\0\3\u01f0\4\0\20\u01f0"+
    "\1\u01f1\1\0\2\u01f0\1\0\1\u01f0\1\u01f8\10\u01f0\2\0"+
    "\1\u01f0\5\0\1\u01f0\11\0\4\u01f0\4\0\3\u01f0\4\0"+
    "\20\u01f0\1\u01f1\1\0\2\u01f0\1\0\1\u01f9\11\u01f0\2\0"+
    "\1\u01f0\5\0\1\u01f0\11\0\4\u01f0\4\0\3\u01f0\4\0"+
    "\2\u01f0\1\u01fa\15\u01f0\1\u01f1\1\0\2\u01f0\1\0\12\u01f0"+
    "\2\0\1\u01f0\5\0\1\u01f0\11\0\4\u01f0\4\0\3\u01f0"+
    "\4\0\12\u01f0\1\u01fb\5\u01f0\1\u01f1\1\0\2\u01f0\1\0"+
    "\1\u01fc\11\u01f0\2\0\1\u01f0\5\0\1\u01f0\11\0\4\u01f0"+
    "\4\0\3\u01f0\4\0\12\u01f0\1\u01fd\5\u01f0\1\u01f1\1\0"+
    "\2\u01f0\1\0\12\u01f0\2\0\1\u01fe\5\0\1\u01f0\11\0"+
    "\4\u01f0\4\0\3\u01f0\4\0\12\u01f0\1\u01ff\5\u01f0\1\u01f1"+
    "\1\0\2\u01f0\1\0\12\u01f0\2\0\1\u01f0\5\0\1\u01f0"+
    "\11\0\4\u01f0\56\0\1\u0200\11\0\1\u0201\15\0\1\u012a"+
    "\4\0\14\u012a\5\0\3\u012a\1\0\12\u012a\2\0\1\u012a"+
    "\5\0\1\u012a\11\0\4\u012a\6\0\1\u012a\4\0\5\u012a"+
    "\1\u0202\6\u012a\5\0\3\u012a\1\0\12\u012a\2\0\1\u012a"+
    "\5\0\1\u012a\11\0\4\u012a\6\0\1\u012e\4\0\14\u012e"+
    "\5\0\3\u012e\1\0\12\u012e\2\0\1\u012e\5\0\1\u012e"+
    "\11\0\4\u012e\6\0\1\u012e\4\0\5\u012e\1\u0203\6\u012e"+
    "\5\0\3\u012e\1\0\12\u012e\2\0\1\u012e\5\0\1\u012e"+
    "\11\0\4\u012e\6\0\1\u0132\4\0\14\u0132\5\0\3\u0132"+
    "\1\0\12\u0132\2\0\1\u0132\5\0\1\u0132\11\0\4\u0132"+
    "\6\0\1\u0132\4\0\14\u0132\5\0\3\u0132\1\0\1\u0132"+
    "\1\u0204\10\u0132\2\0\1\u0132\5\0\1\u0132\11\0\4\u0132"+
    "\6\0\1\u0205\4\0\14\u0205\5\0\3\u0205\1\0\12\u0205"+
    "\2\0\1\u0205\5\0\1\u0205\11\0\4\u0205\6\0\1\u0205"+
    "\4\0\14\u0205\5\0\3\u0205\1\0\7\u0205\1\u0206\2\u0205"+
    "\2\0\1\u0205\5\0\1\u0205\11\0\4\u0205\6\0\1\u0205"+
    "\4\0\5\u0205\1\u0207\6\u0205\5\0\3\u0205\1\0\12\u0205"+
    "\2\0\1\u0205\5\0\1\u0205\11\0\4\u0205\11\0\1\u0208"+
    "\21\0\1\u0199\130\0\1\u0209\17\0\3\u013e\4\0\20\u013e"+
    "\1\u020a\1\0\2\u013e\1\0\12\u013e\2\0\1\u013e\5\0"+
    "\1\u013e\11\0\4\u013e\4\0\3\u013e\4\0\20\u013e\1\u020a"+
    "\1\0\2\u013e\1\0\1\u020b\11\u013e\2\0\1\u013e\5\0"+
    "\1\u013e\11\0\4\u013e\4\0\3\u013e\4\0\3\u013e\1\u020c"+
    "\14\u013e\1\u020a\1\0\2\u013e\1\0\12\u013e\2\0\1\u013e"+
    "\5\0\1\u013e\11\0\4\u013e\4\0\3\u013e\4\0\20\u013e"+
    "\1\u020a\1\0\2\u013e\1\0\1\u013e\1\u020d\10\u013e\2\0"+
    "\1\u013e\5\0\1\u013e\11\0\4\u013e\4\0\3\u013e\4\0"+
    "\20\u013e\1\u020a\1\0\2\u013e\1\0\4\u013e\1\u020e\5\u013e"+
    "\2\0\1\u013e\5\0\1\u013e\11\0\4\u013e\33\0\1\u020f"+
    "\50\0\3\u013e\4\0\2\u013e\1\u0210\15\u013e\1\u020a\1\0"+
    "\2\u013e\1\0\12\u013e\2\0\1\u013e\5\0\1\u013e\11\0"+
    "\4\u013e\4\0\3\u013e\4\0\12\u013e\1\u0211\5\u013e\1\u020a"+
    "\1\0\2\u013e\1\0\12\u013e\2\0\1\u013e\5\0\1\u013e"+
    "\11\0\4\u013e\4\0\3\u013e\4\0\12\u013e\1\u0212\5\u013e"+
    "\1\u020a\1\0\2\u013e\1\0\12\u013e\2\0\1\u013e\5\0"+
    "\1\u013e\11\0\4\u013e\4\0\3\u013e\4\0\3\u013e\1\u0213"+
    "\14\u013e\1\u020a\1\0\2\u013e\1\0\12\u013e\2\0\1\u013e"+
    "\5\0\1\u013e\11\0\4\u013e\4\0\3\u013e\4\0\12\u013e"+
    "\1\u0214\5\u013e\1\u020a\1\0\2\u013e\1\0\12\u013e\2\0"+
    "\1\u013e\5\0\1\u013e\11\0\4\u013e\4\0\3\u013e\4\0"+
    "\12\u013e\1\u0215\5\u013e\1\u020a\1\0\2\u013e\1\0\12\u013e"+
    "\2\0\1\u013e\5\0\1\u013e\11\0\4\u013e\2\0\1\u014a"+
    "\1\0\66\u014a\1\0\7\u014a\37\0\1\u0216\54\0\1\u0217"+
    "\135\0\1\u0218\50\0\1\u0219\54\0\1\313\1\0\12\313"+
    "\1\u021a\63\313\45\0\1\u021b\70\0\1\u021c\113\0\1\u021d"+
    "\64\0\1\u021e\100\0\1\u021f\63\0\1\u0220\111\0\1\u0221"+
    "\60\0\1\u0222\116\0\1\u0223\100\0\1\u0224\63\0\1\u0225"+
    "\70\0\1\u0226\65\0\3\u0167\4\0\14\u0167\2\0\2\u0167"+
    "\1\u0227\3\u0167\1\0\12\u0167\2\0\1\u0167\5\0\1\u0167"+
    "\11\0\4\u0167\4\0\3\u0167\4\0\6\u0167\1\u0228\5\u0167"+
    "\2\0\2\u0167\1\u0227\3\u0167\1\0\12\u0167\2\0\1\u0167"+
    "\5\0\1\u0167\11\0\4\u0167\73\0\1\u016d\77\0\1\u0229"+
    "\7\0\1\u016e\100\0\3\u016f\4\0\20\u016f\1\u022a\1\0"+
    "\2\u016f\1\0\12\u016f\2\0\1\u016f\5\0\1\u016f\11\0"+
    "\4\u016f\11\0\1\u022b\3\0\1\u022c\1\0\1\u022c\1\u022d"+
    "\2\0\1\u022e\141\0\1\u022f\112\0\1\u0230\1\0\6\u0175"+
    "\1\0\54\u0175\1\0\1\u0175\1\0\10\u0175\1\0\1\u0175"+
    "\54\0\1\u0231\5\0\1\u016d\3\0\1\u0232\13\0\3\u0177"+
    "\4\0\20\u0177\1\u0233\1\0\2\u0177\1\0\12\u0177\2\0"+
    "\1\u0177\5\0\1\u0177\11\0\4\u0177\73\0\1\u0234\70\0"+
    "\1\u0235\15\0\77\u017b\1\u0236\7\0\1\u0237\21\0\1\u0199"+
    "\47\0\1\u0183\100\0\3\u0184\4\0\20\u0184\1\u0238\1\0"+
    "\2\u0184\1\0\12\u0184\2\0\1\u0184\5\0\1\u0184\11\0"+
    "\4\u0184\2\0\57\u0185\1\u0239\20\u0185\31\0\1\u023a\72\0"+
    "\1\u023b\122\0\1\u023c\32\0\3\u018e\4\0\20\u018e\2\0"+
    "\2\u018e\1\0\12\u018e\2\0\1\u018e\5\0\1\u018e\11\0"+
    "\4\u018e\4\0\3\u018f\4\0\20\u018f\1\u023d\1\0\2\u018f"+
    "\1\0\12\u018f\2\0\1\u018f\5\0\1\u018f\11\0\4\u018f"+
    "\4\0\3\u0191\4\0\20\u0191\2\0\2\u0191\1\0\12\u0191"+
    "\2\0\1\u0191\5\0\1\u0191\11\0\4\u0191\4\0\3\u0192"+
    "\4\0\20\u0192\1\u023e\1\0\2\u0192\1\0\12\u0192\2\0"+
    "\1\u0192\5\0\1\u0192\11\0\4\u0192\33\0\1\u023f\70\0"+
    "\1\u0240\116\0\1\u0241\100\0\1\u0242\55\0\1\u0243\150\0"+
    "\1\u0244\31\0\1\u0245\115\0\1\u0246\40\0\1\u0247\6\0"+
    "\1\u0248\102\0\1\u0249\102\0\1\u024a\1\u024b\101\0\1\u024c"+
    "\114\0\1\u024d\102\0\1\u024e\54\0\1\u024f\74\0\1\u0250"+
    "\124\0\1\u0251\105\0\1\u0252\50\0\1\u0253\24\0\1\u0254"+
    "\71\0\1\u0255\57\0\1\u0256\104\0\1\u0257\75\0\1\u0258"+
    "\113\0\1\u0259\70\0\1\u025a\122\0\1\u025b\54\0\1\u025c"+
    "\111\0\1\u025d\74\0\1\u025e\54\0\1\u025f\131\0\1\u0260"+
    "\52\0\1\u0261\75\0\1\u0262\117\0\1\u0263\60\0\1\u0264"+
    "\74\0\1\u0265\124\0\1\u0266\110\0\1\u0267\74\0\1\u0268"+
    "\47\0\1\u0269\116\0\1\u026a\60\0\1\u026b\116\0\1\u026c"+
    "\100\0\1\u026d\44\0\1\u026e\4\0\15\u026e\2\0\1\u026e"+
    "\2\0\1\u026e\2\0\12\u026e\2\0\1\u026e\5\0\1\u026e"+
    "\11\0\4\u026e\4\0\3\320\4\0\1\u026f\17\320\1\u01ca"+
    "\1\0\2\320\1\0\12\320\2\0\1\320\5\0\1\320"+
    "\11\0\4\320\4\0\3\320\4\0\3\320\1\u0270\14\320"+
    "\1\u01ca\1\0\2\320\1\0\12\320\2\0\1\320\5\0"+
    "\1\320\11\0\4\320\4\0\3\320\4\0\12\320\1\u0271"+
    "\5\320\1\u01ca\1\0\2\320\1\0\12\320\2\0\1\320"+
    "\5\0\1\320\11\0\4\320\4\0\3\320\4\0\20\320"+
    "\1\u01ca\1\0\2\320\1\0\12\320\2\0\1\u0272\5\0"+
    "\1\320\11\0\4\320\4\0\3\320\4\0\20\320\1\u01ca"+
    "\1\0\2\320\1\0\1\u0273\11\320\2\0\1\320\5\0"+
    "\1\320\11\0\4\320\4\0\3\320\4\0\20\320\1\u01ca"+
    "\1\0\2\320\1\0\4\320\1\u0274\5\320\2\0\1\320"+
    "\5\0\1\320\11\0\4\320\4\0\3\320\4\0\6\320"+
    "\1\u0275\11\320\1\u01ca\1\0\2\320\1\0\12\320\2\0"+
    "\1\320\5\0\1\320\11\0\4\320\4\0\3\320\4\0"+
    "\20\320\1\u01ca\1\0\2\320\1\0\1\u0276\11\320\2\0"+
    "\1\320\5\0\1\320\11\0\4\320\4\0\3\320\4\0"+
    "\20\320\1\u01ca\1\0\2\320\1\0\5\320\1\u0277\4\320"+
    "\2\0\1\320\5\0\1\320\11\0\4\320\4\0\3\320"+
    "\4\0\20\320\1\u01ca\1\0\2\320\1\0\3\320\1\u0278"+
    "\6\320\2\0\1\320\5\0\1\320\11\0\4\320\54\0"+
    "\1\u0279\63\0\1\u027a\45\0\1\u027b\4\0\15\u027b\2\0"+
    "\1\u027b\2\0\1\u027b\2\0\12\u027b\2\0\1\u027b\5\0"+
    "\1\u027b\11\0\4\u027b\16\0\1\u027c\103\0\1\u027d\76\0"+
    "\1\u027e\116\0\1\u027f\100\0\1\u0280\44\0\1\u0281\4\0"+
    "\15\u0281\2\0\1\u0281\2\0\1\u0281\2\0\12\u0281\2\0"+
    "\1\u0281\5\0\1\u0281\11\0\4\u0281\40\0\1\u0282\65\0"+
    "\1\u0283\72\0\1\u0284\116\0\1\u0285\55\0\1\u0286\103\0"+
    "\1\u0287\126\0\1\u0288\54\0\1\u0289\67\0\1\u028a\74\0"+
    "\1\u028b\125\0\1\u028c\42\0\1\u01ed\1\0\1\u01ee\31\0"+
    "\1\u01ee\43\0\1\u028d\2\0\1\u028e\21\0\1\u028e\54\0"+
    "\1\u028f\4\0\15\u028f\2\0\1\u028f\2\0\1\u028f\2\0"+
    "\12\u028f\2\0\1\u028f\5\0\1\u028f\11\0\4\u028f\4\0"+
    "\3\u01f0\4\0\1\u0290\17\u01f0\1\u01f1\1\0\2\u01f0\1\0"+
    "\12\u01f0\2\0\1\u01f0\5\0\1\u01f0\11\0\4\u01f0\4\0"+
    "\3\u01f0\4\0\3\u01f0\1\u0291\14\u01f0\1\u01f1\1\0\2\u01f0"+
    "\1\0\12\u01f0\2\0\1\u01f0\5\0\1\u01f0\11\0\4\u01f0"+
    "\4\0\3\u01f0\4\0\20\u01f0\1\u01f1\1\0\2\u01f0\1\0"+
    "\4\u01f0\1\u0292\5\u01f0\2\0\1\u01f0\5\0\1\u01f0\11\0"+
    "\4\u01f0\4\0\3\u01f0\4\0\20\u01f0\1\u01f1\1\0\2\u01f0"+
    "\1\0\1\u01f0\1\u0293\10\u01f0\2\0\1\u01f0\5\0\1\u01f0"+
    "\11\0\4\u01f0\4\0\3\u01f0\4\0\12\u01f0\1\u0294\5\u01f0"+
    "\1\u01f1\1\0\2\u01f0\1\0\1\u0295\11\u01f0\2\0\1\u01f0"+
    "\5\0\1\u01f0\11\0\4\u01f0\4\0\3\u01f0\4\0\12\u01f0"+
    "\1\u0296\5\u01f0\1\u01f1\1\0\2\u01f0\1\0\12\u01f0\2\0"+
    "\1\u01f0\5\0\1\u01f0\11\0\4\u01f0\4\0\3\u01f0\4\0"+
    "\20\u01f0\1\u01f1\1\0\2\u01f0\1\0\3\u01f0\1\u0297\6\u01f0"+
    "\2\0\1\u01f0\5\0\1\u01f0\11\0\4\u01f0\4\0\3\u01f0"+
    "\4\0\2\u01f0\1\u0298\15\u01f0\1\u01f1\1\0\2\u01f0\1\0"+
    "\12\u01f0\2\0\1\u01f0\5\0\1\u01f0\11\0\4\u01f0\4\0"+
    "\3\u01f0\4\0\20\u01f0\1\u01f1\1\0\2\u01f0\1\0\1\u0299"+
    "\11\u01f0\2\0\1\u01f0\5\0\1\u01f0\11\0\4\u01f0\4\0"+
    "\3\u01f0\4\0\20\u01f0\1\u01f1\1\0\2\u01f0\1\0\4\u01f0"+
    "\1\u029a\5\u01f0\2\0\1\u01f0\5\0\1\u01f0\11\0\4\u01f0"+
    "\4\0\3\u01f0\4\0\13\u01f0\1\u029b\4\u01f0\1\u01f1\1\0"+
    "\2\u01f0\1\0\12\u01f0\2\0\1\u01f0\5\0\1\u01f0\11\0"+
    "\4\u01f0\4\0\3\u01f0\4\0\6\u01f0\1\u029c\11\u01f0\1\u01f1"+
    "\1\0\2\u01f0\1\0\12\u01f0\2\0\1\u01f0\5\0\1\u01f0"+
    "\11\0\4\u01f0\4\0\3\u01f0\4\0\20\u01f0\1\u01f1\1\0"+
    "\2\u01f0\1\0\5\u01f0\1\u029d\4\u01f0\2\0\1\u01f0\5\0"+
    "\1\u01f0\11\0\4\u01f0\4\0\3\u01f0\4\0\2\u01f0\1\u029e"+
    "\15\u01f0\1\u01f1\1\0\2\u01f0\1\0\12\u01f0\2\0\1\u01f0"+
    "\5\0\1\u01f0\11\0\4\u01f0\31\0\1\u029f\54\0\1\u012a"+
    "\4\0\13\u012a\1\u02a0\5\0\3\u012a\1\0\12\u012a\2\0"+
    "\1\u012a\5\0\1\u012a\11\0\4\u012a\6\0\1\u012e\4\0"+
    "\13\u012e\1\u02a1\5\0\3\u012e\1\0\12\u012e\2\0\1\u012e"+
    "\5\0\1\u012e\11\0\4\u012e\6\0\1\u0132\4\0\14\u0132"+
    "\5\0\3\u0132\1\0\1\u02a2\11\u0132\2\0\1\u0132\5\0"+
    "\1\u0132\11\0\4\u0132\6\0\1\u0205\4\0\13\u0205\1\u02a3"+
    "\5\0\3\u0205\1\0\12\u0205\2\0\1\u0205\5\0\1\u0205"+
    "\11\0\4\u0205\6\0\1\u0205\4\0\2\u0205\1\u02a4\11\u0205"+
    "\5\0\3\u0205\1\0\12\u0205\2\0\1\u0205\5\0\1\u0205"+
    "\11\0\4\u0205\6\0\1\u02a5\4\0\15\u02a5\2\0\1\u02a5"+
    "\2\0\1\u02a5\1\0\1\u02a6\12\u02a5\2\0\1\u02a5\5\0"+
    "\1\u02a5\11\0\4\u02a5\4\0\3\u013e\4\0\1\u02a7\17\u013e"+
    "\1\u020a\1\0\2\u013e\1\0\12\u013e\2\0\1\u013e\5\0"+
    "\1\u013e\11\0\4\u013e\4\0\3\u013e\4\0\3\u013e\1\u02a8"+
    "\14\u013e\1\u020a\1\0\2\u013e\1\0\12\u013e\2\0\1\u013e"+
    "\5\0\1\u013e\11\0\4\u013e\4\0\3\u013e\4\0\12\u013e"+
    "\1\u02a9\5\u013e\1\u020a\1\0\2\u013e\1\0\12\u013e\2\0"+
    "\1\u013e\5\0\1\u013e\11\0\4\u013e\4\0\3\u013e\4\0"+
    "\20\u013e\1\u020a\1\0\2\u013e\1\0\12\u013e\2\0\1\u02aa"+
    "\5\0\1\u013e\11\0\4\u013e\6\0\1\u02a5\4\0\15\u02a5"+
    "\2\0\1\u02a5\2\0\1\u02a5\2\0\12\u02a5\2\0\1\u02a5"+
    "\5\0\1\u02a5\11\0\4\u02a5\4\0\3\u013e\4\0\20\u013e"+
    "\1\u020a\1\0\2\u013e\1\0\1\u02ab\11\u013e\2\0\1\u013e"+
    "\5\0\1\u013e\11\0\4\u013e\4\0\3\u013e\4\0\20\u013e"+
    "\1\u020a\1\0\2\u013e\1\0\4\u013e\1\u02ac\5\u013e\2\0"+
    "\1\u013e\5\0\1\u013e\11\0\4\u013e\4\0\3\u013e\4\0"+
    "\6\u013e\1\u02ad\11\u013e\1\u020a\1\0\2\u013e\1\0\12\u013e"+
    "\2\0\1\u013e\5\0\1\u013e\11\0\4\u013e\4\0\3\u013e"+
    "\4\0\20\u013e\1\u020a\1\0\2\u013e\1\0\1\u02ae\11\u013e"+
    "\2\0\1\u013e\5\0\1\u013e\11\0\4\u013e\4\0\3\u013e"+
    "\4\0\20\u013e\1\u020a\1\0\2\u013e\1\0\5\u013e\1\u02af"+
    "\4\u013e\2\0\1\u013e\5\0\1\u013e\11\0\4\u013e\4\0"+
    "\3\u013e\4\0\20\u013e\1\u020a\1\0\2\u013e\1\0\3\u013e"+
    "\1\u02b0\6\u013e\2\0\1\u013e\5\0\1\u013e\11\0\4\u013e"+
    "\43\0\1\u02b1\54\0\1\u02b2\117\0\1\u02b3\100\0\1\u02b4"+
    "\54\0\1\u02b5\121\0\1\u02b6\102\0\1\u02b7\100\0\1\u02b8"+
    "\61\0\1\u02b9\73\0\1\u02ba\75\0\1\u02bb\117\0\1\u02bc"+
    "\54\0\1\u02bd\102\0\1\u02be\63\0\3\u0227\4\0\14\u0227"+
    "\2\0\2\u0227\1\0\3\u0227\1\0\12\u0227\2\0\1\u0227"+
    "\5\0\1\u0227\11\0\4\u0227\4\0\3\u0167\4\0\2\u0167"+
    "\1\u02bf\11\u0167\2\0\2\u0167\1\u0227\3\u0167\1\0\12\u0167"+
    "\2\0\1\u0167\5\0\1\u0167\11\0\4\u0167\6\0\1\u02c0"+
    "\4\0\15\u02c0\2\0\1\u02c0\2\0\1\u02c0\2\0\12\u02c0"+
    "\2\0\1\u02c0\5\0\1\u02c0\11\0\4\u02c0\4\0\1\u02c1"+
    "\6\0\1\u02c2\102\0\1\u02c3\102\0\1\u02c4\1\u02c5\101\0"+
    "\1\u02c6\104\0\1\u02c7\40\0\1\u02c8\13\0\1\u02c9\4\0"+
    "\15\u02c9\2\0\1\u02c9\2\0\1\u02c9\2\0\12\u02c9\2\0"+
    "\1\u02c9\5\0\1\u02c9\11\0\4\u02c9\6\0\1\u02ca\4\0"+
    "\15\u02ca\2\0\1\u02ca\2\0\1\u02ca\2\0\12\u02ca\2\0"+
    "\1\u02ca\5\0\1\u02ca\11\0\4\u02ca\2\0\71\u017b\1\u02cb"+
    "\6\u017b\4\0\1\u02cc\4\0\15\u02cc\2\0\1\u02cc\2\0"+
    "\1\u02cc\2\0\12\u02cc\2\0\1\u02cc\5\0\1\u02cc\11\0"+
    "\4\u02cc\40\0\1\u02cd\63\0\1\u02ce\70\0\1\u02cf\107\0"+
    "\1\u02d0\113\0\1\u02d1\76\0\1\u02d2\43\0\1\u0247\5\0"+
    "\1\u02d3\71\0\1\u02d4\1\0\1\u02d4\5\0\1\u02d4\3\0"+
    "\1\u02d4\17\0\1\u02d4\2\0\2\u02d4\3\0\2\u02d4\22\0"+
    "\3\u02d4\13\0\1\u02d5\107\0\1\u0249\102\0\1\u02d6\77\0"+
    "\1\u01a2\100\0\1\u02d7\76\0\1\u02d8\112\0\1\u02d9\104\0"+
    "\1\u02da\72\0\1\u02db\57\0\1\u02dc\121\0\1\u02dd\63\0"+
    "\1\u02de\116\0\1\u02df\72\0\1\u02e0\77\0\1\u02e1\106\0"+
    "\1\u02e2\56\0\1\u02e3\73\0\1\u02e4\115\0\1\u02e5\104\0"+
    "\1\u02e6\72\0\1\u02e7\60\0\1\u02e8\73\0\1\u02e9\126\0"+
    "\1\u02ea\51\0\1\u02eb\107\0\1\u02ec\71\0\1\u02ed\117\0"+
    "\1\u02ee\77\0\1\u02ef\63\0\1\u02f0\113\0\1\u02f1\57\0"+
    "\1\u02f2\117\0\1\u02f3\60\0\1\u02f4\116\0\1\u02f5\65\0"+
    "\1\u02f6\116\0\1\u02f7\36\0\3\u026e\4\0\20\u026e\2\0"+
    "\2\u026e\1\0\12\u026e\2\0\1\u026e\5\0\1\u026e\11\0"+
    "\4\u026e\4\0\3\320\4\0\3\320\1\u02f8\14\320\1\u01ca"+
    "\1\0\2\320\1\0\12\320\2\0\1\320\5\0\1\320"+
    "\11\0\4\320\4\0\3\320\4\0\20\320\1\u01ca\1\0"+
    "\2\320\1\0\1\320\1\u02f9\10\320\2\0\1\320\5\0"+
    "\1\320\11\0\4\320\4\0\3\320\4\0\20\320\1\u01ca"+
    "\1\0\2\320\1\0\4\320\1\u02fa\5\320\2\0\1\320"+
    "\5\0\1\320\11\0\4\320\4\0\3\320\4\0\20\320"+
    "\1\u01ca\1\0\2\320\1\0\1\u02fb\11\320\2\0\1\320"+
    "\5\0\1\320\11\0\4\320\4\0\3\320\4\0\6\320"+
    "\1\u02fc\11\320\1\u01ca\1\0\2\320\1\0\12\320\2\0"+
    "\1\320\5\0\1\320\11\0\4\320\4\0\3\320\4\0"+
    "\11\320\1\u02fd\6\320\1\u01ca\1\0\2\320\1\0\12\320"+
    "\2\0\1\320\5\0\1\320\11\0\4\320\4\0\3\320"+
    "\4\0\6\320\1\u02fe\11\320\1\u01ca\1\0\2\320\1\0"+
    "\12\320\2\0\1\320\5\0\1\320\11\0\4\320\4\0"+
    "\3\320\4\0\6\320\1\u02ff\11\320\1\u01ca\1\0\2\320"+
    "\1\0\12\320\2\0\1\320\5\0\1\320\11\0\4\320"+
    "\4\0\3\320\4\0\20\320\1\u01ca\1\0\2\320\1\0"+
    "\3\320\1\u0300\6\320\2\0\1\320\5\0\1\320\11\0"+
    "\4\320\4\0\3\320\4\0\20\320\1\u01ca\1\0\2\320"+
    "\1\0\1\u0301\11\320\2\0\1\320\5\0\1\320\11\0"+
    "\4\320\40\0\1\u0302\60\0\1\u0303\62\0\3\u027b\4\0"+
    "\20\u027b\2\0\2\u027b\1\0\12\u027b\2\0\1\u027b\5\0"+
    "\1\u027b\11\0\4\u027b\40\0\1\u0304\77\0\1\u0305\100\0"+
    "\1\u0306\42\0\3\u0281\4\0\20\u0281\2\0\2\u0281\1\0"+
    "\12\u0281\2\0\1\u0281\5\0\1\u0281\11\0\4\u0281\47\0"+
    "\1\u0307\70\0\1\u0308\77\0\1\u0309\100\0\1\u030a\103\0"+
    "\1\u030b\72\0\1\u030c\57\0\1\u030d\117\0\1\u030e\63\0"+
    "\1\u030f\120\0\1\u0310\36\0\1\u028d\77\0\3\u028f\4\0"+
    "\20\u028f\2\0\2\u028f\1\0\12\u028f\2\0\1\u028f\5\0"+
    "\1\u028f\11\0\4\u028f\4\0\3\u01f0\4\0\3\u01f0\1\u0311"+
    "\14\u01f0\1\u01f1\1\0\2\u01f0\1\0\12\u01f0\2\0\1\u01f0"+
    "\5\0\1\u01f0\11\0\4\u01f0\4\0\3\u01f0\4\0\20\u01f0"+
    "\1\u01f1\1\0\2\u01f0\1\0\1\u01f0\1\u0312\10\u01f0\2\0"+
    "\1\u01f0\5\0\1\u01f0\11\0\4\u01f0\4\0\3\u01f0\4\0"+
    "\20\u01f0\1\u01f1\1\0\2\u01f0\1\0\1\u0313\11\u01f0\2\0"+
    "\1\u01f0\5\0\1\u01f0\11\0\4\u01f0\4\0\3\u01f0\4\0"+
    "\20\u01f0\1\u01f1\1\0\2\u01f0\1\0\1\u0314\11\u01f0\2\0"+
    "\1\u01f0\5\0\1\u01f0\11\0\4\u01f0\4\0\3\u01f0\4\0"+
    "\20\u01f0\1\u01f1\1\0\2\u01f0\1\0\4\u01f0\1\u0315\5\u01f0"+
    "\2\0\1\u01f0\5\0\1\u01f0\11\0\4\u01f0\4\0\3\u01f0"+
    "\4\0\20\u01f0\1\u01f1\1\0\2\u01f0\1\0\4\u01f0\1\u0316"+
    "\5\u01f0\2\0\1\u01f0\5\0\1\u01f0\11\0\4\u01f0\4\0"+
    "\3\u01f0\4\0\20\u01f0\1\u01f1\1\0\2\u01f0\1\0\1\u01f0"+
    "\1\u0317\10\u01f0\2\0\1\u01f0\5\0\1\u01f0\11\0\4\u01f0"+
    "\4\0\3\u01f0\4\0\20\u01f0\1\u01f1\1\0\2\u01f0\1\0"+
    "\1\u0318\11\u01f0\2\0\1\u01f0\5\0\1\u01f0\11\0\4\u01f0"+
    "\4\0\3\u01f0\4\0\20\u01f0\1\u01f1\1\0\2\u01f0\1\0"+
    "\11\u01f0\1\u0319\2\0\1\u01f0\5\0\1\u01f0\11\0\4\u01f0"+
    "\4\0\3\u01f0\4\0\6\u01f0\1\u031a\11\u01f0\1\u01f1\1\0"+
    "\2\u01f0\1\0\12\u01f0\2\0\1\u01f0\5\0\1\u01f0\11\0"+
    "\4\u01f0\4\0\3\u01f0\4\0\11\u01f0\1\u031b\6\u01f0\1\u01f1"+
    "\1\0\2\u01f0\1\0\12\u01f0\2\0\1\u01f0\5\0\1\u01f0"+
    "\11\0\4\u01f0\4\0\3\u01f0\4\0\20\u01f0\1\u01f1\1\0"+
    "\2\u01f0\1\0\4\u01f0\1\u031c\5\u01f0\2\0\1\u01f0\5\0"+
    "\1\u01f0\11\0\4\u01f0\4\0\3\u01f0\4\0\6\u01f0\1\u031d"+
    "\11\u01f0\1\u01f1\1\0\2\u01f0\1\0\12\u01f0\2\0\1\u01f0"+
    "\5\0\1\u01f0\11\0\4\u01f0\4\0\3\u01f0\4\0\2\u01f0"+
    "\1\u031e\15\u01f0\1\u01f1\1\0\2\u01f0\1\0\12\u01f0\2\0"+
    "\1\u01f0\5\0\1\u01f0\11\0\4\u01f0\4\0\3\u01f0\4\0"+
    "\2\u01f0\1\u031f\15\u01f0\1\u01f1\1\0\2\u01f0\1\0\12\u01f0"+
    "\2\0\1\u01f0\5\0\1\u01f0\11\0\4\u01f0\31\0\1\u0320"+
    "\54\0\1\u012a\4\0\3\u012a\1\u0321\10\u012a\5\0\3\u012a"+
    "\1\0\12\u012a\2\0\1\u012a\5\0\1\u012a\11\0\4\u012a"+
    "\6\0\1\u012e\4\0\3\u012e\1\u0322\10\u012e\5\0\3\u012e"+
    "\1\0\12\u012e\2\0\1\u012e\5\0\1\u012e\11\0\4\u012e"+
    "\6\0\1\u0132\4\0\5\u0132\1\u0323\6\u0132\5\0\3\u0132"+
    "\1\0\12\u0132\2\0\1\u0132\5\0\1\u0132\11\0\4\u0132"+
    "\6\0\1\u0205\4\0\3\u0205\1\u0324\10\u0205\5\0\3\u0205"+
    "\1\0\12\u0205\2\0\1\u0205\5\0\1\u0205\11\0\4\u0205"+
    "\6\0\1\u0205\4\0\14\u0205\5\0\3\u0205\1\0\5\u0205"+
    "\1\u0325\4\u0205\2\0\1\u0205\5\0\1\u0205\11\0\4\u0205"+
    "\4\0\3\u02a5\4\0\20\u02a5\2\0\2\u02a5\1\0\12\u02a5"+
    "\2\0\1\u02a5\5\0\1\u02a5\11\0\4\u02a5\4\0\3\u013e"+
    "\4\0\3\u013e\1\u0326\14\u013e\1\u020a\1\0\2\u013e\1\0"+
    "\12\u013e\2\0\1\u013e\5\0\1\u013e\11\0\4\u013e\4\0"+
    "\3\u013e\4\0\20\u013e\1\u020a\1\0\2\u013e\1\0\1\u013e"+
    "\1\u0327\10\u013e\2\0\1\u013e\5\0\1\u013e\11\0\4\u013e"+
    "\4\0\3\u013e\4\0\20\u013e\1\u020a\1\0\2\u013e\1\0"+
    "\4\u013e\1\u0328\5\u013e\2\0\1\u013e\5\0\1\u013e\11\0"+
    "\4\u013e\4\0\3\u013e\4\0\20\u013e\1\u020a\1\0\2\u013e"+
    "\1\0\1\u0329\11\u013e\2\0\1\u013e\5\0\1\u013e\11\0"+
    "\4\u013e\4\0\3\u013e\4\0\6\u013e\1\u032a\11\u013e\1\u020a"+
    "\1\0\2\u013e\1\0\12\u013e\2\0\1\u013e\5\0\1\u013e"+
    "\11\0\4\u013e\4\0\3\u013e\4\0\11\u013e\1\u032b\6\u013e"+
    "\1\u020a\1\0\2\u013e\1\0\12\u013e\2\0\1\u013e\5\0"+
    "\1\u013e\11\0\4\u013e\4\0\3\u013e\4\0\6\u013e\1\u032c"+
    "\11\u013e\1\u020a\1\0\2\u013e\1\0\12\u013e\2\0\1\u013e"+
    "\5\0\1\u013e\11\0\4\u013e\4\0\3\u013e\4\0\6\u013e"+
    "\1\u032d\11\u013e\1\u020a\1\0\2\u013e\1\0\12\u013e\2\0"+
    "\1\u013e\5\0\1\u013e\11\0\4\u013e\4\0\3\u013e\4\0"+
    "\20\u013e\1\u020a\1\0\2\u013e\1\0\3\u013e\1\u032e\6\u013e"+
    "\2\0\1\u013e\5\0\1\u013e\11\0\4\u013e\4\0\3\u013e"+
    "\4\0\20\u013e\1\u020a\1\0\2\u013e\1\0\1\u032f\11\u013e"+
    "\2\0\1\u013e\5\0\1\u013e\11\0\4\u013e\40\0\1\u0330"+
    "\107\0\1\u0331\70\0\1\u0332\77\0\1\u0333\76\0\1\u0334"+
    "\77\0\1\u0335\103\0\1\u0336\51\0\1\u0337\107\0\1\u0338"+
    "\71\0\1\u0339\74\0\1\u033a\132\0\1\u033b\33\0\3\u02c0"+
    "\4\0\20\u02c0\2\0\2\u02c0\1\0\12\u02c0\2\0\1\u02c0"+
    "\5\0\1\u02c0\11\0\4\u02c0\4\0\1\u02c1\5\0\1\u033c"+
    "\71\0\1\u033d\1\0\1\u033d\5\0\1\u033d\3\0\1\u033d"+
    "\17\0\1\u033d\2\0\2\u033d\3\0\2\u033d\22\0\3\u033d"+
    "\13\0\1\u033e\107\0\1\u02c3\102\0\1\u033f\77\0\1\u022c"+
    "\103\0\1\u0340\142\0\1\u0341\7\0\3\u02c9\4\0\20\u02c9"+
    "\2\0\2\u02c9\1\0\12\u02c9\2\0\1\u02c9\5\0\1\u02c9"+
    "\11\0\4\u02c9\4\0\3\u02ca\4\0\20\u02ca\1\u0342\1\0"+
    "\2\u02ca\1\0\12\u02ca\2\0\1\u02ca\5\0\1\u02ca\11\0"+
    "\4\u02ca\4\0\3\u02cc\4\0\20\u02cc\2\0\2\u02cc\1\0"+
    "\12\u02cc\2\0\1\u02cc\5\0\1\u02cc\11\0\4\u02cc\41\0"+
    "\1\u0343\53\0\1\u0344\102\0\1\u0345\120\0\1\u0346\101\0"+
    "\1\u0347\75\0\1\u0348\42\0\1\u02d4\1\0\1\u02d4\3\0"+
    "\1\u02d3\1\0\1\u02d4\3\0\1\u02d4\17\0\1\u02d4\2\0"+
    "\2\u02d4\3\0\2\u02d4\22\0\3\u02d4\27\0\1\u0249\116\0"+
    "\1\u0349\75\0\1\u034a\62\0\1\u034b\76\0\1\u034c\113\0"+
    "\1\u034d\62\0\1\u034e\104\0\1\u034f\64\0\1\u0350\101\0"+
    "\1\u0351\105\0\1\u0352\102\0\1\u0353\111\0\1\u0354\74\0"+
    "\1\u0355\100\0\1\u0356\77\0\1\u0357\105\0\1\u0358\71\0"+
    "\1\u0359\76\0\1\u035a\57\0\1\u035b\75\0\1\u035c\123\0"+
    "\1\u035d\53\0\1\u035e\77\0\1\u035f\107\0\1\u0360\112\0"+
    "\1\u0361\53\0\1\u0362\103\0\1\u0363\102\0\1\u0364\101\0"+
    "\1\u0365\111\0\1\u0366\65\0\1\u0367\111\0\1\u0368\61\0"+
    "\1\u0369\61\0\3\320\4\0\20\320\1\u01ca\1\0\2\320"+
    "\1\0\5\320\1\u036a\4\320\2\0\1\320\5\0\1\320"+
    "\11\0\4\320\4\0\3\320\4\0\20\320\1\u01ca\1\0"+
    "\2\320\1\0\1\u036b\11\320\2\0\1\320\5\0\1\320"+
    "\11\0\4\320\4\0\3\320\4\0\6\320\1\u036c\11\320"+
    "\1\u01ca\1\0\2\320\1\0\12\320\2\0\1\320\5\0"+
    "\1\320\11\0\4\320\4\0\3\320\4\0\20\320\1\u01ca"+
    "\1\0\2\320\1\0\1\u036d\11\320\2\0\1\320\5\0"+
    "\1\320\11\0\4\320\4\0\3\320\4\0\6\320\1\u036e"+
    "\11\320\1\u01ca\1\0\2\320\1\0\12\320\2\0\1\320"+
    "\5\0\1\320\11\0\4\320\4\0\3\320\4\0\20\320"+
    "\1\u01ca\1\0\2\320\1\0\1\u036f\11\320\2\0\1\320"+
    "\5\0\1\320\11\0\4\320\21\0\1\u0370\116\0\1\u0371"+
    "\65\0\1\u0372\113\0\1\u0305\77\0\1\u0373\63\0\1\u0374"+
    "\77\0\1\u0375\75\0\1\u0376\114\0\1\u0377\102\0\1\u0378"+
    "\37\0\3\u01f0\4\0\20\u01f0\1\u01f1\1\0\2\u01f0\1\0"+
    "\5\u01f0\1\u0379\4\u01f0\2\0\1\u01f0\5\0\1\u01f0\11\0"+
    "\4\u01f0\4\0\3\u01f0\4\0\13\u01f0\1\u037a\4\u01f0\1\u01f1"+
    "\1\0\2\u01f0\1\0\12\u01f0\2\0\1\u01f0\5\0\1\u01f0"+
    "\11\0\4\u01f0\4\0\3\u01f0\4\0\20\u01f0\1\u01f1\1\0"+
    "\2\u01f0\1\0\7\u01f0\1\u037b\2\u01f0\2\0\1\u01f0\5\0"+
    "\1\u01f0\11\0\4\u01f0\4\0\3\u01f0\4\0\20\u01f0\1\u01f1"+
    "\1\0\2\u01f0\1\0\1\u037c\11\u01f0\2\0\1\u01f0\5\0"+
    "\1\u01f0\11\0\4\u01f0\4\0\3\u01f0\4\0\20\u01f0\1\u01f1"+
    "\1\0\2\u01f0\1\0\1\u037d\11\u01f0\2\0\1\u01f0\5\0"+
    "\1\u01f0\11\0\4\u01f0\4\0\3\u01f0\4\0\20\u01f0\1\u01f1"+
    "\1\0\2\u01f0\1\0\3\u01f0\1\u037e\6\u01f0\2\0\1\u01f0"+
    "\5\0\1\u01f0\11\0\4\u01f0\4\0\3\u01f0\4\0\20\u01f0"+
    "\1\u01f1\1\0\2\u01f0\1\0\1\u01f0\1\u037f\10\u01f0\2\0"+
    "\1\u01f0\5\0\1\u01f0\11\0\4\u01f0\4\0\3\u01f0\4\0"+
    "\20\u01f0\1\u01f1\1\0\2\u01f0\1\0\1\u0380\11\u01f0\2\0"+
    "\1\u01f0\5\0\1\u01f0\11\0\4\u01f0\4\0\3\u01f0\4\0"+
    "\6\u01f0\1\u0381\11\u01f0\1\u01f1\1\0\2\u01f0\1\0\12\u01f0"+
    "\2\0\1\u01f0\5\0\1\u01f0\11\0\4\u01f0\4\0\3\u01f0"+
    "\4\0\20\u01f0\1\u01f1\1\0\2\u01f0\1\0\1\u0382\11\u01f0"+
    "\2\0\1\u01f0\5\0\1\u01f0\11\0\4\u01f0\4\0\3\u01f0"+
    "\4\0\20\u01f0\1\u01f1\1\0\2\u01f0\1\0\1\u0383\11\u01f0"+
    "\2\0\1\u01f0\5\0\1\u01f0\11\0\4\u01f0\4\0\3\u01f0"+
    "\4\0\20\u01f0\1\u01f1\1\0\2\u01f0\1\0\3\u01f0\1\u0384"+
    "\6\u01f0\2\0\1\u01f0\5\0\1\u01f0\11\0\4\u01f0\4\0"+
    "\3\u01f0\4\0\12\u01f0\1\u0385\5\u01f0\1\u01f1\1\0\2\u01f0"+
    "\1\0\12\u01f0\2\0\1\u01f0\5\0\1\u01f0\11\0\4\u01f0"+
    "\6\0\1\u012a\4\0\5\u012a\1\u0386\6\u012a\5\0\3\u012a"+
    "\1\0\12\u012a\2\0\1\u012a\5\0\1\u012a\11\0\4\u012a"+
    "\6\0\1\u012e\4\0\5\u012e\1\u0387\6\u012e\5\0\3\u012e"+
    "\1\0\12\u012e\2\0\1\u012e\5\0\1\u012e\11\0\4\u012e"+
    "\6\0\1\u0132\4\0\3\u0132\1\u0388\10\u0132\5\0\3\u0132"+
    "\1\0\12\u0132\2\0\1\u0132\5\0\1\u0132\11\0\4\u0132"+
    "\6\0\1\u0205\4\0\5\u0205\1\u0389\6\u0205\5\0\3\u0205"+
    "\1\0\12\u0205\2\0\1\u0205\5\0\1\u0205\11\0\4\u0205"+
    "\6\0\1\u0205\4\0\14\u0205\5\0\3\u0205\1\0\3\u0205"+
    "\1\u038a\6\u0205\2\0\1\u0205\5\0\1\u0205\11\0\4\u0205"+
    "\4\0\3\u013e\4\0\20\u013e\1\u020a\1\0\2\u013e\1\0"+
    "\5\u013e\1\u038b\4\u013e\2\0\1\u013e\5\0\1\u013e\11\0"+
    "\4\u013e\4\0\3\u013e\4\0\20\u013e\1\u020a\1\0\2\u013e"+
    "\1\0\1\u038c\11\u013e\2\0\1\u013e\5\0\1\u013e\11\0"+
    "\4\u013e\4\0\3\u013e\4\0\6\u013e\1\u038d\11\u013e\1\u020a"+
    "\1\0\2\u013e\1\0\12\u013e\2\0\1\u013e\5\0\1\u013e"+
    "\11\0\4\u013e\4\0\3\u013e\4\0\20\u013e\1\u020a\1\0"+
    "\2\u013e\1\0\1\u038e\11\u013e\2\0\1\u013e\5\0\1\u013e"+
    "\11\0\4\u013e\4\0\3\u013e\4\0\6\u013e\1\u038f\11\u013e"+
    "\1\u020a\1\0\2\u013e\1\0\12\u013e\2\0\1\u013e\5\0"+
    "\1\u013e\11\0\4\u013e\4\0\3\u013e\4\0\20\u013e\1\u020a"+
    "\1\0\2\u013e\1\0\1\u0390\11\u013e\2\0\1\u013e\5\0"+
    "\1\u013e\11\0\4\u013e\41\0\1\u0391\53\0\1\u0392\122\0"+
    "\1\u0393\77\0\1\u0394\100\0\1\u0395\105\0\1\u0396\70\0"+
    "\1\u0397\101\0\1\u0398\53\0\1\u0399\77\0\1\u039a\101\0"+
    "\1\u039b\74\0\1\u039c\66\0\1\u033d\1\0\1\u033d\3\0"+
    "\1\u033c\1\0\1\u033d\3\0\1\u033d\17\0\1\u033d\2\0"+
    "\2\u033d\3\0\2\u033d\22\0\3\u033d\27\0\1\u02c3\146\0"+
    "\1\u039d\10\0\1\u039e\4\0\15\u039e\2\0\1\u039e\2\0"+
    "\1\u039e\2\0\12\u039e\2\0\1\u039e\5\0\1\u039e\11\0"+
    "\4\u039e\42\0\1\u039f\75\0\1\u03a0\100\0\1\u03a1\54\0"+
    "\1\u03a2\121\0\1\u03a3\77\0\1\u03a4\64\0\1\u03a5\117\0"+
    "\1\u03a6\54\0\1\u03a7\124\0\1\u03a8\75\0\1\u03a9\47\0"+
    "\1\u03aa\131\0\1\u03ab\71\0\1\u03ac\106\0\1\u03ad\51\0"+
    "\1\u03ae\101\0\1\u03af\73\0\1\u03b0\120\0\1\u03b1\76\0"+
    "\1\u03b2\104\0\1\u03b3\106\0\1\u03b4\72\0\1\u03b5\46\0"+
    "\1\u03b6\126\0\1\u03b7\72\0\1\u03b8\61\0\1\u03b9\124\0"+
    "\1\u03ba\70\0\1\u03bb\57\0\1\u03bc\74\0\1\u03bd\104\0"+
    "\1\u03be\124\0\1\u03bf\52\0\1\u03c0\116\0\1\u03c1\42\0"+
    "\3\320\4\0\20\320\1\u01ca\1\0\2\320\1\0\10\320"+
    "\1\u03c2\1\320\2\0\1\320\5\0\1\320\11\0\4\320"+
    "\4\0\3\320\4\0\13\320\1\u03c3\4\320\1\u01ca\1\0"+
    "\2\320\1\0\12\320\2\0\1\320\5\0\1\320\11\0"+
    "\4\320\4\0\3\320\4\0\5\320\1\u03c4\12\320\1\u01ca"+
    "\1\0\2\320\1\0\12\320\2\0\1\320\5\0\1\320"+
    "\11\0\4\320\4\0\3\320\4\0\20\320\1\u01ca\1\0"+
    "\2\320\1\0\7\320\1\u03c5\2\320\2\0\1\320\5\0"+
    "\1\320\11\0\4\320\4\0\3\320\4\0\20\320\1\u01ca"+
    "\1\0\2\320\1\0\1\u03c6\11\320\2\0\1\320\5\0"+
    "\1\320\11\0\4\320\4\0\3\320\4\0\20\320\1\u01ca"+
    "\1\0\2\320\1\0\7\320\1\u03c7\2\320\2\0\1\320"+
    "\5\0\1\320\11\0\4\320\20\0\1\u03c8\126\0\1\u03c9"+
    "\112\0\1\u03ca\66\0\1\u03cb\110\0\1\u03cc\32\0\1\u03cd"+
    "\131\0\1\u03ce\46\0\1\u03cf\65\0\3\u01f0\4\0\20\u01f0"+
    "\1\u01f1\1\0\2\u01f0\1\0\10\u01f0\1\u03d0\1\u01f0\2\0"+
    "\1\u01f0\5\0\1\u01f0\11\0\4\u01f0\4\0\3\u01f0\4\0"+
    "\3\u01f0\1\u03d1\14\u01f0\1\u01f1\1\0\2\u01f0\1\0\12\u01f0"+
    "\2\0\1\u01f0\5\0\1\u01f0\11\0\4\u01f0\4\0\3\u01f0"+
    "\4\0\3\u01f0\1\u0384\14\u01f0\1\u01f1\1\0\2\u01f0\1\0"+
    "\12\u01f0\2\0\1\u01f0\5\0\1\u01f0\11\0\4\u01f0\4\0"+
    "\3\u01f0\4\0\13\u01f0\1\u03d2\4\u01f0\1\u01f1\1\0\2\u01f0"+
    "\1\0\12\u01f0\2\0\1\u01f0\5\0\1\u01f0\11\0\4\u01f0"+
    "\4\0\3\u01f0\4\0\20\u01f0\1\u01f1\1\0\2\u01f0\1\0"+
    "\1\u03d3\11\u01f0\2\0\1\u01f0\5\0\1\u01f0\11\0\4\u01f0"+
    "\4\0\3\u01f0\4\0\20\u01f0\1\u01f1\1\0\2\u01f0\1\0"+
    "\1\u03d4\11\u01f0\2\0\1\u01f0\5\0\1\u01f0\11\0\4\u01f0"+
    "\4\0\3\u01f0\4\0\20\u01f0\1\u01f1\1\0\2\u01f0\1\0"+
    "\1\u03d5\11\u01f0\2\0\1\u01f0\5\0\1\u01f0\11\0\4\u01f0"+
    "\4\0\3\u01f0\4\0\20\u01f0\1\u01f1\1\0\2\u01f0\1\0"+
    "\7\u01f0\1\u03d6\2\u01f0\2\0\1\u01f0\5\0\1\u01f0\11\0"+
    "\4\u01f0\4\0\3\u01f0\4\0\20\u01f0\1\u01f1\1\0\2\u01f0"+
    "\1\0\1\u03d7\11\u01f0\2\0\1\u01f0\5\0\1\u01f0\11\0"+
    "\4\u01f0\4\0\3\u01f0\4\0\20\u01f0\1\u01f1\1\0\2\u01f0"+
    "\1\0\7\u01f0\1\u03d8\2\u01f0\2\0\1\u01f0\5\0\1\u01f0"+
    "\11\0\4\u01f0\4\0\3\u01f0\4\0\20\u01f0\1\u01f1\1\0"+
    "\2\u01f0\1\0\7\u01f0\1\u03d9\2\u01f0\2\0\1\u01f0\5\0"+
    "\1\u01f0\11\0\4\u01f0\4\0\3\u01f0\4\0\20\u01f0\1\u01f1"+
    "\1\0\2\u01f0\1\0\12\u01f0\2\0\1\u01f0\5\0\1\u03da"+
    "\11\0\4\u01f0\6\0\1\u012a\4\0\14\u012a\5\0\3\u012a"+
    "\1\0\10\u012a\1\u03db\1\u012a\2\0\1\u012a\5\0\1\u012a"+
    "\11\0\4\u012a\6\0\1\u012e\4\0\14\u012e\5\0\3\u012e"+
    "\1\0\10\u012e\1\u03dc\1\u012e\2\0\1\u012e\5\0\1\u012e"+
    "\11\0\4\u012e\6\0\1\u0205\4\0\14\u0205\5\0\3\u0205"+
    "\1\0\7\u0205\1\u03dd\2\u0205\2\0\1\u0205\5\0\1\u0205"+
    "\11\0\4\u0205\6\0\1\u0205\4\0\5\u0205\1\u03de\6\u0205"+
    "\5\0\3\u0205\1\0\12\u0205\2\0\1\u0205\5\0\1\u0205"+
    "\11\0\4\u0205\4\0\3\u013e\4\0\20\u013e\1\u020a\1\0"+
    "\2\u013e\1\0\10\u013e\1\u03df\1\u013e\2\0\1\u013e\5\0"+
    "\1\u013e\11\0\4\u013e\4\0\3\u013e\4\0\13\u013e\1\u03e0"+
    "\4\u013e\1\u020a\1\0\2\u013e\1\0\12\u013e\2\0\1\u013e"+
    "\5\0\1\u013e\11\0\4\u013e\4\0\3\u013e\4\0\5\u013e"+
    "\1\u03e1\12\u013e\1\u020a\1\0\2\u013e\1\0\12\u013e\2\0"+
    "\1\u013e\5\0\1\u013e\11\0\4\u013e\4\0\3\u013e\4\0"+
    "\20\u013e\1\u020a\1\0\2\u013e\1\0\7\u013e\1\u03e2\2\u013e"+
    "\2\0\1\u013e\5\0\1\u013e\11\0\4\u013e\4\0\3\u013e"+
    "\4\0\20\u013e\1\u020a\1\0\2\u013e\1\0\1\u03e3\11\u013e"+
    "\2\0\1\u013e\5\0\1\u013e\11\0\4\u013e\4\0\3\u013e"+
    "\4\0\20\u013e\1\u020a\1\0\2\u013e\1\0\7\u013e\1\u03e4"+
    "\2\u013e\2\0\1\u013e\5\0\1\u013e\11\0\4\u013e\40\0"+
    "\1\u0391\102\0\1\u03e5\103\0\1\u03e6\70\0\1\u03e7\55\0"+
    "\1\u03e8\121\0\1\u03e9\135\0\1\u03ea\5\0\3\u039e\4\0"+
    "\20\u039e\2\0\2\u039e\1\0\12\u039e\2\0\1\u039e\5\0"+
    "\1\u039e\11\0\4\u039e\40\0\1\u03eb\100\0\1\u03ec\101\0"+
    "\1\u03ed\103\0\1\u03ee\77\0\1\u03ef\50\0\1\u03f0\126\0"+
    "\1\u03f1\46\0\1\u03f2\101\0\1\u03f3\103\0\1\u03f4\70\0"+
    "\1\u03f5\102\0\1\u03f6\120\0\1\u03f7\77\0\1\u03f8\104\0"+
    "\1\u03f9\57\0\1\u03fa\67\0\1\u03fb\121\0\1\u03fc\55\0"+
    "\1\u03fd\126\0\1\u03fe\57\0\1\u03ff\100\0\1\u0400\71\0"+
    "\1\u0401\77\0\1\u0402\75\0\1\u0403\101\0\1\u0404\75\0"+
    "\1\u0405\101\0\1\u0406\125\0\1\u0407\35\0\3\320\4\0"+
    "\11\320\1\u0408\6\320\1\u01ca\1\0\2\320\1\0\12\320"+
    "\2\0\1\320\5\0\1\320\11\0\4\320\4\0\3\320"+
    "\4\0\13\320\1\u0409\4\320\1\u01ca\1\0\2\320\1\0"+
    "\12\320\2\0\1\320\5\0\1\320\11\0\4\320\4\0"+
    "\3\320\4\0\16\320\1\u040a\1\320\1\u01ca\1\0\2\320"+
    "\1\0\12\320\2\0\1\320\5\0\1\320\11\0\4\320"+
    "\4\0\3\320\4\0\3\320\1\u040b\14\320\1\u01ca\1\0"+
    "\2\320\1\0\12\320\2\0\1\320\5\0\1\320\11\0"+
    "\4\320\4\0\3\320\4\0\20\320\1\u01ca\1\0\2\320"+
    "\1\0\7\320\1\u040c\2\320\2\0\1\320\5\0\1\320"+
    "\11\0\4\320\4\0\3\320\4\0\3\320\1\u040d\14\320"+
    "\1\u01ca\1\0\2\320\1\0\12\320\2\0\1\320\5\0"+
    "\1\320\11\0\4\320\31\0\1\u040e\64\0\1\u040f\126\0"+
    "\1\u0410\77\0\1\u0411\77\0\1\u0412\50\0\1\u0413\65\0"+
    "\3\u01f0\4\0\11\u01f0\1\u0414\6\u01f0\1\u01f1\1\0\2\u01f0"+
    "\1\0\12\u01f0\2\0\1\u01f0\5\0\1\u01f0\11\0\4\u01f0"+
    "\4\0\3\u01f0\4\0\12\u01f0\1\u0415\5\u01f0\1\u01f1\1\0"+
    "\2\u01f0\1\0\12\u01f0\2\0\1\u01f0\5\0\1\u01f0\11\0"+
    "\4\u01f0\4\0\3\u01f0\4\0\13\u01f0\1\u0416\4\u01f0\1\u01f1"+
    "\1\0\2\u01f0\1\0\12\u01f0\2\0\1\u01f0\5\0\1\u01f0"+
    "\11\0\4\u01f0\4\0\3\u01f0\4\0\20\u01f0\1\u01f1\1\0"+
    "\2\u01f0\1\0\3\u01f0\1\u0417\6\u01f0\2\0\1\u01f0\5\0"+
    "\1\u01f0\11\0\4\u01f0\4\0\3\u01f0\4\0\20\u01f0\1\u01f1"+
    "\1\0\2\u01f0\1\0\1\u01f0\1\u0418\10\u01f0\2\0\1\u01f0"+
    "\5\0\1\u01f0\11\0\4\u01f0\4\0\3\u01f0\4\0\20\u01f0"+
    "\1\u01f1\1\0\2\u01f0\1\0\3\u01f0\1\u0419\6\u01f0\2\0"+
    "\1\u01f0\5\0\1\u01f0\11\0\4\u01f0\4\0\3\u01f0\4\0"+
    "\3\u01f0\1\u041a\14\u01f0\1\u01f1\1\0\2\u01f0\1\0\12\u01f0"+
    "\2\0\1\u01f0\5\0\1\u01f0\11\0\4\u01f0\4\0\3\u01f0"+
    "\4\0\20\u01f0\1\u01f1\1\0\2\u01f0\1\0\7\u01f0\1\u041b"+
    "\2\u01f0\2\0\1\u01f0\5\0\1\u01f0\11\0\4\u01f0\4\0"+
    "\3\u01f0\4\0\20\u01f0\1\u01f1\1\0\2\u01f0\1\0\3\u01f0"+
    "\1\u041c\6\u01f0\2\0\1\u01f0\5\0\1\u01f0\11\0\4\u01f0"+
    "\4\0\3\u01f0\4\0\3\u01f0\1\u041d\14\u01f0\1\u01f1\1\0"+
    "\2\u01f0\1\0\12\u01f0\2\0\1\u01f0\5\0\1\u01f0\11\0"+
    "\4\u01f0\4\0\3\u01f0\4\0\20\u01f0\1\u01f1\1\0\2\u01f0"+
    "\1\0\5\u01f0\1\u041e\4\u01f0\2\0\1\u01f0\5\0\1\u01f0"+
    "\11\0\4\u01f0\6\0\1\u012a\4\0\2\u012a\1\u041f\11\u012a"+
    "\5\0\3\u012a\1\0\12\u012a\2\0\1\u012a\5\0\1\u012a"+
    "\11\0\4\u012a\6\0\1\u012e\4\0\2\u012e\1\u0420\11\u012e"+
    "\5\0\3\u012e\1\0\12\u012e\2\0\1\u012e\5\0\1\u012e"+
    "\11\0\4\u012e\6\0\1\u0205\4\0\14\u0205\5\0\3\u0205"+
    "\1\0\4\u0205\1\u0421\5\u0205\2\0\1\u0205\5\0\1\u0205"+
    "\11\0\4\u0205\6\0\1\u0205\4\0\3\u0205\1\u0422\10\u0205"+
    "\5\0\3\u0205\1\0\12\u0205\2\0\1\u0205\5\0\1\u0205"+
    "\11\0\4\u0205\4\0\3\u013e\4\0\11\u013e\1\u0423\6\u013e"+
    "\1\u020a\1\0\2\u013e\1\0\12\u013e\2\0\1\u013e\5\0"+
    "\1\u013e\11\0\4\u013e\4\0\3\u013e\4\0\13\u013e\1\u0424"+
    "\4\u013e\1\u020a\1\0\2\u013e\1\0\12\u013e\2\0\1\u013e"+
    "\5\0\1\u013e\11\0\4\u013e\4\0\3\u013e\4\0\16\u013e"+
    "\1\u0425\1\u013e\1\u020a\1\0\2\u013e\1\0\12\u013e\2\0"+
    "\1\u013e\5\0\1\u013e\11\0\4\u013e\4\0\3\u013e\4\0"+
    "\3\u013e\1\u0426\14\u013e\1\u020a\1\0\2\u013e\1\0\12\u013e"+
    "\2\0\1\u013e\5\0\1\u013e\11\0\4\u013e\4\0\3\u013e"+
    "\4\0\20\u013e\1\u020a\1\0\2\u013e\1\0\7\u013e\1\u0427"+
    "\2\u013e\2\0\1\u013e\5\0\1\u013e\11\0\4\u013e\4\0"+
    "\3\u013e\4\0\3\u013e\1\u0428\14\u013e\1\u020a\1\0\2\u013e"+
    "\1\0\12\u013e\2\0\1\u013e\5\0\1\u013e\11\0\4\u013e"+
    "\45\0\1\u0429\75\0\1\u042a\62\0\1\u042b\116\0\1\u042c"+
    "\131\0\1\u042d\40\0\1\u042e\56\0\1\u042f\124\0\1\u0430"+
    "\52\0\1\u0431\101\0\1\u0432\122\0\1\u0433\73\0\1\u0434"+
    "\103\0\1\u0435\100\0\1\u0436\74\0\1\u0437\75\0\1\u0438"+
    "\77\0\1\u0439\100\0\1\u043a\63\0\1\u043b\121\0\1\u043c"+
    "\46\0\1\u043d\125\0\1\u043e\50\0\1\u043f\126\0\1\u0440"+
    "\77\0\1\u0441\73\0\1\u0442\43\0\3\320\4\0\3\320"+
    "\1\u0443\14\320\1\u01ca\1\0\2\320\1\0\12\320\2\0"+
    "\1\320\5\0\1\320\11\0\4\320\4\0\3\320\4\0"+
    "\20\320\1\u01ca\1\0\2\320\1\0\5\320\1\u0444\4\320"+
    "\2\0\1\320\5\0\1\320\11\0\4\320\4\0\3\320"+
    "\4\0\5\320\1\u0445\12\320\1\u01ca\1\0\2\320\1\0"+
    "\1\u0446\11\320\2\0\1\320\5\0\1\320\11\0\4\320"+
    "\4\0\3\320\4\0\3\320\1\u0447\14\320\1\u01ca\1\0"+
    "\2\320\1\0\12\320\2\0\1\320\5\0\1\320\11\0"+
    "\4\320\40\0\1\u0448\55\0\1\u0449\121\0\1\u044a\55\0"+
    "\1\u044b\65\0\3\u01f0\4\0\3\u01f0\1\u044c\14\u01f0\1\u01f1"+
    "\1\0\2\u01f0\1\0\12\u01f0\2\0\1\u01f0\5\0\1\u01f0"+
    "\11\0\4\u01f0\4\0\3\u01f0\4\0\20\u01f0\1\u01f1\1\0"+
    "\2\u01f0\1\0\1\u01f0\1\u044d\10\u01f0\2\0\1\u01f0\5\0"+
    "\1\u01f0\11\0\4\u01f0\4\0\3\u01f0\4\0\20\u01f0\1\u01f1"+
    "\1\0\2\u01f0\1\0\5\u01f0\1\u044e\4\u01f0\2\0\1\u01f0"+
    "\5\0\1\u01f0\11\0\4\u01f0\4\0\3\u01f0\4\0\20\u01f0"+
    "\1\u01f1\1\0\2\u01f0\1\0\5\u01f0\1\u044f\4\u01f0\2\0"+
    "\1\u01f0\5\0\1\u01f0\11\0\4\u01f0\4\0\3\u01f0\4\0"+
    "\20\u01f0\1\u01f1\1\0\2\u01f0\1\0\1\u0450\11\u01f0\2\0"+
    "\1\u01f0\5\0\1\u01f0\11\0\4\u01f0\4\0\3\u01f0\4\0"+
    "\3\u01f0\1\u0451\14\u01f0\1\u01f1\1\0\2\u01f0\1\0\12\u01f0"+
    "\2\0\1\u01f0\5\0\1\u01f0\11\0\4\u01f0\4\0\3\u01f0"+
    "\4\0\5\u01f0\1\u0452\12\u01f0\1\u01f1\1\0\2\u01f0\1\0"+
    "\12\u01f0\2\0\1\u01f0\5\0\1\u01f0\11\0\4\u01f0\4\0"+
    "\3\u01f0\4\0\20\u01f0\1\u01f1\1\0\2\u01f0\1\0\7\u01f0"+
    "\1\u0453\2\u01f0\2\0\1\u01f0\5\0\1\u01f0\11\0\4\u01f0"+
    "\6\0\1\u012a\4\0\14\u012a\5\0\3\u012a\1\0\1\u0454"+
    "\11\u012a\2\0\1\u012a\5\0\1\u012a\11\0\4\u012a\6\0"+
    "\1\u012e\4\0\14\u012e\5\0\3\u012e\1\0\1\u0455\11\u012e"+
    "\2\0\1\u012e\5\0\1\u012e\11\0\4\u012e\6\0\1\u0205"+
    "\4\0\14\u0205\5\0\3\u0205\1\0\1\u0456\11\u0205\2\0"+
    "\1\u0205\5\0\1\u0205\11\0\4\u0205\6\0\1\u0205\4\0"+
    "\14\u0205\5\0\3\u0205\1\0\1\u0457\11\u0205\2\0\1\u0205"+
    "\5\0\1\u0205\11\0\4\u0205\4\0\3\u013e\4\0\3\u013e"+
    "\1\u0458\14\u013e\1\u020a\1\0\2\u013e\1\0\12\u013e\2\0"+
    "\1\u013e\5\0\1\u013e\11\0\4\u013e\4\0\3\u013e\4\0"+
    "\20\u013e\1\u020a\1\0\2\u013e\1\0\5\u013e\1\u0459\4\u013e"+
    "\2\0\1\u013e\5\0\1\u013e\11\0\4\u013e\4\0\3\u013e"+
    "\4\0\5\u013e\1\u045a\12\u013e\1\u020a\1\0\2\u013e\1\0"+
    "\1\u045b\11\u013e\2\0\1\u013e\5\0\1\u013e\11\0\4\u013e"+
    "\4\0\3\u013e\4\0\3\u013e\1\u045c\14\u013e\1\u020a\1\0"+
    "\2\u013e\1\0\12\u013e\2\0\1\u013e\5\0\1\u013e\11\0"+
    "\4\u013e\47\0\1\u045d\75\0\1\u045e\50\0\1\u045f\106\0"+
    "\1\u0460\150\0\1\u0461\44\0\1\u0462\74\0\1\u0463\77\0"+
    "\1\u0464\55\0\1\u0465\121\0\1\u0466\70\0\1\u0467\107\0"+
    "\1\u0468\103\0\1\u0469\101\0\1\u046a\70\0\1\u046b\77\0"+
    "\1\u046c\77\0\1\u046d\43\0\3\320\4\0\20\320\1\u01ca"+
    "\1\0\2\320\1\0\1\u046e\11\320\2\0\1\320\5\0"+
    "\1\320\11\0\4\320\4\0\3\320\4\0\20\320\1\u01ca"+
    "\1\0\2\320\1\0\7\320\1\u046f\2\320\2\0\1\320"+
    "\5\0\1\320\11\0\4\320\4\0\3\320\4\0\3\320"+
    "\1\u0470\14\320\1\u01ca\1\0\2\320\1\0\12\320\2\0"+
    "\1\320\5\0\1\320\11\0\4\320\4\0\3\320\4\0"+
    "\2\320\1\u0471\15\320\1\u01ca\1\0\2\320\1\0\12\320"+
    "\2\0\1\320\5\0\1\320\11\0\4\320\4\0\3\320"+
    "\4\0\16\320\1\u0472\1\320\1\u01ca\1\0\2\320\1\0"+
    "\12\320\2\0\1\320\5\0\1\320\11\0\4\320\15\0"+
    "\1\u0473\126\0\1\u0474\61\0\1\u0475\115\0\1\u0476\37\0"+
    "\3\u01f0\4\0\20\u01f0\1\u01f1\1\0\2\u01f0\1\0\1\u0477"+
    "\11\u01f0\2\0\1\u01f0\5\0\1\u01f0\11\0\4\u01f0\4\0"+
    "\3\u01f0\4\0\16\u01f0\1\u0478\1\u01f0\1\u01f1\1\0\2\u01f0"+
    "\1\0\12\u01f0\2\0\1\u01f0\5\0\1\u01f0\11\0\4\u01f0"+
    "\4\0\3\u01f0\4\0\20\u01f0\1\u01f1\1\0\2\u01f0\1\0"+
    "\7\u01f0\1\u0479\2\u01f0\2\0\1\u01f0\5\0\1\u01f0\11\0"+
    "\4\u01f0\4\0\3\u01f0\4\0\20\u01f0\1\u01f1\1\0\2\u01f0"+
    "\1\0\7\u01f0\1\u047a\2\u01f0\2\0\1\u01f0\5\0\1\u01f0"+
    "\11\0\4\u01f0\4\0\3\u01f0\4\0\20\u01f0\1\u01f1\1\0"+
    "\2\u01f0\1\0\3\u01f0\1\u047b\6\u01f0\2\0\1\u01f0\5\0"+
    "\1\u01f0\11\0\4\u01f0\4\0\3\u01f0\4\0\20\u01f0\1\u01f1"+
    "\1\0\2\u01f0\1\0\7\u01f0\1\u047c\2\u01f0\2\0\1\u01f0"+
    "\5\0\1\u01f0\11\0\4\u01f0\4\0\3\u01f0\4\0\4\u01f0"+
    "\1\u047d\13\u01f0\1\u01f1\1\0\2\u01f0\1\0\12\u01f0\2\0"+
    "\1\u01f0\5\0\1\u01f0\11\0\4\u01f0\4\0\3\u013e\4\0"+
    "\20\u013e\1\u020a\1\0\2\u013e\1\0\1\u047e\11\u013e\2\0"+
    "\1\u013e\5\0\1\u013e\11\0\4\u013e\4\0\3\u013e\4\0"+
    "\20\u013e\1\u020a\1\0\2\u013e\1\0\7\u013e\1\u047f\2\u013e"+
    "\2\0\1\u013e\5\0\1\u013e\11\0\4\u013e\4\0\3\u013e"+
    "\4\0\3\u013e\1\u0480\14\u013e\1\u020a\1\0\2\u013e\1\0"+
    "\12\u013e\2\0\1\u013e\5\0\1\u013e\11\0\4\u013e\4\0"+
    "\3\u013e\4\0\2\u013e\1\u0481\15\u013e\1\u020a\1\0\2\u013e"+
    "\1\0\12\u013e\2\0\1\u013e\5\0\1\u013e\11\0\4\u013e"+
    "\4\0\3\u013e\4\0\16\u013e\1\u0482\1\u013e\1\u020a\1\0"+
    "\2\u013e\1\0\12\u013e\2\0\1\u013e\5\0\1\u013e\11\0"+
    "\4\u013e\17\0\1\u0483\127\0\1\u0484\77\0\1\u0485\122\0"+
    "\1\u0486\33\0\1\u0487\116\0\1\u0488\60\0\1\u0489\117\0"+
    "\1\u048a\47\0\1\u048b\65\0\3\320\4\0\4\320\1\u048c"+
    "\13\320\1\u01ca\1\0\2\320\1\0\12\320\2\0\1\320"+
    "\5\0\1\320\11\0\4\320\4\0\3\320\4\0\3\320"+
    "\1\u048d\14\320\1\u01ca\1\0\2\320\1\0\12\320\2\0"+
    "\1\320\5\0\1\320\11\0\4\320\4\0\3\320\4\0"+
    "\20\320\1\u01ca\1\0\2\320\1\0\1\u048e\11\320\2\0"+
    "\1\320\5\0\1\320\11\0\4\320\4\0\3\320\4\0"+
    "\20\320\1\u01ca\1\0\2\320\1\0\7\320\1\u048f\2\320"+
    "\2\0\1\320\5\0\1\320\11\0\4\320\40\0\1\u0490"+
    "\113\0\1\u0491\77\0\1\u0492\27\0\3\u01f0\4\0\12\u01f0"+
    "\1\u0493\5\u01f0\1\u01f1\1\0\2\u01f0\1\0\12\u01f0\2\0"+
    "\1\u01f0\5\0\1\u01f0\11\0\4\u01f0\4\0\3\u01f0\4\0"+
    "\4\u01f0\1\u0494\13\u01f0\1\u01f1\1\0\2\u01f0\1\0\12\u01f0"+
    "\2\0\1\u01f0\5\0\1\u01f0\11\0\4\u01f0\4\0\3\u01f0"+
    "\4\0\4\u01f0\1\u0495\13\u01f0\1\u01f1\1\0\2\u01f0\1\0"+
    "\12\u01f0\2\0\1\u01f0\5\0\1\u01f0\11\0\4\u01f0\4\0"+
    "\3\u01f0\4\0\3\u01f0\1\u044d\14\u01f0\1\u01f1\1\0\2\u01f0"+
    "\1\0\12\u01f0\2\0\1\u01f0\5\0\1\u01f0\11\0\4\u01f0"+
    "\4\0\3\u01f0\4\0\16\u01f0\1\u0496\1\u01f0\1\u01f1\1\0"+
    "\2\u01f0\1\0\12\u01f0\2\0\1\u01f0\5\0\1\u01f0\11\0"+
    "\4\u01f0\4\0\3\u013e\4\0\4\u013e\1\u0497\13\u013e\1\u020a"+
    "\1\0\2\u013e\1\0\12\u013e\2\0\1\u013e\5\0\1\u013e"+
    "\11\0\4\u013e\4\0\3\u013e\4\0\3\u013e\1\u0498\14\u013e"+
    "\1\u020a\1\0\2\u013e\1\0\12\u013e\2\0\1\u013e\5\0"+
    "\1\u013e\11\0\4\u013e\4\0\3\u013e\4\0\20\u013e\1\u020a"+
    "\1\0\2\u013e\1\0\1\u0499\11\u013e\2\0\1\u013e\5\0"+
    "\1\u013e\11\0\4\u013e\4\0\3\u013e\4\0\20\u013e\1\u020a"+
    "\1\0\2\u013e\1\0\7\u013e\1\u049a\2\u013e\2\0\1\u013e"+
    "\5\0\1\u013e\11\0\4\u013e\17\0\1\u049b\102\0\1\u049c"+
    "\102\0\1\u049d\74\0\1\u049e\115\0\1\u049f\43\0\3\320"+
    "\4\0\16\320\1\u04a0\1\320\1\u01ca\1\0\2\320\1\0"+
    "\12\320\2\0\1\320\5\0\1\320\11\0\4\320\4\0"+
    "\3\320\4\0\20\320\1\u01ca\1\0\2\320\1\0\1\320"+
    "\1\u04a1\10\320\2\0\1\320\5\0\1\320\11\0\4\320"+
    "\4\0\3\320\4\0\6\320\1\u04a2\11\320\1\u01ca\1\0"+
    "\2\320\1\0\12\320\2\0\1\320\5\0\1\320\11\0"+
    "\4\320\4\0\3\320\4\0\12\320\1\u04a3\5\320\1\u01ca"+
    "\1\0\2\320\1\0\12\320\2\0\1\320\5\0\1\320"+
    "\11\0\4\320\21\0\1\u04a4\62\0\3\u01f0\4\0\20\u01f0"+
    "\1\u01f1\1\0\2\u01f0\1\0\1\u01f0\1\u04a5\10\u01f0\2\0"+
    "\1\u01f0\5\0\1\u01f0\11\0\4\u01f0\4\0\3\u01f0\4\0"+
    "\16\u01f0\1\u04a6\1\u01f0\1\u01f1\1\0\2\u01f0\1\0\12\u01f0"+
    "\2\0\1\u01f0\5\0\1\u01f0\11\0\4\u01f0\4\0\3\u01f0"+
    "\4\0\16\u01f0\1\u04a7\1\u01f0\1\u01f1\1\0\2\u01f0\1\0"+
    "\12\u01f0\2\0\1\u01f0\5\0\1\u01f0\11\0\4\u01f0\4\0"+
    "\3\u01f0\4\0\13\u01f0\1\u04a8\4\u01f0\1\u01f1\1\0\2\u01f0"+
    "\1\0\12\u01f0\2\0\1\u01f0\5\0\1\u01f0\11\0\4\u01f0"+
    "\4\0\3\u013e\4\0\16\u013e\1\u04a9\1\u013e\1\u020a\1\0"+
    "\2\u013e\1\0\12\u013e\2\0\1\u013e\5\0\1\u013e\11\0"+
    "\4\u013e\4\0\3\u013e\4\0\20\u013e\1\u020a\1\0\2\u013e"+
    "\1\0\1\u013e\1\u04aa\10\u013e\2\0\1\u013e\5\0\1\u013e"+
    "\11\0\4\u013e\4\0\3\u013e\4\0\6\u013e\1\u04ab\11\u013e"+
    "\1\u020a\1\0\2\u013e\1\0\12\u013e\2\0\1\u013e\5\0"+
    "\1\u013e\11\0\4\u013e\4\0\3\u013e\4\0\12\u013e\1\u04ac"+
    "\5\u013e\1\u020a\1\0\2\u013e\1\0\12\u013e\2\0\1\u013e"+
    "\5\0\1\u013e\11\0\4\u013e\20\0\1\u04ad\126\0\1\u04ae"+
    "\50\0\1\u04af\63\0\3\320\4\0\20\320\1\u01ca\1\0"+
    "\2\320\1\0\5\320\1\u04b0\4\320\2\0\1\320\5\0"+
    "\1\320\11\0\4\320\4\0\3\320\4\0\20\320\1\u01ca"+
    "\1\0\2\320\1\0\5\320\1\u04b1\4\320\2\0\1\320"+
    "\5\0\1\320\11\0\4\320\4\0\3\320\4\0\20\320"+
    "\1\u01ca\1\0\2\320\1\0\1\u04b2\11\320\2\0\1\320"+
    "\5\0\1\320\11\0\4\320\4\0\3\320\4\0\20\320"+
    "\1\u01ca\1\0\2\320\1\0\3\320\1\u04b3\6\320\2\0"+
    "\1\320\5\0\1\320\11\0\4\320\40\0\1\u04b4\43\0"+
    "\3\u01f0\4\0\16\u01f0\1\u04b5\1\u01f0\1\u01f1\1\0\2\u01f0"+
    "\1\0\12\u01f0\2\0\1\u01f0\5\0\1\u01f0\11\0\4\u01f0"+
    "\4\0\3\u01f0\4\0\20\u01f0\1\u01f1\1\0\2\u01f0\1\0"+
    "\5\u01f0\1\u04b6\4\u01f0\2\0\1\u01f0\5\0\1\u01f0\11\0"+
    "\4\u01f0\4\0\3\u01f0\4\0\13\u01f0\1\u04b7\4\u01f0\1\u01f1"+
    "\1\0\2\u01f0\1\0\12\u01f0\2\0\1\u01f0\5\0\1\u01f0"+
    "\11\0\4\u01f0\4\0\3\u01f0\4\0\20\u01f0\1\u01f1\1\0"+
    "\2\u01f0\1\0\5\u01f0\1\u04b8\4\u01f0\2\0\1\u01f0\5\0"+
    "\1\u01f0\11\0\4\u01f0\4\0\3\u013e\4\0\20\u013e\1\u020a"+
    "\1\0\2\u013e\1\0\5\u013e\1\u04b9\4\u013e\2\0\1\u013e"+
    "\5\0\1\u013e\11\0\4\u013e\4\0\3\u013e\4\0\20\u013e"+
    "\1\u020a\1\0\2\u013e\1\0\5\u013e\1\u04ba\4\u013e\2\0"+
    "\1\u013e\5\0\1\u013e\11\0\4\u013e\4\0\3\u013e\4\0"+
    "\20\u013e\1\u020a\1\0\2\u013e\1\0\1\u04bb\11\u013e\2\0"+
    "\1\u013e\5\0\1\u013e\11\0\4\u013e\4\0\3\u013e\4\0"+
    "\20\u013e\1\u020a\1\0\2\u013e\1\0\3\u013e\1\u04bc\6\u013e"+
    "\2\0\1\u013e\5\0\1\u013e\11\0\4\u013e\44\0\1\u04bd"+
    "\77\0\1\u04be\37\0\3\320\4\0\20\320\1\u01ca\1\0"+
    "\2\320\1\0\7\320\1\u04bf\2\320\2\0\1\320\5\0"+
    "\1\320\11\0\4\320\4\0\3\320\4\0\20\320\1\u01ca"+
    "\1\0\2\320\1\0\10\320\1\u04c0\1\320\2\0\1\320"+
    "\5\0\1\320\11\0\4\320\4\0\3\320\4\0\20\320"+
    "\1\u01ca\1\0\2\320\1\0\7\320\1\u04c1\2\320\2\0"+
    "\1\320\5\0\1\320\11\0\4\320\4\0\3\320\4\0"+
    "\20\320\1\u01ca\1\0\2\320\1\0\1\u04c2\11\320\2\0"+
    "\1\320\5\0\1\320\11\0\4\320\47\0\1\u04c3\34\0"+
    "\3\u01f0\4\0\13\u01f0\1\u04c4\4\u01f0\1\u01f1\1\0\2\u01f0"+
    "\1\0\12\u01f0\2\0\1\u01f0\5\0\1\u01f0\11\0\4\u01f0"+
    "\4\0\3\u01f0\4\0\20\u01f0\1\u01f1\1\0\2\u01f0\1\0"+
    "\7\u01f0\1\u04c5\2\u01f0\2\0\1\u01f0\5\0\1\u01f0\11\0"+
    "\4\u01f0\4\0\3\u01f0\4\0\20\u01f0\1\u01f1\1\0\2\u01f0"+
    "\1\0\5\u01f0\1\u04c6\4\u01f0\2\0\1\u01f0\5\0\1\u01f0"+
    "\11\0\4\u01f0\4\0\3\u01f0\4\0\20\u01f0\1\u01f1\1\0"+
    "\2\u01f0\1\0\10\u01f0\1\u04c7\1\u01f0\2\0\1\u01f0\5\0"+
    "\1\u01f0\11\0\4\u01f0\4\0\3\u013e\4\0\20\u013e\1\u020a"+
    "\1\0\2\u013e\1\0\7\u013e\1\u04c8\2\u013e\2\0\1\u013e"+
    "\5\0\1\u013e\11\0\4\u013e\4\0\3\u013e\4\0\20\u013e"+
    "\1\u020a\1\0\2\u013e\1\0\10\u013e\1\u04c9\1\u013e\2\0"+
    "\1\u013e\5\0\1\u013e\11\0\4\u013e\4\0\3\u013e\4\0"+
    "\20\u013e\1\u020a\1\0\2\u013e\1\0\7\u013e\1\u04ca\2\u013e"+
    "\2\0\1\u013e\5\0\1\u013e\11\0\4\u013e\4\0\3\u013e"+
    "\4\0\20\u013e\1\u020a\1\0\2\u013e\1\0\1\u04cb\11\u013e"+
    "\2\0\1\u013e\5\0\1\u013e\11\0\4\u013e\40\0\1\u04cc"+
    "\77\0\1\u04cd\43\0\3\320\4\0\13\320\1\u04ce\4\320"+
    "\1\u01ca\1\0\2\320\1\0\12\320\2\0\1\320\5\0"+
    "\1\320\11\0\4\320\4\0\3\320\4\0\11\320\1\u04cf"+
    "\6\320\1\u01ca\1\0\2\320\1\0\12\320\2\0\1\320"+
    "\5\0\1\320\11\0\4\320\4\0\3\320\4\0\3\320"+
    "\1\u04d0\14\320\1\u01ca\1\0\2\320\1\0\12\320\2\0"+
    "\1\320\5\0\1\320\11\0\4\320\16\0\1\u04d1\65\0"+
    "\3\u01f0\4\0\20\u01f0\1\u01f1\1\0\2\u01f0\1\0\1\u04d2"+
    "\11\u01f0\2\0\1\u01f0\5\0\1\u01f0\11\0\4\u01f0\4\0"+
    "\3\u01f0\4\0\13\u01f0\1\u04d3\4\u01f0\1\u01f1\1\0\2\u01f0"+
    "\1\0\12\u01f0\2\0\1\u01f0\5\0\1\u01f0\11\0\4\u01f0"+
    "\4\0\3\u01f0\4\0\20\u01f0\1\u01f1\1\0\2\u01f0\1\0"+
    "\10\u01f0\1\u04d4\1\u01f0\2\0\1\u01f0\5\0\1\u01f0\11\0"+
    "\4\u01f0\4\0\3\u01f0\4\0\2\u01f0\1\u04d5\15\u01f0\1\u01f1"+
    "\1\0\2\u01f0\1\0\12\u01f0\2\0\1\u01f0\5\0\1\u01f0"+
    "\11\0\4\u01f0\4\0\3\u013e\4\0\13\u013e\1\u04d6\4\u013e"+
    "\1\u020a\1\0\2\u013e\1\0\12\u013e\2\0\1\u013e\5\0"+
    "\1\u013e\11\0\4\u013e\4\0\3\u013e\4\0\11\u013e\1\u04d7"+
    "\6\u013e\1\u020a\1\0\2\u013e\1\0\12\u013e\2\0\1\u013e"+
    "\5\0\1\u013e\11\0\4\u013e\4\0\3\u013e\4\0\3\u013e"+
    "\1\u04d8\14\u013e\1\u020a\1\0\2\u013e\1\0\12\u013e\2\0"+
    "\1\u013e\5\0\1\u013e\11\0\4\u013e\26\0\1\u04d9\55\0"+
    "\3\320\4\0\3\320\1\u04da\14\320\1\u01ca\1\0\2\320"+
    "\1\0\12\320\2\0\1\320\5\0\1\320\11\0\4\320"+
    "\4\0\3\320\4\0\3\320\1\u04db\14\320\1\u01ca\1\0"+
    "\2\320\1\0\12\320\2\0\1\320\5\0\1\320\11\0"+
    "\4\320\4\0\3\u01f0\4\0\2\u01f0\1\u04dc\15\u01f0\1\u01f1"+
    "\1\0\2\u01f0\1\0\12\u01f0\2\0\1\u01f0\5\0\1\u01f0"+
    "\11\0\4\u01f0\4\0\3\u01f0\4\0\3\u01f0\1\u04dd\14\u01f0"+
    "\1\u01f1\1\0\2\u01f0\1\0\12\u01f0\2\0\1\u01f0\5\0"+
    "\1\u01f0\11\0\4\u01f0\4\0\3\u01f0\4\0\2\u01f0\1\u04de"+
    "\15\u01f0\1\u01f1\1\0\2\u01f0\1\0\12\u01f0\2\0\1\u01f0"+
    "\5\0\1\u01f0\11\0\4\u01f0\4\0\3\u01f0\4\0\20\u01f0"+
    "\1\u01f1\1\0\2\u01f0\1\0\5\u01f0\1\u04df\4\u01f0\2\0"+
    "\1\u01f0\5\0\1\u01f0\11\0\4\u01f0\4\0\3\u013e\4\0"+
    "\3\u013e\1\u04e0\14\u013e\1\u020a\1\0\2\u013e\1\0\12\u013e"+
    "\2\0\1\u013e\5\0\1\u013e\11\0\4\u013e\4\0\3\u013e"+
    "\4\0\3\u013e\1\u04e1\14\u013e\1\u020a\1\0\2\u013e\1\0"+
    "\12\u013e\2\0\1\u013e\5\0\1\u013e\11\0\4\u013e\4\0"+
    "\3\320\4\0\20\320\1\u01ca\1\0\2\320\1\0\1\320"+
    "\1\u04e2\10\320\2\0\1\320\5\0\1\320\11\0\4\320"+
    "\4\0\3\320\4\0\20\320\1\u01ca\1\0\2\320\1\0"+
    "\1\u04e3\11\320\2\0\1\320\5\0\1\320\11\0\4\320"+
    "\4\0\3\u01f0\4\0\20\u01f0\1\u01f1\1\0\2\u01f0\1\0"+
    "\11\u01f0\1\u04e4\2\0\1\u01f0\5\0\1\u01f0\11\0\4\u01f0"+
    "\4\0\3\u01f0\4\0\20\u01f0\1\u01f1\1\0\2\u01f0\1\0"+
    "\1\u01f0\1\u04e5\10\u01f0\2\0\1\u01f0\5\0\1\u01f0\11\0"+
    "\4\u01f0\4\0\3\u01f0\4\0\20\u01f0\1\u01f1\1\0\2\u01f0"+
    "\1\0\5\u01f0\1\u04e6\4\u01f0\2\0\1\u01f0\5\0\1\u01f0"+
    "\11\0\4\u01f0\4\0\3\u01f0\4\0\20\u01f0\1\u01f1\1\0"+
    "\2\u01f0\1\0\7\u01f0\1\u04e7\2\u01f0\2\0\1\u01f0\5\0"+
    "\1\u01f0\11\0\4\u01f0\4\0\3\u013e\4\0\20\u013e\1\u020a"+
    "\1\0\2\u013e\1\0\1\u013e\1\u04e8\10\u013e\2\0\1\u013e"+
    "\5\0\1\u013e\11\0\4\u013e\4\0\3\u013e\4\0\20\u013e"+
    "\1\u020a\1\0\2\u013e\1\0\1\u04e9\11\u013e\2\0\1\u013e"+
    "\5\0\1\u013e\11\0\4\u013e\4\0\3\320\4\0\11\320"+
    "\1\u04ea\6\320\1\u01ca\1\0\2\320\1\0\12\320\2\0"+
    "\1\320\5\0\1\320\11\0\4\320\4\0\3\u01f0\4\0"+
    "\11\u01f0\1\u04eb\6\u01f0\1\u01f1\1\0\2\u01f0\1\0\12\u01f0"+
    "\2\0\1\u01f0\5\0\1\u01f0\11\0\4\u01f0\4\0\3\u01f0"+
    "\4\0\20\u01f0\1\u01f1\1\0\2\u01f0\1\0\7\u01f0\1\u04ec"+
    "\2\u01f0\2\0\1\u01f0\5\0\1\u01f0\11\0\4\u01f0\4\0"+
    "\3\u01f0\4\0\4\u01f0\1\u04ed\13\u01f0\1\u01f1\1\0\2\u01f0"+
    "\1\0\12\u01f0\2\0\1\u01f0\5\0\1\u01f0\11\0\4\u01f0"+
    "\4\0\3\u013e\4\0\11\u013e\1\u04ee\6\u013e\1\u020a\1\0"+
    "\2\u013e\1\0\12\u013e\2\0\1\u013e\5\0\1\u013e\11\0"+
    "\4\u013e\4\0\3\320\4\0\20\320\1\u01ca\1\0\2\320"+
    "\1\0\4\320\1\u04ef\5\320\2\0\1\320\5\0\1\320"+
    "\11\0\4\320\4\0\3\u01f0\4\0\20\u01f0\1\u01f1\1\0"+
    "\2\u01f0\1\0\4\u01f0\1\u04f0\5\u01f0\2\0\1\u01f0\5\0"+
    "\1\u01f0\11\0\4\u01f0\4\0\3\u01f0\4\0\4\u01f0\1\u04f1"+
    "\13\u01f0\1\u01f1\1\0\2\u01f0\1\0\12\u01f0\2\0\1\u01f0"+
    "\5\0\1\u01f0\11\0\4\u01f0\4\0\3\u013e\4\0\20\u013e"+
    "\1\u020a\1\0\2\u013e\1\0\4\u013e\1\u04f2\5\u013e\2\0"+
    "\1\u013e\5\0\1\u013e\11\0\4\u013e\4\0\3\320\4\0"+
    "\3\320\1\u04f3\14\320\1\u01ca\1\0\2\320\1\0\12\320"+
    "\2\0\1\320\5\0\1\320\11\0\4\320\4\0\3\u01f0"+
    "\4\0\3\u01f0\1\u04f4\14\u01f0\1\u01f1\1\0\2\u01f0\1\0"+
    "\12\u01f0\2\0\1\u01f0\5\0\1\u01f0\11\0\4\u01f0\4\0"+
    "\3\u013e\4\0\3\u013e\1\u04f5\14\u013e\1\u020a\1\0\2\u013e"+
    "\1\0\12\u013e\2\0\1\u013e\5\0\1\u013e\11\0\4\u013e"+
    "\4\0\3\320\4\0\20\320\1\u01ca\1\0\2\320\1\0"+
    "\5\320\1\u04f6\4\320\2\0\1\320\5\0\1\320\11\0"+
    "\4\320\4\0\3\u01f0\4\0\20\u01f0\1\u01f1\1\0\2\u01f0"+
    "\1\0\5\u01f0\1\u04f7\4\u01f0\2\0\1\u01f0\5\0\1\u01f0"+
    "\11\0\4\u01f0\4\0\3\u013e\4\0\20\u013e\1\u020a\1\0"+
    "\2\u013e\1\0\5\u013e\1\u04f8\4\u013e\2\0\1\u013e\5\0"+
    "\1\u013e\11\0\4\u013e\4\0\3\320\4\0\12\320\1\u04f9"+
    "\5\320\1\u01ca\1\0\2\320\1\0\12\320\2\0\1\320"+
    "\5\0\1\320\11\0\4\320\4\0\3\u01f0\4\0\12\u01f0"+
    "\1\u04fa\5\u01f0\1\u01f1\1\0\2\u01f0\1\0\12\u01f0\2\0"+
    "\1\u01f0\5\0\1\u01f0\11\0\4\u01f0\4\0\3\u013e\4\0"+
    "\12\u013e\1\u04fb\5\u013e\1\u020a\1\0\2\u013e\1\0\12\u013e"+
    "\2\0\1\u013e\5\0\1\u013e\11\0\4\u013e\4\0\3\320"+
    "\4\0\20\320\1\u01ca\1\0\2\320\1\0\7\320\1\u04fc"+
    "\2\320\2\0\1\320\5\0\1\320\11\0\4\320\4\0"+
    "\3\u01f0\4\0\20\u01f0\1\u01f1\1\0\2\u01f0\1\0\7\u01f0"+
    "\1\u04fd\2\u01f0\2\0\1\u01f0\5\0\1\u01f0\11\0\4\u01f0"+
    "\4\0\3\u013e\4\0\20\u013e\1\u020a\1\0\2\u013e\1\0"+
    "\7\u013e\1\u04fe\2\u013e\2\0\1\u013e\5\0\1\u013e\11\0"+
    "\4\u013e\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[65856];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\157\0\1\10\33\0\1\11\6\1\1\11\2\1\1\11"+
    "\1\1\1\11\4\1\2\11\2\1\1\11\1\1\2\11"+
    "\3\1\1\11\12\1\1\11\24\1\3\11\3\1\1\11"+
    "\14\1\4\11\2\1\1\11\1\1\1\11\1\1\4\11"+
    "\7\1\2\11\1\1\1\11\2\1\3\11\1\1\1\11"+
    "\1\1\1\11\3\1\1\11\4\1\1\11\4\1\1\11"+
    "\2\1\1\11\2\1\1\11\4\1\2\11\15\1\2\11"+
    "\2\1\2\11\3\1\1\11\3\1\1\11\3\1\1\11"+
    "\2\1\2\11\21\1\1\11\16\1\2\11\3\1\1\11"+
    "\6\1\1\11\3\1\1\11\2\1\1\11\2\1\2\11"+
    "\7\1\1\11\1\1\1\11\1\0\2\1\3\11\3\1"+
    "\1\11\1\0\1\1\2\11\1\1\1\11\4\1\1\11"+
    "\3\1\1\11\4\0\3\11\3\0\2\11\4\0\2\11"+
    "\27\0\1\11\11\0\2\1\1\0\12\1\7\0\1\11"+
    "\2\0\1\11\4\0\1\11\4\0\1\11\3\0\1\1"+
    "\1\0\1\11\1\1\1\0\16\1\1\11\1\0\6\1"+
    "\2\11\1\0\4\1\1\0\6\1\4\0\1\1\1\11"+
    "\3\0\1\11\7\0\2\1\1\11\5\0\3\11\2\0"+
    "\1\11\2\0\1\11\1\0\7\11\4\0\1\11\51\0"+
    "\13\1\2\0\1\1\1\11\3\0\1\11\1\1\11\0"+
    "\1\11\1\0\1\1\1\0\20\1\1\0\6\1\1\11"+
    "\12\1\3\0\2\11\11\0\2\1\10\0\2\1\1\11"+
    "\1\1\6\0\1\11\1\0\1\11\42\0\12\1\3\0"+
    "\1\11\1\0\3\11\4\0\1\11\2\0\17\1\1\11"+
    "\17\1\14\0\1\11\1\0\1\11\1\0\1\11\30\0"+
    "\1\11\3\0\2\11\12\0\1\11\6\1\3\0\1\11"+
    "\5\0\30\1\1\11\1\0\3\11\2\0\2\11\4\0"+
    "\1\1\2\11\1\0\1\11\5\0\1\11\22\0\2\11"+
    "\5\0\6\1\6\0\2\11\25\1\4\0\1\11\1\0"+
    "\1\11\1\0\2\11\3\0\1\11\10\0\1\11\1\0"+
    "\1\11\5\0\1\11\1\0\1\11\2\0\6\1\1\0"+
    "\1\11\3\0\1\11\25\1\6\0\1\11\1\0\1\11"+
    "\2\0\1\11\1\0\1\11\1\0\1\11\3\0\2\11"+
    "\1\0\1\11\2\0\1\11\5\1\4\0\21\1\2\0"+
    "\1\11\2\0\2\11\2\0\1\11\3\0\4\11\5\1"+
    "\2\0\1\11\1\0\14\1\1\11\1\0\2\11\4\0"+
    "\1\11\4\1\1\0\2\11\10\1\1\11\3\0\1\11"+
    "\4\1\1\0\10\1\1\0\1\11\1\0\4\1\1\0"+
    "\10\1\2\0\4\1\1\0\10\1\1\0\1\11\3\1"+
    "\1\11\7\1\1\11\45\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[1278];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  int initialState() {
    return YYINITIAL;
  }


  _XQueryLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _XQueryLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1846) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 138: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { yybegin(_WILDCARD_QNAME_); return XQ_PREFIX_NAME;
          }
        case 253: break;
        case 199: 
          { pushState(_ITEM_TYPE_OCC); yybegin(_EMPTY_BRACES); return KW_COMMENT;
          }
        case 254: break;
        case 6: 
          { yybegin(YYINITIAL); return BAD_CHARACTER;
          }
        case 255: break;
        case 235: 
          { pushState(); yybegin(_XML_CDATA_CONTENT); return XML_CDATA_START;
          }
        case 256: break;
        case 234: 
          { yybegin(_URILITERAL); return KW_COLLATION;
          }
        case 257: break;
        case 226: 
          { pushState(_SEP); pushState(_ATLIST); yybegin(NAMESPACEDECL); return KW_NAMESPACE;
          }
        case 258: break;
        case 184: 
          { pushState(_SEP); pushState(_STRINGLITERAL); yybegin(_QNAME); return KW_OPTION;
          }
        case 259: break;
        case 120: 
          { pushState(_PREDICATE_LIST);  yypushback(yylength()); pushState(_OPT_EXPR_LIST_IN_BRACE); yybegin(_QNAME);
          }
        case 260: break;
        case 229: 
          { yybegin(_EXPR_SINGLE); return KW_SATISFIES;
          }
        case 261: break;
        case 218: 
          { /*pushState(_ITEM_TYPE);*/ yybegin(_KW_OF); return KW_INSTANCE;
          }
        case 262: break;
        case 190: 
          { yybegin(_DECLARE); return KW_DECLARE;
          }
        case 263: break;
        case 202: 
          { pushState(_PREDICATE_LIST); yybegin(_EXPR_LIST_IN_CURLY); return KW_ORDERED;
          }
        case 264: break;
        case 4: 
          { return XML_COMMENT_CHAR;
          }
        case 265: break;
        case 246: 
          { yybegin(_DECLARE_COPYNS); return KW_COPY_NAMESPACES;
          }
        case 266: break;
        case 19: 
          { yybegin(_URILITERAL); return OP_EQUALS;
          }
        case 267: break;
        case 223: 
          { pushState(_SEP); yybegin(NAMESPACEDECL); return KW_NAMESPACE;
          }
        case 268: break;
        case 122: 
          { /*pushState(_CAST_AS_EXPR);*/ pushState(_OPT_EXPR_LIST_IN_CURLY); pushState(_PRAGMA); yybegin(_PRAGMA_); return XQ_PRAGMA_START;
          }
        case 269: break;
        case 109: 
          { return XQ_STR_ESCAPE_APOS;
          }
        case 270: break;
        case 121: 
          { pushState(_XML_PI_END); yybegin(_XML_PI_NAME); return XML_PI_START;
          }
        case 271: break;
        case 200: 
          { pushState(_CLOSE_BRACE); pushState(_ITEM_TYPE_AorE); yybegin(_OPEN_BRACE); return KW_ELEMENT;
          }
        case 272: break;
        case 54: 
          { yypushback(1); pushState(_TYPESWITCH_EXPR_RETURN); yybegin(_VARNAME);
          }
        case 273: break;
        case 165: 
          { popState(); return XML_STR_CHAR_REF;
          }
        case 274: break;
        case 236: 
          { yybegin(_SEP); return KW_NO_INHERIT;
          }
        case 275: break;
        case 37: 
          { pushState(_EXPR_LIST); yybegin(_EXPR_SINGLE); return OP_COMMA;
          }
        case 276: break;
        case 60: 
          { yybegin(_PREDICATE_LIST);  return OP_DOT;
          }
        case 277: break;
        case 29: 
          { pushState(_CLOSE_BRACE); yypushback(yylength()); yybegin(_NCNAME);
          }
        case 278: break;
        case 172: 
          { pushState(_QUANT_EXPR_IN); yybegin(_PARAM); return KW_EVERY;
          }
        case 279: break;
        case 147: 
          { yybegin(_XML_ATTRLIST_START); return XML_PI_NAME;
          }
        case 280: break;
        case 176: 
          { pushState(_FLWOR_BODY2); yypushback(yylength()); yybegin(_WHERE_CLAUSE);
          }
        case 281: break;
        case 177: 
          { yybegin(_EXPR_SINGLE); return KW_WHERE;
          }
        case 282: break;
        case 197: 
          { yybegin(_IMPORT_SCHEMA_DEFAULT_ELEMENT); return KW_ELEMENT;
          }
        case 283: break;
        case 171: 
          { yybegin(_SEP); return KW_STRIP;
          }
        case 284: break;
        case 167: 
          { pushState(); yybegin(XML_COMMENT); return XML_COMMENT_START;
          }
        case 285: break;
        case 116: 
          { yybegin(_IF_EXPR_); return KW_IF;
          }
        case 286: break;
        case 188: 
          { yybegin(_VALIDATE_EXPR_); return KW_STRICT;
          }
        case 287: break;
        case 252: 
          { pushState(_PREDICATE_LIST); pushState(_OPT_EXPR_LIST_IN_CURLY); yybegin(_EL_IN_CURLY_OR_NCNAME); return KW_PROCESSING_INSTRUCTION;
          }
        case 288: break;
        case 149: 
          { popState(); return XML_CDATA_END;
          }
        case 289: break;
        case 124: 
          { yybegin(_VARNAME); return KW_AT;
          }
        case 290: break;
        case 224: 
          { pushState(_SEP); yybegin(_URILITERAL); return KW_COLLATION;
          }
        case 291: break;
        case 215: 
          { pushState(_PREDICATE_LIST); yybegin(_EXPR_LIST_IN_CURLY); return KW_DOCUMENT;
          }
        case 292: break;
        case 18: 
          { yybegin(STR_START_APOS); return XQ_STR_START;
          }
        case 293: break;
        case 106: 
          { popState(); return XQ_COMMENT_END;
          }
        case 294: break;
        case 44: 
          { popState(); return OP_RCURLY;
          }
        case 295: break;
        case 128: 
          { popState(); return OP_LCURLYCURLY;
          }
        case 296: break;
        case 40: 
          { yypushback(yylength()); pushState(_CLOSE_BRACE); pushState(_EXPR_LIST); yybegin(_EXPR_SINGLE);
          }
        case 297: break;
        case 216: 
          { yypushback(yylength()); yybegin(_CASTABLE_AS_EXPR);
          }
        case 298: break;
        case 217: 
          { pushState(_TREAT_AS_EXPR); pushState(_OPT_QUESTION); pushState(_QNAME); yybegin(_KW_AS); return KW_CASTABLE;
          }
        case 299: break;
        case 242: 
          { pushState(_ITEM_TYPE_OCC); pushState(_ITEM_TYPE_DN); yybegin(_OPEN_BRACE); return KW_DOCUMENT_NODE;
          }
        case 300: break;
        case 201: 
          { yybegin(_TYPESWITCH_EXPR_DEFAULT_); return KW_DEFAULT;
          }
        case 301: break;
        case 21: 
          { pushState(_ATLIST_); yybegin(_URILITERAL); return OP_COMMA;
          }
        case 302: break;
        case 76: 
          { pushState(_LET_CLAUSE_); pushState(_LET_CLAUSE_VAR); yybegin(_PARAM); return OP_COMMA;
          }
        case 303: break;
        case 12: 
          { return XML_STR_CHAR;
          }
        case 304: break;
        case 146: 
          { pushState(_LET_CLAUSE_); pushState(_LET_CLAUSE_VAR); yybegin(_PARAM); return KW_LET;
          }
        case 305: break;
        case 23: 
          { yypushback(yylength()); pushState(_ITEM_TYPE_OCC); yybegin(_QNAME);
          }
        case 306: break;
        case 222: 
          { pushState(_SEP); yybegin(NAMESPACEDECL); return KW_MODULE;
          }
        case 307: break;
        case 243: 
          { yybegin(_PRESERVE_OR_STRIP); return KW_BOUNDARY_SPACE;
          }
        case 308: break;
        case 153: 
          { pushState(_ITEM_TYPE_OCC); yybegin(_EMPTY_BRACES); return KW_ITEM;
          }
        case 309: break;
        case 209: 
          { yybegin(_DECLARE_COPYNS_); return KW_PRESERVE;
          }
        case 310: break;
        case 126: 
          { pushState(_ORDER_CLAUSE_LIST); pushState(_ORDER_CLAUSE_MODIFIER); yybegin(_EXPR_SINGLE); return KW_BY;
          }
        case 311: break;
        case 133: 
          { popState(); return XQ_PRAGMA_END;
          }
        case 312: break;
        case 75: 
          { yybegin(_FOR_CLAUSE); return OP_COMMA;
          }
        case 313: break;
        case 173: 
          { pushState(_PREDICATE_LIST); pushState(_NODE_TEST); yybegin(_COLONCOLON); return KW_CHILD;
          }
        case 314: break;
        case 93: 
          { popState(); return OP_LCURLY;
          }
        case 315: break;
        case 41: 
          { popState(); return OP_RBRACE;
          }
        case 316: break;
        case 78: 
          { yypushback(1); yybegin(_ORDER_CLAUSE_MODIFIER_EMPTY);
          }
        case 317: break;
        case 64: 
          { pushState(_XML_END_TAG); pushState(_XML_ATTRLIST_START); yybegin(_XML_TAG_NAME); return XML_TAG_START;
          }
        case 318: break;
        case 91: 
          { yybegin(_EMPTY_BRACES_); return OP_LBRACE;
          }
        case 319: break;
        case 52: 
          { yybegin(_TYPESWITCH_EXPR_CASE); return OP_RBRACE;
          }
        case 320: break;
        case 192: 
          { pushState(_XQUERY_VERSION); yybegin(_STRINGLITERAL); return KW_VERSION;
          }
        case 321: break;
        case 55: 
          { yypushback(yylength()); yybegin(_ITEM_TYPE);
          }
        case 322: break;
        case 112: 
          { yybegin(_EXPR_SINGLE); return OP_ASSIGN;
          }
        case 323: break;
        case 203: 
          { pushState(_PREDICATE_LIST); pushState(_OPT_EXPR_LIST_IN_CURLY); yybegin(_EL_IN_CURLY_OR_QNAME); return KW_ELEMENT;
          }
        case 324: break;
        case 193: 
          { yybegin(_DECLARE_DEFAULT); return KW_DEFAULT;
          }
        case 325: break;
        case 84: 
          { yybegin(_XML_STR_START_QUOTE); return XML_STR_START;
          }
        case 326: break;
        case 85: 
          { yybegin(_XML_STR_START_APOS); return XML_STR_START;
          }
        case 327: break;
        case 89: 
          { pushState(_XML_CLOSE_TAG); yybegin(_XML_ELEMENT_CONTENT); return XML_TAG_END;
          }
        case 328: break;
        case 99: 
          { popState(); return OP_COLON;
          }
        case 329: break;
        case 9: 
          { yypushback(yylength()); pushState(); yybegin(_STR_COMMON_CONTENT);
          }
        case 330: break;
        case 237: 
          { yypushback(yylength()); yybegin(_TYPESWITCH_EXPR);
          }
        case 331: break;
        case 77: 
          { pushState(_ORDER_CLAUSE_LIST); pushState(_ORDER_CLAUSE_MODIFIER); yybegin(_EXPR_SINGLE); return OP_COMMA;
          }
        case 332: break;
        case 123: 
          { /*pushState(_CAST_AS_EXPR);*/ yybegin(_STEP_EXPR); return OP_SLASHSLASH;
          }
        case 333: break;
        case 145: 
          { pushState(_FOR_CLAUSE_VAR_IN); pushState(_FOR_CLAUSE_VAR_POS); yybegin(_PARAM); return KW_FOR;
          }
        case 334: break;
        case 48: 
          { pushState(_IF_EXPR__); pushState(_EXPR_LIST); yybegin(_EXPR_SINGLE); return OP_LBRACE;
          }
        case 335: break;
        case 137: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { yybegin(_QNAME_); return XQ_PREFIX_NAME;
          }
        case 336: break;
        case 198: 
          { pushState(_ITEM_TYPE_OCC); pushState(_ITEM_TYPE_AorE); yybegin(_OPEN_BRACE); return KW_ELEMENT;
          }
        case 337: break;
        case 232: 
          { pushState(_PREDICATE_LIST); pushState(_NODE_TEST); yybegin(_COLONCOLON); return KW_FOLLOWING;
          }
        case 338: break;
        case 97: 
          { yypushback(yylength()); pushState(_PRAGMA_CONTENT); yybegin(_QNAME);
          }
        case 339: break;
        case 148: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { pushState(_CLOSE_TAG); yybegin(_STRICT_QNAME); return XML_CLOSETAG_START;
          }
        case 340: break;
        case 92: 
          { popState(); return OP_LBRACE;
          }
        case 341: break;
        case 175: 
          { pushState(_FLWOR_BODY3); yypushback(yylength()); yybegin(_ORDER_CLAUSE);
          }
        case 342: break;
        case 139: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { yybegin(_QNAME_); return OP_STAR;
          }
        case 343: break;
        case 15: 
          { yybegin(YYINITIAL); return OP_SEPERATOR;
          }
        case 344: break;
        case 82: 
          { pushState(_XML_ATTRLIST_START); yybegin(_XML_ATTR_NAME); return WHITE_SPACE;
          }
        case 345: break;
        case 94: 
          { popState(); return OP_RSQUARE;
          }
        case 346: break;
        case 207: 
          { pushState(_SEP); pushState(_DECLARE_VARIABLE); yybegin(_PARAM); return KW_VARIABLE;
          }
        case 347: break;
        case 179: 
          { yybegin(_ORDER_CLAUSE_MODIFIER_EMPTY_); return KW_EMPTY;
          }
        case 348: break;
        case 3: 
          { return XQ_COMMENT_CHAR;
          }
        case 349: break;
        case 130: 
          { pushState(); pushState(_XML_PI_END); yybegin(_XML_PI_NAME); return XML_PI_START;
          }
        case 350: break;
        case 32: 
          { yybegin(_ITEM_TYPE_AorE_); return OP_STAR;
          }
        case 351: break;
        case 114: 
          { yybegin(_ITEM_TYPE); return KW_AS;
          }
        case 352: break;
        case 212: 
          { popState(); return KW_EXTERNAL;
          }
        case 353: break;
        case 151: 
          { popState(); return XQ_STR_ENT_REF;
          }
        case 354: break;
        case 111: 
          { return XML_STR_ESCAPE_APOS;
          }
        case 355: break;
        case 49: 
          { yybegin(_IF_EXPR_THEN); return OP_RBRACE;
          }
        case 356: break;
        case 62: 
          { pushState(_PREDICATE_LIST); yypushback(1); yybegin(_STRINGLITERAL);
          }
        case 357: break;
        case 27: 
          { popState(); return OP_QUESTION;
          }
        case 358: break;
        case 119: 
          { yybegin(_PREDICATE_LIST); return OP_DOTDOT;
          }
        case 359: break;
        case 132: 
          { pushState(); yybegin(_PRAGMA_); return XQ_PRAGMA_START;
          }
        case 360: break;
        case 103: 
          { yybegin(_QNAME_LOCAL); return OP_COLON;
          }
        case 361: break;
        case 170: 
          { yybegin(_SEP); return KW_LEAST;
          }
        case 362: break;
        case 174: 
          { pushState(_INSTANCEOF_EXPR); /*pushState(_ITEM_TYPE);*/ yybegin(_KW_AS); return KW_CASTABLE;
          }
        case 363: break;
        case 113: 
          { pushState(_ATLIST_); yybegin(_URILITERAL); return KW_AT;
          }
        case 364: break;
        case 39: 
          { yybegin(_EXPR_LIST_OR_RBRACE); return OP_LBRACE;
          }
        case 365: break;
        case 35: 
          { yypushback(yylength()); yybegin(_INSTANCEOF_EXPR);
          }
        case 366: break;
        case 220: 
          { yybegin(_ORDER_CLAUSE_MODIFIER_COLLATION); return KW_GREATEST;
          }
        case 367: break;
        case 183: 
          { yybegin(_IMPORT); return KW_IMPORT;
          }
        case 368: break;
        case 36: 
          { yypushback(1); popState();
          }
        case 369: break;
        case 58: 
          { yypushback(yylength()); pushState(_PREDICATE_LIST); yybegin(_NODE_TEST);
          }
        case 370: break;
        case 140: 
          { popState(); return XML_COMMENT_END;
          }
        case 371: break;
        case 249: 
          { pushState(_PREDICATE_LIST); pushState(_NODE_TEST); yybegin(_COLONCOLON); return KW_FOLLOWING_SIBLING;
          }
        case 372: break;
        case 131: 
          { popState(); return XML_EMPTYTAG_END;
          }
        case 373: break;
        case 68: 
          { yybegin(_INSTANCEOF_EXPR); yypushback(yylength());
          }
        case 374: break;
        case 95: 
          { popState(); return XML_TAG_END;
          }
        case 375: break;
        case 230: 
          { pushState(_PREDICATE_LIST); pushState(_OPT_EXPR_LIST_IN_CURLY); yybegin(_EL_IN_CURLY_OR_QNAME); return KW_ATTRIBUTE;
          }
        case 376: break;
        case 195: 
          { yybegin(_DECLARE_DEFAULT_NAMESPACE); return KW_ELEMENT;
          }
        case 377: break;
        case 46: 
          { yypushback(yylength()); yybegin(_EXPR_LIST_IN_CURLY);
          }
        case 378: break;
        case 227: 
          { pushState(_SEP); pushState(_ATLIST); yybegin(_URILITERAL); return KW_NAMESPACE;
          }
        case 379: break;
        case 141: 
          { pushState(_FLWOR_HEAD); yypushback(yylength()); yybegin(_LET_CLAUSE);
          }
        case 380: break;
        case 24: 
          { popState(); yypushback(1);
          }
        case 381: break;
        case 251: 
          { pushState(_ITEM_TYPE_OCC); pushState(_ITEM_TYPE_PI); yybegin(_OPEN_BRACE); return KW_PROCESSING_INSTRUCTION;
          }
        case 382: break;
        case 42: 
          { yybegin(_EXPR_LIST_OR_RCURLY); return OP_LCURLY;
          }
        case 383: break;
        case 67: 
          { yybegin(_TREAT_AS_EXPR); yypushback(yylength());
          }
        case 384: break;
        case 211: 
          { yybegin(_SEP); return KW_GREATEST;
          }
        case 385: break;
        case 129: 
          { popState(); return OP_RCURLYCURLY;
          }
        case 386: break;
        case 53: 
          { yypushback(yylength()); yybegin(_TYPESWITCH_EXPR_RETURN);
          }
        case 387: break;
        case 231: 
          { pushState(_PREDICATE_LIST); yybegin(_EXPR_LIST_IN_CURLY); return KW_UNORDERED;
          }
        case 388: break;
        case 102: 
          { popState(); return XQ_LOCAL_NAME;
          }
        case 389: break;
        case 117: 
          { pushState(_QUANT_EXPR_SATISFIES); yybegin(_EXPR_SINGLE); return KW_IN;
          }
        case 390: break;
        case 248: 
          { pushState(_PREDICATE_LIST); pushState(_NODE_TEST); yybegin(_COLONCOLON); return KW_DESCENDANT_OR_SELF;
          }
        case 391: break;
        case 228: 
          { pushState(_ITEM_TYPE_OCC); pushState(_ITEM_TYPE_AorE); yybegin(_OPEN_BRACE); return KW_ATTRIBUTE;
          }
        case 392: break;
        case 164: 
          { pushState(_CASTABLE_AS_EXPR); pushState(_OPT_QUESTION); pushState(_QNAME); yybegin(_KW_AS); return KW_CAST;
          }
        case 393: break;
        case 191: 
          { yybegin(_SEP); return KW_ORDERED;
          }
        case 394: break;
        case 158: 
          { yybegin(_EXPR_SINGLE); return KW_ELSE;
          }
        case 395: break;
        case 81: 
          { return XML_PI_CHAR;
          }
        case 396: break;
        case 28: 
          { yypushback(1); yybegin(_CLOSE_BRACE);
          }
        case 397: break;
        case 210: 
          { yybegin(_DECLARE_DEFAULT_NAMESPACE); return KW_FUNCTION;
          }
        case 398: break;
        case 206: 
          { yybegin(DECLAREORDERING); return KW_ORDERING;
          }
        case 399: break;
        case 194: 
          { yybegin(_SEP); return KW_INHERIT;
          }
        case 400: break;
        case 240: 
          { yybegin(_DECLARE_COPYNS_); return KW_NO_PRESERVE;
          }
        case 401: break;
        case 152: 
          { pushState(_ITEM_TYPE_OCC); yybegin(_EMPTY_BRACES); return KW_TEXT;
          }
        case 402: break;
        case 83: 
          { yypushback(yylength()); pushState(_XML_ATTR_VALUE); pushState(_EQUALS); yybegin(_QNAME);
          }
        case 403: break;
        case 59: 
          { yybegin(_PREDICATE_LIST); return XQ_INTEGER_LITERAL;
          }
        case 404: break;
        case 74: 
          { pushState(_PREDICATE_LIST); pushState(_CLOSE_SQUARE); pushState(_EXPR_LIST); yybegin(_EXPR_SINGLE); return OP_LSQUARE;
          }
        case 405: break;
        case 30: 
          { pushState(_CLOSE_BRACE); yypushback(1); yybegin(_STRINGLITERAL);
          }
        case 406: break;
        case 185: 
          { yybegin(_IMPORT_MODULE); return KW_MODULE;
          }
        case 407: break;
        case 163: 
          { pushState(_PREDICATE_LIST); yybegin(XML_COMMENT); return XML_COMMENT_START;
          }
        case 408: break;
        case 14: 
          { popState(); return XML_STR_END;
          }
        case 409: break;
        case 45: 
          { yypushback(yylength()); yybegin(_QNAME);
          }
        case 410: break;
        case 104: 
          { yybegin(_WILDCARD_QNAME_LOCAL); return OP_COLON;
          }
        case 411: break;
        case 136: 
          { popState(); return KW_OF;
          }
        case 412: break;
        case 189: 
          { yybegin(_ORDER_CLAUSE); return KW_STABLE;
          }
        case 413: break;
        case 98: 
          { yybegin(_QNAME); return OP_VARSTART;
          }
        case 414: break;
        case 157: 
          { pushState(_IF_EXPR_ELSE); yybegin(_EXPR_SINGLE); return KW_THEN;
          }
        case 415: break;
        case 7: 
          { yybegin(_NAMESPACEDECL_); return XQ_LOCAL_NAME;
          }
        case 416: break;
        case 127: 
          { popState(); return XML_PI_END;
          }
        case 417: break;
        case 43: 
          { yypushback(yylength()); pushState(_CLOSE_CURLY); pushState(_EXPR_LIST); yybegin(_EXPR_SINGLE);
          }
        case 418: break;
        case 162: 
          { pushState(_PREDICATE_LIST); pushState(_NODE_TEST); yybegin(_COLONCOLON); return KW_SELF;
          }
        case 419: break;
        case 245: 
          { pushState(_CLOSE_BRACE); pushState(_CLOSE_BRACE); pushState(_QNAME); yybegin(_OPEN_BRACE); return KW_SCHEMA_ELEMENT;
          }
        case 420: break;
        case 233: 
          { return KW_ASCENDING;
          }
        case 421: break;
        case 105: 
          { pushState(); yybegin(EXPR_COMMENT); return XQ_COMMENT_START;
          }
        case 422: break;
        case 168: 
          { yybegin(_DECLARE_DEFAULT_ORDER); return KW_ORDER;
          }
        case 423: break;
        case 25: 
          { popState(); return OP_PLUS;
          }
        case 424: break;
        case 80: 
          { yybegin(_XML_PI_CONTENT); return XML_PI_NAME;
          }
        case 425: break;
        case 90: 
          { return XML_CDATA_CHAR;
          }
        case 426: break;
        case 221: 
          { yybegin(_SEP); return KW_UNORDERED;
          }
        case 427: break;
        case 135: 
          { popState(); return KW_AS;
          }
        case 428: break;
        case 110: 
          { return XML_STR_ESCAPE_QUOTE;
          }
        case 429: break;
        case 180: 
          { yybegin(_ORDER_CLAUSE_MODIFIER_COLLATION); return KW_LEAST;
          }
        case 430: break;
        case 247: 
          { pushState(_ITEM_TYPE_OCC); pushState(_CLOSE_BRACE); pushState(_QNAME); yybegin(_OPEN_BRACE);  return KW_SCHEMA_ATTRIBUTE;
          }
        case 431: break;
        case 239: 
          { return KW_DESCENDING;
          }
        case 432: break;
        case 156: 
          { yypushback(yylength()); yybegin(_QUANT_EXPR);
          }
        case 433: break;
        case 160: 
          { pushState(_TYPESWITCH_EXPR_CASE2); pushState(_TYPESWITCH_EXPR_RETURN); yybegin(_TYPESWITCH_EXPR_CASE_); return KW_CASE;
          }
        case 434: break;
        case 169: 
          { yybegin(_DECLARE_DEFAULT_ORDER_EMPTY); return KW_EMPTY;
          }
        case 435: break;
        case 33: 
          { pushState(_ITEM_TYPE_AorE__); yybegin(_QNAME); return OP_COMMA;
          }
        case 436: break;
        case 241: 
          { yybegin(_PRESERVE_OR_STRIP); return KW_CONSTRUCTION;
          }
        case 437: break;
        case 69: 
          { /*pushState(_CAST_AS_EXPR);*/ yypushback(yylength()); yybegin(_STEP_EXPR);
          }
        case 438: break;
        case 13: 
          { yypushback(yylength()); pushState(); yybegin(_XML_STR_COMMON_CONTENT);
          }
        case 439: break;
        case 72: 
          { /*pushState(_CAST_AS_EXPR);*/ yybegin(_STEP_EXPR); return OP_SLASH;
          }
        case 440: break;
        case 142: 
          { pushState(_FLWOR_HEAD); yypushback(yylength()); yybegin(_FOR_CLAUSE);
          }
        case 441: break;
        case 56: 
          { yypushback(1); pushState(_TYPESWITCH_EXPR_CASE_AS); yybegin(_VARNAME);
          }
        case 442: break;
        case 108: 
          { return XQ_STR_ESCAPE_QUOTE;
          }
        case 443: break;
        case 1: 
          { yypushback(yylength()); pushState(_EXPR_LIST); yybegin(_EXPR_SINGLE);
          }
        case 444: break;
        case 208: 
          { pushState(_SEP); yybegin(_URILITERAL); return KW_BASE_URI;
          }
        case 445: break;
        case 118: 
          { yybegin(_PREDICATE_LIST); return XQ_DECIMAL_LITERAL;
          }
        case 446: break;
        case 11: 
          { popState(); return BAD_CHARACTER;
          }
        case 447: break;
        case 65: 
          { pushState(_PREDICATE_LIST); yybegin(_NODE_TEST); return OP_AT;
          }
        case 448: break;
        case 107: 
          { pushState(); return XQ_COMMENT_START;
          }
        case 449: break;
        case 66: 
          { yybegin(_CASTABLE_AS_EXPR); yypushback(yylength());
          }
        case 450: break;
        case 47: 
          { yypushback(yylength()); yybegin(_NCNAME);
          }
        case 451: break;
        case 88: 
          { yypushback(yylength()); yybegin(_STRICT_QNAME);
          }
        case 452: break;
        case 71: 
          { return OP_MINUS;
          }
        case 453: break;
        case 219: 
          { /*pushState(_CAST_AS_EXPR);*/ yybegin(_VALIDATE_EXPR_X); return KW_VALIDATE;
          }
        case 454: break;
        case 34: 
          { yybegin(_CLOSE_BRACE); return OP_QUESTION;
          }
        case 455: break;
        case 87: 
          { pushState(); pushState(_XML_END_TAG); pushState(_XML_ATTRLIST_START); yybegin(_XML_TAG_NAME); return XML_TAG_START;
          }
        case 456: break;
        case 214: 
          { pushState(_PREDICATE_LIST); pushState(_NODE_TEST); yybegin(_COLONCOLON); return KW_DESCENDANT;
          }
        case 457: break;
        case 150: 
          { popState(); return XQ_STR_CHAR_REF;
          }
        case 458: break;
        case 100: 
          { popState(); return OP_EQUALS;
          }
        case 459: break;
        case 101: 
          { popState(); return XQ_NCNAME;
          }
        case 460: break;
        case 250: 
          { pushState(_PREDICATE_LIST); pushState(_NODE_TEST); yybegin(_COLONCOLON); return KW_ATTRIBUTE;
          }
        case 461: break;
        case 213: 
          { yybegin(_SEP); return KW_PRESERVE;
          }
        case 462: break;
        case 182: 
          { yybegin(_MODULE); return KW_MODULE;
          }
        case 463: break;
        case 238: 
          { yybegin(_TYPESWITCH_EXPR_); return KW_TYPESWITCH;
          }
        case 464: break;
        case 115: 
          { yypushback(yylength()); yybegin(_IF_EXPR);
          }
        case 465: break;
        case 166: 
          { popState(); return XML_STR_ENT_REF;
          }
        case 466: break;
        case 2: 
          { return WHITE_SPACE;
          }
        case 467: break;
        case 31: 
          { yypushback(yylength()); pushState(_ITEM_TYPE_AorE_); yybegin(_QNAME);
          }
        case 468: break;
        case 79: 
          { yypushback(1); yybegin(_ORDER_CLAUSE_MODIFIER_COLLATION);
          }
        case 469: break;
        case 16: 
          { yybegin(_DECLARE_COPYNS__); return OP_COMMA;
          }
        case 470: break;
        case 86: 
          { return XML_ELEMENT_CHAR;
          }
        case 471: break;
        case 186: 
          { yybegin(_IMPORT_SCHEMA); return KW_SCHEMA;
          }
        case 472: break;
        case 26: 
          { popState(); return OP_STAR;
          }
        case 473: break;
        case 38: 
          { pushState(_CLOSE_CURLY); pushState(_EXPR_LIST); yybegin(_EXPR_SINGLE); return OP_LCURLY;
          }
        case 474: break;
        case 204: 
          { pushState(_PREDICATE_LIST); yybegin(_EXPR_LIST_IN_CURLY); return KW_COMMENT;
          }
        case 475: break;
        case 8: 
          { return XQ_STR_CHAR;
          }
        case 476: break;
        case 155: 
          { pushState(_ITEM_TYPE_OCC); yybegin(_EMPTY_BRACES); return KW_NODE;
          }
        case 477: break;
        case 50: 
          { pushState(_QUANT_EXPR_LIST); pushState(_QUANT_EXPR_IN); yybegin(_PARAM); return OP_COMMA;
          }
        case 478: break;
        case 63: 
          { pushState(_PREDICATE_LIST); yybegin(_EXPR_LIST_OR_RBRACE); return OP_LBRACE;
          }
        case 479: break;
        case 5: 
          { return BAD_CHARACTER;
          }
        case 480: break;
        case 70: 
          { return OP_PLUS;
          }
        case 481: break;
        case 205: 
          { pushState(_SEP); yybegin(_STRINGLITERAL); return KW_ENCODING;
          }
        case 482: break;
        case 161: 
          { pushState(_PREDICATE_LIST); yybegin(_EXPR_LIST_IN_CURLY); return KW_TEXT;
          }
        case 483: break;
        case 61: 
          { pushState(_PREDICATE_LIST); yypushback(1); yybegin(_VARNAME);
          }
        case 484: break;
        case 196: 
          { yybegin(_IMPORT_SCHEMA_DEFAULT); return KW_DEFAULT;
          }
        case 485: break;
        case 187: 
          { yybegin(_EXPR_SINGLE); return KW_RETURN;
          }
        case 486: break;
        case 10: 
          { popState(); return XQ_STR_END;
          }
        case 487: break;
        case 20: 
          { yypushback(yylength()); popState();
          }
        case 488: break;
        case 96: 
          { return XQ_PRAGMA_CHAR;
          }
        case 489: break;
        case 143: 
          { yybegin(_VALIDATE_EXPR_); return KW_LAX;
          }
        case 490: break;
        case 134: 
          { popState(); return OP_COLONCOLON;
          }
        case 491: break;
        case 178: 
          { yybegin(_ORDER_CLAUSE_BY); return KW_ORDER;
          }
        case 492: break;
        case 22: 
          { yypushback(1); pushState(_AS); yybegin(_VARNAME);
          }
        case 493: break;
        case 144: 
          { yybegin(_PREDICATE_LIST); return XQ_DOUBLE_LITERAL;
          }
        case 494: break;
        case 51: 
          { pushState(_TYPESWITCH_EXPR__); pushState(_EXPR_LIST); yybegin(_EXPR_SINGLE); return OP_LBRACE;
          }
        case 495: break;
        case 159: 
          { pushState(_QUANT_EXPR_IN); yybegin(_PARAM); return KW_SOME;
          }
        case 496: break;
        case 154: 
          { yybegin(_EMPTY_BRACES); return KW_VOID;
          }
        case 497: break;
        case 17: 
          { yybegin(STR_START_QUOTE); return XQ_STR_START;
          }
        case 498: break;
        case 73: 
          { yypushback(yylength()); yybegin(_WILDCARD_QNAME);
          }
        case 499: break;
        case 181: 
          { yybegin(_XQUERY); return KW_XQUERY;
          }
        case 500: break;
        case 225: 
          { pushState(_SEP); yybegin(_URILITERAL); return KW_NAMESPACE;
          }
        case 501: break;
        case 125: 
          { yybegin(_EXPR_SINGLE); return KW_IN;
          }
        case 502: break;
        case 244: 
          { pushState(_ITEM_TYPE_OCC); pushState(_CLOSE_BRACE); pushState(_QNAME); yybegin(_OPEN_BRACE); return KW_SCHEMA_ELEMENT;
          }
        case 503: break;
        case 57: 
          { 
          }
        case 504: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
