/* The following code was generated by JFlex 1.4.3 on 09/04/11 15:33 */

package org.mn.plug.idea.xq4idea.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

// this lexer follows the principles set out in http://www.w3.org/TR/xquery-xpath-parsing/

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 09/04/11 15:33 from the specification file
 * <tt>C:/Users/Matt/IdeaProjects/ideaPlugins/xq4idea/source/xq4idea/src/org/mn/plug/idea/xq4idea/lang/lexer/_XQueryLexer.flex</tt>
 */
class _XQueryLexer extends AbstractLexer implements FlexLexer, XQueryTokenTypes {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int OPTION = 8;
  public static final int _QNAME_ = 58;
  public static final int STR_START_APOS = 20;
  public static final int XQUERYVERSION = 4;
  public static final int _DECLARE_OPTION_QN = 40;
  public static final int _XQUERY_VERSION_END = 32;
  public static final int STR_CHAR = 22;
  public static final int STR_START_QUOTE = 18;
  public static final int _DECLARE_VARIABLE = 48;
  public static final int NAME_SUFFIX = 28;
  public static final int EXPR_COMMENT = 2;
  public static final int _DECLARE = 38;
  public static final int _NAMESPACEDECL_URI = 52;
  public static final int _XQUERY_ENCODING_END = 36;
  public static final int OPERATOR = 6;
  public static final int _DECLARE_OPTION_QN_END = 42;
  public static final int _NAMESPACEDECL_URI_END = 54;
  public static final int _DECLARE_BOUNDARY_SPACE_END = 46;
  public static final int VARNAME = 10;
  public static final int _QNAME_LOCAL = 60;
  public static final int _NAMESPACEDECL_ = 50;
  public static final int _XQUERY_ENCODING = 34;
  public static final int NAMESPACEDECL = 16;
  public static final int _DECLARE_ORDERING_END = 44;
  public static final int XMLSPACE_DECL = 14;
  public static final int DECLAREORDERING = 12;
  public static final int STR_END = 24;
  public static final int _QNAME = 56;
  public static final int _XQUERY = 30;
  public static final int YYINITIAL = 0;
  public static final int NAME_PREFIX = 26;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 
    14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 16, 16, 16, 16, 16, 16, 
    19, 19, 20, 20, 21, 21, 16, 16, 22, 22, 23, 23, 11, 11
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\2\1\2\0\1\1\22\0\1\1\1\0\1\33\1\0\1\42"+
    "\1\0\1\0\1\34\1\45\1\44\1\0\1\5\1\0\1\13\1\3"+
    "\1\0\12\2\1\14\1\10\1\0\1\43\3\0\4\12\1\4\1\12"+
    "\24\12\4\0\1\6\1\0\1\25\1\40\1\23\1\22\1\17\1\12"+
    "\1\35\1\12\1\30\2\12\1\24\1\41\1\32\1\31\1\36\1\15"+
    "\1\20\1\27\1\37\1\16\1\26\1\12\1\11\1\21\1\12\57\0"+
    "\1\46\12\0\1\46\1\0\1\7\2\0\1\46\5\0\27\12\1\0"+
    "\37\12\1\0\72\12\2\46\13\12\2\46\10\12\1\46\65\12\1\46"+
    "\104\12\11\46\44\12\3\46\2\12\4\46\36\12\37\46\31\0\131\12"+
    "\22\46\7\12\4\0\12\46\2\47\16\0\5\46\11\0\1\46\21\0"+
    "\106\7\32\0\2\7\30\0\1\46\13\0\1\12\1\7\3\12\1\0"+
    "\1\12\1\0\24\12\1\0\54\12\1\0\7\12\3\46\1\12\1\46"+
    "\1\12\1\46\1\12\1\46\1\12\1\46\22\12\2\46\1\0\5\46"+
    "\4\0\1\46\14\12\1\46\102\12\1\46\14\12\1\46\44\12\1\0"+
    "\4\7\3\0\6\46\65\12\2\46\2\12\2\46\2\12\2\46\1\0"+
    "\34\12\2\46\10\12\2\0\2\12\6\0\20\46\41\0\46\12\2\0"+
    "\1\12\7\0\46\12\1\46\11\0\21\7\1\0\27\7\1\0\3\7"+
    "\1\0\1\7\1\0\2\7\1\0\1\7\13\0\33\12\5\0\3\12"+
    "\56\0\32\12\5\0\1\47\12\12\10\7\15\0\12\7\4\0\2\46"+
    "\1\7\107\12\2\46\5\12\1\46\17\12\1\46\4\12\1\0\1\12"+
    "\17\7\2\12\2\7\1\0\4\7\2\46\12\7\3\46\2\0\1\46"+
    "\20\0\1\46\1\0\36\46\35\0\3\46\60\0\46\46\13\0\1\46"+
    "\u014f\0\3\7\1\46\65\12\2\0\1\7\1\12\20\7\2\0\1\46"+
    "\4\7\3\0\12\12\2\7\2\0\12\7\21\0\3\7\1\0\10\12"+
    "\2\0\2\12\2\0\26\12\1\0\7\12\1\0\1\12\3\0\4\12"+
    "\2\0\1\7\1\46\7\7\2\0\2\7\2\0\3\7\11\0\1\7"+
    "\4\0\2\12\1\0\3\12\2\7\2\0\12\7\2\12\20\0\1\7"+
    "\2\0\6\12\4\0\2\12\2\0\26\12\1\0\7\12\1\0\2\12"+
    "\1\0\2\12\1\0\2\12\2\0\1\7\1\0\5\7\4\0\2\7"+
    "\2\0\3\7\13\0\4\12\1\0\1\12\7\0\12\7\2\7\3\12"+
    "\14\0\3\7\1\0\7\12\1\46\1\12\1\0\3\12\1\0\26\12"+
    "\1\0\7\12\1\0\2\12\1\0\5\12\2\0\1\7\1\12\10\7"+
    "\1\0\3\7\1\0\3\7\2\0\1\46\17\0\1\12\1\46\4\0"+
    "\12\7\21\0\3\7\1\0\10\12\2\0\2\12\2\0\26\12\1\0"+
    "\7\12\1\0\2\12\1\0\1\46\4\12\2\0\1\7\1\12\6\7"+
    "\3\0\2\7\2\0\3\7\10\0\2\7\4\0\2\12\1\0\3\12"+
    "\4\0\12\7\1\0\1\46\20\0\1\7\1\47\1\0\6\12\3\0"+
    "\3\12\1\0\4\12\3\0\2\12\1\0\1\12\1\0\2\12\3\0"+
    "\2\12\3\0\3\12\3\0\10\12\1\0\3\12\4\0\5\7\3\0"+
    "\3\7\1\0\4\7\11\0\1\7\17\0\11\7\21\0\3\7\1\0"+
    "\10\12\1\0\3\12\1\0\27\12\1\0\12\12\1\0\5\12\4\0"+
    "\7\7\1\0\3\7\1\0\4\7\7\0\2\7\11\0\2\12\4\0"+
    "\12\7\22\0\2\7\1\0\10\12\1\0\3\12\1\0\27\12\1\0"+
    "\12\12\1\0\5\12\3\0\1\46\7\7\1\0\3\7\1\0\4\7"+
    "\7\0\2\7\7\0\1\12\1\0\2\12\4\0\12\7\22\0\2\7"+
    "\1\0\10\12\1\0\3\12\1\0\27\12\1\0\20\12\4\0\6\7"+
    "\2\0\3\7\1\0\4\7\11\0\1\7\10\0\2\12\4\0\12\7"+
    "\25\0\22\46\3\0\30\46\1\0\11\46\1\0\1\46\2\0\7\46"+
    "\72\0\56\12\1\46\1\12\1\7\2\12\7\7\5\0\6\12\1\47"+
    "\10\7\1\0\12\7\47\0\2\12\1\0\1\12\2\0\2\12\1\0"+
    "\1\12\2\0\1\12\6\0\4\12\1\0\7\12\1\0\3\12\1\0"+
    "\1\12\1\0\1\12\2\0\2\12\1\0\2\12\1\46\1\12\1\7"+
    "\2\12\6\7\1\0\2\7\1\12\2\0\5\12\1\0\1\47\1\0"+
    "\6\7\2\0\12\7\2\0\2\46\42\0\1\46\27\0\2\7\6\0"+
    "\12\7\13\0\1\7\1\0\1\7\1\0\1\7\4\0\2\7\10\12"+
    "\1\0\41\12\1\46\6\0\24\7\1\0\2\7\4\47\4\0\6\7"+
    "\1\0\1\7\1\0\25\7\3\0\7\7\1\0\1\7\106\0\42\46"+
    "\1\0\5\46\1\0\2\46\45\0\6\46\112\0\46\12\12\0\47\12"+
    "\2\46\7\0\1\12\1\46\2\12\1\46\3\12\1\46\1\12\1\46"+
    "\2\12\1\46\5\12\51\46\1\12\1\46\1\12\1\46\1\12\13\46"+
    "\1\12\1\46\1\12\1\46\1\12\3\46\2\12\3\46\1\12\5\0"+
    "\3\12\1\46\1\12\1\46\1\12\1\46\1\12\1\46\1\12\3\46"+
    "\2\12\3\46\2\12\1\46\1\12\50\46\1\12\4\46\5\0\1\12"+
    "\2\46\1\12\2\46\2\12\7\46\2\12\1\46\1\12\1\46\7\12"+
    "\50\46\1\12\4\46\1\12\10\46\1\12\6\0\7\46\1\0\77\46"+
    "\1\0\1\46\1\0\4\46\2\0\7\46\1\0\1\46\1\0\4\46"+
    "\2\0\47\46\1\0\1\46\1\0\4\46\2\0\37\46\1\0\1\46"+
    "\1\0\4\46\2\0\7\46\1\0\1\46\1\0\4\46\2\0\7\46"+
    "\1\0\7\46\1\0\27\46\1\0\37\46\1\0\1\46\1\0\4\46"+
    "\2\0\7\46\1\0\47\46\1\0\23\46\105\0\125\46\14\0\u026c\46"+
    "\2\0\10\46\12\0\32\46\5\0\113\46\25\0\15\46\1\0\4\46"+
    "\16\0\22\46\16\0\22\46\16\0\15\46\1\0\3\46\17\0\64\46"+
    "\43\0\1\46\4\0\1\46\103\0\130\46\10\0\51\46\127\0\35\46"+
    "\63\0\36\46\2\0\5\46\u038b\0\154\46\224\0\234\12\4\0\132\12"+
    "\6\0\26\12\2\0\6\12\2\0\46\12\2\0\6\12\2\0\10\12"+
    "\1\0\1\12\1\0\1\12\1\0\1\12\1\0\37\12\2\0\65\12"+
    "\1\0\7\12\1\0\1\12\3\0\3\12\1\0\7\12\3\0\4\12"+
    "\2\0\6\12\4\0\15\12\5\0\3\12\1\0\7\12\164\0\1\46"+
    "\15\0\1\46\120\0\15\7\4\0\1\7\40\0\1\46\4\0\1\46"+
    "\2\0\12\46\1\0\1\46\3\0\5\46\6\0\1\46\1\0\1\12"+
    "\1\0\1\46\1\0\2\12\2\46\1\6\3\46\1\0\7\46\3\0"+
    "\3\46\5\0\5\46\66\0\3\6\u0e82\0\1\47\1\46\1\6\31\0"+
    "\11\6\6\7\1\0\5\47\5\0\2\46\4\0\124\12\2\46\2\0"+
    "\2\7\2\0\2\47\1\46\1\0\132\12\1\0\3\47\1\46\5\0"+
    "\50\12\4\0\136\46\21\0\30\46\70\0\20\46\u0200\0\u19b6\46\112\0"+
    "\u51a6\12\132\0\u048d\46\u0773\0\u2ba4\12\134\0\u0800\0\u1900\0\u012e\46\2\0"+
    "\73\46\225\0\7\46\14\0\5\46\5\0\1\46\1\0\12\46\1\0"+
    "\15\46\1\0\5\46\1\0\1\46\1\0\2\46\1\0\2\46\1\0"+
    "\154\46\41\0\u016b\46\22\0\100\46\2\0\66\46\50\0\14\46\164\0"+
    "\5\46\1\0\207\46\44\0\32\46\6\0\32\46\13\0\131\46\3\0"+
    "\6\46\2\0\6\46\2\0\6\46\2\0\3\46\41\0\2\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\30\0\1\1\1\2\1\3\1\1\3\4\1\1\3\5"+
    "\1\6\1\7\4\10\2\11\2\12\4\4\2\13\1\14"+
    "\2\15\1\4\1\16\1\4\1\17\1\20\4\4\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\0\2\4\1\33\1\34\1\35\1\36\1\37"+
    "\4\4\1\40\1\41\10\4\1\42\1\0\40\4\1\43"+
    "\7\4\1\0\1\4\1\44\10\4\1\45\1\4\1\0"+
    "\1\4\1\46\1\4\1\47\1\4\1\50\4\4\1\0"+
    "\2\4\1\51\1\52\1\53\1\54\1\4\1\55\1\4"+
    "\1\56\1\57\5\0\1\60";

  private static int [] zzUnpackAction() {
    int [] result = new int[179];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\50\0\120\0\170\0\240\0\310\0\360\0\u0118"+
    "\0\u0140\0\u0168\0\u0190\0\u01b8\0\u01e0\0\u0208\0\u0230\0\u0258"+
    "\0\u0280\0\u02a8\0\u02d0\0\u02f8\0\u0320\0\u0348\0\u0370\0\u0398"+
    "\0\u01b8\0\u03c0\0\u03e8\0\u0410\0\u0438\0\u0460\0\u0488\0\u04b0"+
    "\0\u01b8\0\u04d8\0\u0500\0\u01b8\0\u01b8\0\u01b8\0\u03c0\0\u0438"+
    "\0\u04b0\0\u0528\0\u0550\0\u0578\0\u05a0\0\u05c8\0\u05f0\0\u0618"+
    "\0\u0640\0\u0668\0\u0690\0\u01b8\0\u06b8\0\u06e0\0\u0708\0\u01b8"+
    "\0\u0730\0\u01b8\0\u01b8\0\u0758\0\u0780\0\u07a8\0\u07d0\0\u01b8"+
    "\0\u01b8\0\u01b8\0\u01b8\0\u01b8\0\u01b8\0\u01b8\0\u01b8\0\u07f8"+
    "\0\u0820\0\u0848\0\u0870\0\u0898\0\u01b8\0\u01b8\0\u01b8\0\u01b8"+
    "\0\u01b8\0\u08c0\0\u08e8\0\u0910\0\u0938\0\u01b8\0\u01b8\0\u0960"+
    "\0\u0988\0\u09b0\0\u09d8\0\u0a00\0\u0a28\0\u0a50\0\u0a78\0\u0aa0"+
    "\0\u0aa0\0\u0ac8\0\u0af0\0\u0b18\0\u0b40\0\u0b68\0\u0b90\0\u0bb8"+
    "\0\u0be0\0\u0c08\0\u0c30\0\u0c58\0\u0c80\0\u0ca8\0\u0cd0\0\u0cf8"+
    "\0\u0d20\0\u0d48\0\u0d70\0\u0d98\0\u0dc0\0\u0de8\0\u0e10\0\u0e38"+
    "\0\u0e60\0\u0e88\0\u0eb0\0\u0ed8\0\u0f00\0\u0f28\0\u0f50\0\u0f78"+
    "\0\u0fa0\0\u0438\0\u0fc8\0\u0ff0\0\u1018\0\u1040\0\u1068\0\u1090"+
    "\0\u10b8\0\u10e0\0\u1108\0\u0438\0\u1130\0\u1158\0\u1180\0\u11a8"+
    "\0\u11d0\0\u11f8\0\u1220\0\u1248\0\u0438\0\u1270\0\u1298\0\u12c0"+
    "\0\u0438\0\u12e8\0\u0438\0\u1310\0\u0438\0\u1338\0\u1360\0\u1388"+
    "\0\u13b0\0\u13d8\0\u1400\0\u1428\0\u0438\0\u0438\0\u0438\0\u0438"+
    "\0\u1450\0\u01b8\0\u1478\0\u0438\0\u0438\0\u14a0\0\u14c8\0\u14f0"+
    "\0\u1518\0\u1540\0\u01b8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[179];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\31\1\32\1\33\1\34\1\35\4\31\1\36\1\35"+
    "\2\31\5\35\1\37\10\35\2\31\5\35\3\31\1\40"+
    "\2\35\14\41\1\42\30\41\1\43\2\41\1\31\1\32"+
    "\2\31\1\35\4\31\2\35\2\31\16\35\1\44\1\45"+
    "\5\35\3\31\1\40\2\35\1\46\1\47\2\46\1\50"+
    "\4\46\2\50\2\46\16\50\2\46\5\50\3\46\1\51"+
    "\2\50\1\31\1\32\2\31\1\52\1\31\1\53\2\31"+
    "\2\52\2\31\16\52\2\31\5\52\3\31\1\40\2\35"+
    "\1\31\1\32\2\31\1\54\1\31\1\55\2\31\2\54"+
    "\2\31\16\54\2\31\5\54\3\31\1\40\2\35\1\31"+
    "\1\32\2\31\1\35\4\31\2\35\2\31\1\35\1\56"+
    "\12\35\1\57\1\35\2\31\5\35\3\31\1\40\2\35"+
    "\1\31\1\32\2\31\1\35\4\31\2\35\2\31\12\35"+
    "\1\60\3\35\2\31\1\35\1\61\3\35\3\31\1\40"+
    "\2\35\1\31\1\32\2\31\1\62\1\31\1\63\2\31"+
    "\2\62\2\31\16\62\2\31\5\62\3\31\1\40\2\35"+
    "\33\64\1\65\50\64\1\66\13\64\50\0\1\31\1\32"+
    "\2\31\1\35\4\31\2\35\2\31\16\35\2\31\5\35"+
    "\3\31\1\40\2\35\1\31\1\32\2\31\1\35\4\31"+
    "\2\35\2\31\11\35\1\67\4\35\2\31\5\35\3\31"+
    "\1\40\2\35\1\31\1\32\2\31\1\35\3\31\1\70"+
    "\2\35\2\31\2\35\1\71\13\35\2\31\5\35\3\31"+
    "\1\40\2\35\1\31\1\32\2\31\1\35\4\31\2\35"+
    "\2\31\16\35\1\72\1\73\5\35\3\31\1\40\2\35"+
    "\1\31\1\32\2\31\1\35\3\31\1\70\2\35\2\31"+
    "\16\35\2\31\5\35\3\31\1\40\2\35\1\31\1\32"+
    "\2\31\1\35\4\31\2\35\2\31\11\35\1\74\2\35"+
    "\1\75\1\76\2\31\3\35\1\77\1\35\3\31\1\40"+
    "\2\35\1\31\1\32\2\31\1\35\4\31\2\35\2\31"+
    "\16\35\1\100\1\101\5\35\3\31\1\40\2\35\1\31"+
    "\1\32\2\31\1\35\4\31\2\35\2\31\16\35\2\31"+
    "\5\35\1\102\2\31\1\40\2\35\1\31\1\32\2\31"+
    "\1\35\4\31\2\35\2\31\16\35\2\31\5\35\1\31"+
    "\1\103\1\31\1\40\2\35\1\31\1\32\2\31\1\35"+
    "\4\31\2\35\2\31\16\35\1\104\1\105\5\35\3\31"+
    "\1\40\2\35\14\106\1\107\37\106\1\110\1\106\1\110"+
    "\2\106\2\110\2\106\16\110\2\106\5\110\6\106\1\0"+
    "\1\32\50\0\1\33\1\111\1\112\12\0\1\112\32\0"+
    "\1\111\51\0\1\35\4\0\2\35\2\0\16\35\2\0"+
    "\5\35\4\0\2\35\4\0\1\35\4\0\2\35\2\0"+
    "\1\113\15\35\2\0\5\35\4\0\2\35\4\0\1\35"+
    "\4\0\2\35\2\0\2\35\1\114\13\35\2\0\5\35"+
    "\4\0\2\35\14\0\1\115\77\0\1\116\17\0\1\117"+
    "\35\0\2\53\1\52\1\0\2\53\1\0\2\52\1\53"+
    "\1\120\16\52\2\0\5\52\4\0\1\35\1\52\2\0"+
    "\3\53\1\0\2\53\1\0\3\53\1\120\16\53\2\0"+
    "\5\53\5\0\1\53\2\0\2\55\1\54\1\0\2\55"+
    "\1\0\2\54\1\55\1\121\16\54\2\0\5\54\4\0"+
    "\1\35\1\54\2\0\3\55\1\0\2\55\1\0\3\55"+
    "\1\121\16\55\2\0\5\55\5\0\1\55\4\0\1\35"+
    "\4\0\2\35\2\0\15\35\1\122\2\0\5\35\4\0"+
    "\2\35\4\0\1\35\4\0\2\35\2\0\3\35\1\123"+
    "\12\35\2\0\5\35\4\0\2\35\4\0\1\35\4\0"+
    "\2\35\2\0\16\35\2\0\2\35\1\124\2\35\4\0"+
    "\2\35\4\0\1\35\4\0\2\35\2\0\3\35\1\125"+
    "\12\35\2\0\5\35\4\0\2\35\2\0\2\63\1\62"+
    "\1\0\2\63\1\0\2\62\1\63\1\0\16\62\2\0"+
    "\5\62\4\0\1\35\1\62\2\0\3\63\1\0\2\63"+
    "\1\0\3\63\1\0\16\63\2\0\5\63\5\0\1\63"+
    "\33\0\1\126\50\0\1\127\17\0\1\35\4\0\2\35"+
    "\2\0\2\35\1\130\13\35\2\0\5\35\4\0\2\35"+
    "\4\0\1\35\4\0\2\35\2\0\15\35\1\131\2\0"+
    "\5\35\4\0\2\35\4\0\1\35\4\0\2\35\2\0"+
    "\10\35\1\132\5\35\2\0\5\35\4\0\2\35\4\0"+
    "\1\35\4\0\2\35\2\0\3\35\1\133\12\35\2\0"+
    "\1\35\1\134\3\35\4\0\2\35\4\0\1\35\4\0"+
    "\2\35\2\0\10\35\1\135\5\35\2\0\5\35\4\0"+
    "\2\35\4\0\1\35\4\0\2\35\2\0\10\35\1\136"+
    "\3\35\1\137\1\35\2\0\5\35\4\0\2\35\2\0"+
    "\3\110\1\0\2\110\1\0\3\110\1\0\16\110\2\0"+
    "\5\110\5\0\1\110\2\0\1\111\1\0\1\112\12\0"+
    "\1\112\32\0\1\140\2\0\1\141\5\0\1\141\40\0"+
    "\1\35\4\0\2\35\2\0\1\35\1\142\14\35\2\0"+
    "\5\35\4\0\2\35\4\0\1\35\4\0\2\35\2\0"+
    "\6\35\1\143\7\35\2\0\5\35\4\0\2\35\4\0"+
    "\1\35\4\0\2\35\2\0\14\35\1\144\1\35\2\0"+
    "\5\35\4\0\2\35\4\0\1\35\4\0\2\35\2\0"+
    "\5\35\1\145\10\35\2\0\5\35\4\0\2\35\4\0"+
    "\1\35\4\0\2\35\2\0\3\35\1\146\12\35\2\0"+
    "\5\35\4\0\2\35\4\0\1\35\4\0\2\35\2\0"+
    "\2\35\1\147\13\35\2\0\5\35\4\0\2\35\4\0"+
    "\1\35\4\0\2\35\2\0\3\35\1\150\12\35\2\0"+
    "\5\35\4\0\2\35\4\0\1\35\4\0\2\35\2\0"+
    "\6\35\1\151\7\35\2\0\5\35\4\0\2\35\4\0"+
    "\1\35\4\0\2\35\2\0\3\35\1\152\12\35\2\0"+
    "\5\35\4\0\2\35\4\0\1\35\4\0\2\35\2\0"+
    "\5\35\1\153\10\35\2\0\5\35\4\0\2\35\4\0"+
    "\1\35\4\0\2\35\2\0\16\35\2\0\2\35\1\154"+
    "\2\35\4\0\2\35\4\0\1\35\4\0\2\35\2\0"+
    "\16\35\2\0\4\35\1\155\4\0\2\35\4\0\1\35"+
    "\4\0\2\35\2\0\12\35\1\156\3\35\2\0\5\35"+
    "\4\0\2\35\4\0\1\35\4\0\2\35\2\0\1\35"+
    "\1\157\14\35\2\0\5\35\4\0\2\35\2\0\1\140"+
    "\51\0\1\35\4\0\2\35\2\0\2\35\1\160\13\35"+
    "\2\0\5\35\4\0\2\35\4\0\1\35\4\0\2\35"+
    "\2\0\7\35\1\161\6\35\2\0\5\35\4\0\2\35"+
    "\4\0\1\35\4\0\2\35\2\0\3\35\1\162\12\35"+
    "\2\0\5\35\4\0\2\35\4\0\1\35\4\0\2\35"+
    "\2\0\2\35\1\163\13\35\2\0\5\35\4\0\2\35"+
    "\4\0\1\35\4\0\2\35\2\0\13\35\1\164\2\35"+
    "\2\0\5\35\4\0\2\35\4\0\1\35\4\0\2\35"+
    "\2\0\12\35\1\165\3\35\2\0\5\35\4\0\2\35"+
    "\4\0\1\35\4\0\2\35\2\0\12\35\1\166\3\35"+
    "\2\0\5\35\4\0\2\35\4\0\1\35\4\0\2\35"+
    "\2\0\14\35\1\167\1\35\2\0\5\35\4\0\2\35"+
    "\4\0\1\35\4\0\2\35\2\0\13\35\1\170\2\35"+
    "\2\0\5\35\4\0\2\35\4\0\1\35\4\0\2\35"+
    "\2\0\2\35\1\171\13\35\2\0\5\35\4\0\2\35"+
    "\4\0\1\35\4\0\2\35\2\0\13\35\1\172\2\35"+
    "\2\0\5\35\4\0\2\35\4\0\1\35\4\0\2\35"+
    "\2\0\2\35\1\173\13\35\2\0\5\35\4\0\2\35"+
    "\4\0\1\35\4\0\2\35\2\0\2\35\1\174\13\35"+
    "\2\0\5\35\4\0\2\35\4\0\1\35\4\0\2\35"+
    "\2\0\15\35\1\175\2\0\5\35\4\0\2\35\4\0"+
    "\1\35\4\0\2\35\2\0\3\35\1\176\12\35\2\0"+
    "\5\35\4\0\2\35\4\0\1\35\4\0\2\35\2\0"+
    "\10\35\1\177\5\35\2\0\5\35\4\0\2\35\4\0"+
    "\1\35\4\0\2\35\2\0\5\35\1\200\10\35\2\0"+
    "\5\35\4\0\2\35\4\0\1\35\4\0\2\35\2\0"+
    "\3\35\1\201\12\35\2\0\5\35\4\0\2\35\4\0"+
    "\1\35\4\0\2\35\2\0\16\35\2\0\1\35\1\202"+
    "\3\35\4\0\2\35\4\0\1\35\4\0\2\35\2\0"+
    "\2\35\1\203\13\35\2\0\5\35\4\0\2\35\4\0"+
    "\1\35\4\0\2\35\2\0\13\35\1\204\2\35\2\0"+
    "\5\35\4\0\2\35\4\0\1\35\4\0\2\35\2\0"+
    "\5\35\1\205\10\35\2\0\5\35\4\0\2\35\4\0"+
    "\1\35\4\0\2\35\2\0\10\35\1\206\5\35\2\0"+
    "\5\35\4\0\2\35\4\0\1\35\4\0\2\35\2\0"+
    "\3\35\1\207\12\35\2\0\5\35\4\0\2\35\4\0"+
    "\1\35\4\0\2\35\2\0\14\35\1\210\1\35\2\0"+
    "\5\35\4\0\2\35\4\0\1\35\4\0\2\35\2\0"+
    "\12\35\1\211\3\35\2\0\5\35\4\0\2\35\4\0"+
    "\1\35\4\0\2\35\1\212\1\0\16\35\2\0\5\35"+
    "\4\0\2\35\4\0\1\35\4\0\2\35\2\0\5\35"+
    "\1\213\10\35\2\0\5\35\4\0\2\35\4\0\1\35"+
    "\4\0\2\35\2\0\4\35\1\214\11\35\2\0\5\35"+
    "\4\0\2\35\4\0\1\35\4\0\2\35\2\0\3\35"+
    "\1\215\12\35\2\0\5\35\4\0\2\35\4\0\1\35"+
    "\4\0\2\35\2\0\2\35\1\216\13\35\2\0\5\35"+
    "\4\0\2\35\4\0\1\35\4\0\2\35\2\0\2\35"+
    "\1\217\13\35\2\0\5\35\4\0\2\35\4\0\1\35"+
    "\4\0\2\35\2\0\3\35\1\220\12\35\2\0\5\35"+
    "\4\0\2\35\4\0\1\35\4\0\2\35\2\0\14\35"+
    "\1\221\1\35\2\0\5\35\4\0\2\35\4\0\1\35"+
    "\4\0\2\35\2\0\13\35\1\222\2\35\2\0\5\35"+
    "\4\0\2\35\4\0\1\35\4\0\2\35\2\0\16\35"+
    "\2\0\3\35\1\223\1\35\4\0\2\35\4\0\1\35"+
    "\4\0\2\35\2\0\13\35\1\224\2\35\2\0\5\35"+
    "\4\0\2\35\4\0\1\35\4\0\2\35\2\0\15\35"+
    "\1\225\2\0\5\35\4\0\2\35\4\0\1\35\4\0"+
    "\2\35\2\0\16\35\2\0\1\35\1\226\3\35\4\0"+
    "\2\35\16\0\1\227\35\0\1\35\4\0\2\35\2\0"+
    "\10\35\1\230\5\35\2\0\5\35\4\0\2\35\4\0"+
    "\1\35\4\0\2\35\2\0\2\35\1\231\13\35\2\0"+
    "\5\35\4\0\2\35\4\0\1\35\4\0\2\35\2\0"+
    "\3\35\1\232\12\35\2\0\5\35\4\0\2\35\4\0"+
    "\1\35\4\0\2\35\2\0\5\35\1\233\10\35\2\0"+
    "\5\35\4\0\2\35\4\0\1\35\4\0\2\35\2\0"+
    "\11\35\1\234\4\35\2\0\5\35\4\0\2\35\4\0"+
    "\1\35\4\0\2\35\2\0\15\35\1\235\2\0\5\35"+
    "\4\0\2\35\4\0\1\35\4\0\2\35\2\0\15\35"+
    "\1\236\2\0\5\35\4\0\2\35\4\0\1\35\4\0"+
    "\2\35\2\0\7\35\1\237\6\35\2\0\5\35\4\0"+
    "\2\35\4\0\1\35\4\0\2\35\2\0\15\35\1\240"+
    "\2\0\5\35\4\0\2\35\4\0\1\35\4\0\2\35"+
    "\2\0\10\35\1\241\5\35\2\0\5\35\4\0\2\35"+
    "\20\0\1\242\33\0\1\35\4\0\2\35\2\0\3\35"+
    "\1\243\12\35\2\0\5\35\4\0\2\35\4\0\1\35"+
    "\4\0\2\35\2\0\2\35\1\244\13\35\2\0\5\35"+
    "\4\0\2\35\4\0\1\35\4\0\2\35\2\0\2\35"+
    "\1\245\13\35\2\0\5\35\4\0\2\35\4\0\1\35"+
    "\4\0\2\35\2\0\16\35\2\0\1\246\4\35\4\0"+
    "\2\35\4\0\1\35\4\0\2\35\2\0\2\35\1\247"+
    "\13\35\2\0\5\35\4\0\2\35\4\0\1\35\4\0"+
    "\2\35\2\0\16\35\2\0\1\250\4\35\4\0\2\35"+
    "\4\0\1\35\4\0\2\35\2\0\6\35\1\251\7\35"+
    "\2\0\5\35\4\0\2\35\30\0\1\252\23\0\1\35"+
    "\4\0\2\35\2\0\4\35\1\253\11\35\2\0\5\35"+
    "\4\0\2\35\4\0\1\35\4\0\2\35\2\0\5\35"+
    "\1\254\10\35\2\0\5\35\4\0\2\35\4\0\1\35"+
    "\4\0\2\35\2\0\2\35\1\255\13\35\2\0\5\35"+
    "\4\0\2\35\4\0\1\35\4\0\2\35\1\256\1\0"+
    "\16\35\2\0\5\35\4\0\2\35\27\0\1\257\56\0"+
    "\1\260\36\0\1\261\45\0\1\262\43\0\1\263\30\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5480];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\13\0\1\10\14\0\1\11\7\1\1\11\2\1\3\11"+
    "\15\1\1\11\3\1\1\11\1\1\2\11\4\1\10\11"+
    "\2\1\1\0\2\1\5\11\4\1\2\11\11\1\1\0"+
    "\50\1\1\0\14\1\1\0\12\1\1\0\7\1\1\11"+
    "\3\1\5\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[179];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */


  _XQueryLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _XQueryLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1818) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 39: 
          { yybegin(_DECLARE_ORDERING_END); return KW_ORDERED;
          }
        case 49: break;
        case 5: 
          { return XQ_COMMENT_CHAR;
          }
        case 50: break;
        case 43: 
          { yybegin(_DECLARE_VARIABLE); return KW_VARIABLE;
          }
        case 51: break;
        case 31: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { pushState(OPERATOR); yybegin(_QNAME); return XQ_PREFIX_NAME;
          }
        case 52: break;
        case 42: 
          { yybegin(_XQUERY_ENCODING); return KW_ENCODING;
          }
        case 53: break;
        case 47: 
          { yybegin(NAMESPACEDECL); return KW_NAMESPACE;
          }
        case 54: break;
        case 33: 
          { return XQ_STR_ESCAPE_APOS;
          }
        case 55: break;
        case 28: 
          { popState(); return XQ_COMMENT_END;
          }
        case 56: break;
        case 32: 
          { return XQ_STR_ESCAPE_QUOTE;
          }
        case 57: break;
        case 12: 
          { return XQ_STR_CHAR;
          }
        case 58: break;
        case 48: 
          { yybegin(XMLSPACE_DECL); return KW_BOUNDARY_SPACE;
          }
        case 59: break;
        case 3: 
          { yybegin(OPERATOR); return XQ_INTEGER_LITERAL;
          }
        case 60: break;
        case 38: 
          { yybegin(_DECLARE); return KW_DECLARE;
          }
        case 61: break;
        case 24: 
          { yybegin(_QNAME_); return OP_COLON;
          }
        case 62: break;
        case 14: 
          { yybegin(YYINITIAL); return OP_SEPERATOR;
          }
        case 63: break;
        case 46: 
          { yybegin(_DECLARE_ORDERING_END); return KW_UNORDERED;
          }
        case 64: break;
        case 29: 
          { pushState(); return XQ_COMMENT_START;
          }
        case 65: break;
        case 27: 
          { pushState(); yybegin(EXPR_COMMENT); return XQ_COMMENT_START;
          }
        case 66: break;
        case 25: 
          { popState(); return XQ_LOCAL_NAME;
          }
        case 67: break;
        case 45: 
          { yybegin(_NAMESPACEDECL_URI); return KW_NAMESPACE;
          }
        case 68: break;
        case 16: 
          { pushState(_XQUERY_ENCODING_END); yybegin(STR_START_APOS); return XQ_STR_START;
          }
        case 69: break;
        case 18: 
          { pushState(_DECLARE_OPTION_QN_END); yybegin(STR_START_APOS); return XQ_STR_START;
          }
        case 70: break;
        case 8: 
          { yybegin(YYINITIAL); return WHITE_SPACE;
          }
        case 71: break;
        case 44: 
          { yybegin(DECLAREORDERING); return KW_ORDERING;
          }
        case 72: break;
        case 36: 
          { yybegin(_XQUERY); return KW_XQUERY;
          }
        case 73: break;
        case 26: 
          { yybegin(OPERATOR); return XQ_DECIMAL_LITERAL;
          }
        case 74: break;
        case 10: 
          { yybegin(OPERATOR); return XQ_LOCAL_NAME;
          }
        case 75: break;
        case 6: 
          { pushState(_XQUERY_VERSION_END); yybegin(STR_START_QUOTE); return XQ_STR_START;
          }
        case 76: break;
        case 40: 
          { yybegin(XQUERYVERSION); return KW_VERSION;
          }
        case 77: break;
        case 9: 
          { yybegin(_DECLARE_OPTION_QN); return XQ_LOCAL_NAME;
          }
        case 78: break;
        case 17: 
          { pushState(_DECLARE_OPTION_QN_END); yybegin(STR_START_QUOTE); return XQ_STR_START;
          }
        case 79: break;
        case 13: 
          { popState(); return XQ_STR_END;
          }
        case 80: break;
        case 22: 
          { pushState(_NAMESPACEDECL_URI_END); yybegin(STR_START_APOS); return XQ_STR_START;
          }
        case 81: break;
        case 4: 
          { return BAD_WORD;
          }
        case 82: break;
        case 1: 
          { yybegin(YYINITIAL); return BAD_CHARACTER;
          }
        case 83: break;
        case 19: 
          { yybegin(VARNAME); return OP_VARSTART;
          }
        case 84: break;
        case 21: 
          { pushState(_NAMESPACEDECL_URI_END); yybegin(STR_START_QUOTE); return XQ_STR_START;
          }
        case 85: break;
        case 30: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { pushState(_DECLARE_OPTION_QN); yybegin(_QNAME); return XQ_PREFIX_NAME;
          }
        case 86: break;
        case 23: 
          { return BAD_CHARACTER;
          }
        case 87: break;
        case 7: 
          { pushState(_XQUERY_VERSION_END); yybegin(STR_START_APOS); return XQ_STR_START;
          }
        case 88: break;
        case 15: 
          { pushState(_XQUERY_ENCODING_END); yybegin(STR_START_QUOTE); return XQ_STR_START;
          }
        case 89: break;
        case 37: 
          { yybegin(OPTION); return KW_OPTION;
          }
        case 90: break;
        case 2: 
          { return WHITE_SPACE;
          }
        case 91: break;
        case 41: 
          { yybegin(_DECLARE_BOUNDARY_SPACE_END); return KW_PRESERVE;
          }
        case 92: break;
        case 35: 
          { yybegin(_DECLARE_BOUNDARY_SPACE_END); return KW_STRIP;
          }
        case 93: break;
        case 11: 
          { yybegin(_NAMESPACEDECL_); return XQ_LOCAL_NAME;
          }
        case 94: break;
        case 34: 
          { yybegin(OPERATOR); return XQ_DOUBLE_LITERAL;
          }
        case 95: break;
        case 20: 
          { yybegin(_NAMESPACEDECL_URI); return OP_EQUALS;
          }
        case 96: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
