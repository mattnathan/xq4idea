/* The following code was generated by JFlex 1.4.3 on 10/04/11 11:01 */

package org.mn.plug.idea.xq4idea.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

// this lexer follows the principles set out in http://www.w3.org/TR/xquery-xpath-parsing/
/**
 * Generated lexer
 */
@SuppressWarnings({"UnusedDeclaration", "UnusedAssignment", "FieldCanBeLocal", "AccessStaticViaInstance", "JavaDoc", "ConstantConditions"})

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 10/04/11 11:01 from the specification file
 * <tt>C:/Users/Matt/IdeaProjects/ideaPlugins/xq4idea/source/xq4idea/src/org/mn/plug/idea/xq4idea/lang/lexer/_XQueryLexer.flex</tt>
 */
class _XQueryLexer extends AbstractLexer implements FlexLexer, XQueryTokenTypes {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int _DECLARE_DEFAULT = 26;
  public static final int _AS = 60;
  public static final int _FOR_CLAUSE_VAR_POS = 98;
  public static final int _AS_SELEM = 80;
  public static final int _XQUERY_VERSION = 14;
  public static final int _CLOSE_BRACE = 134;
  public static final int _IMPORT_SCHEMA = 38;
  public static final int _WHERE_CLAUSE = 110;
  public static final int _AS_AorE = 74;
  public static final int _ATLIST = 54;
  public static final int NAMESPACEDECL = 6;
  public static final int _DECLARE_VARIABLE = 34;
  public static final int _FLWOR_BODY3 = 90;
  public static final int _FLWOR_BODY2 = 88;
  public static final int _FLWOR_BODY1 = 86;
  public static final int _FOR_CLAUSE = 92;
  public static final int _FOR_CLAUSE_VAR_IN = 102;
  public static final int _AS_SATTR = 72;
  public static final int _LET_CLAUSE_VAR = 108;
  public static final int _AS_AorE_ = 76;
  public static final int _URILITERAL = 48;
  public static final int _EMPTY_BRACES = 128;
  public static final int _DECLARE_DEFAULT_NAMESPACE = 32;
  public static final int _SEP = 136;
  public static final int _FOR_CLAUSE_VAR_POS_ = 100;
  public static final int _AS_DN = 66;
  public static final int _AS_OCC = 64;
  public static final int _OPEN_BRACE = 132;
  public static final int STR_START_APOS = 10;
  public static final int _ORDER_CLAUSE_LIST = 116;
  public static final int _FLWOR_HEAD = 84;
  public static final int _AS_PI = 68;
  public static final int _IMPORT_MODULE = 44;
  public static final int _IMPORT_SCHEMA_DEFAULT_ELEMENT = 42;
  public static final int STR_START_QUOTE = 8;
  public static final int _STABLE_ORDER_CLAUSE = 126;
  public static final int _AS_ = 62;
  public static final int _DECLARE_COPYNS_ = 22;
  public static final int DECLAREORDERING = 4;
  public static final int _FOR_CLAUSE_ = 94;
  public static final int _ORDER_CLAUSE_MODIFIER_COLLATION = 124;
  public static final int _DECLARE_DEFAULT_ORDER_EMPTY = 30;
  public static final int _ORDER_CLAUSE = 112;
  public static final int _QNAME_LOCAL = 144;
  public static final int _LET_CLAUSE_ = 106;
  public static final int _STRINGLITERAL = 50;
  public static final int _QNAME_ = 142;
  public static final int _MODULE = 16;
  public static final int _AS_AorE__ = 78;
  public static final int _DECLARE_DEFAULT_ORDER = 28;
  public static final int _DECLARE = 18;
  public static final int YYINITIAL = 0;
  public static final int _EMPTY_BRACES_ = 130;
  public static final int _EXPR_SINGLE = 82;
  public static final int _ATLIST_ = 56;
  public static final int _LET_CLAUSE = 104;
  public static final int _ORDER_CLAUSE_MODIFIER = 118;
  public static final int _QNAME = 140;
  public static final int _IMPORT_SCHEMA_DEFAULT = 40;
  public static final int _NCNAME = 138;
  public static final int _AS_ATTR = 70;
  public static final int _IMPORT = 36;
  public static final int _ORDER_CLAUSE_MODIFIER_EMPTY = 120;
  public static final int _XQUERY = 12;
  public static final int _PRESERVE_OR_STRIP = 46;
  public static final int _ORDER_CLAUSE_BY = 114;
  public static final int _ORDER_CLAUSE_MODIFIER_EMPTY_ = 122;
  public static final int EXPR_COMMENT = 2;
  public static final int _NAMESPACEDECL_ = 52;
  public static final int _PARAM = 58;
  public static final int _FOR_CLAUSE_VAR = 96;
  public static final int _DECLARE_COPYNS = 20;
  public static final int _DECLARE_COPYNS__ = 24;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 
    24, 24, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 30, 
    31, 31, 32, 32, 33, 33, 34, 34, 34, 34, 35, 35, 36, 36, 37, 37, 
    34, 34, 38, 38, 39, 39, 40, 40, 41, 41, 42, 42, 43, 43, 44, 44, 
    45, 45, 46, 46, 47, 47, 48, 48, 49, 49, 50, 50, 51, 51, 52, 52, 
    53, 53, 54, 54, 55, 55, 56, 56, 57, 57, 58, 58, 59, 59, 60, 60, 
    61, 61, 62, 62, 63, 63, 62, 62, 64, 64, 65, 65, 66, 66, 67, 67, 
    68, 68
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\2\1\2\0\1\1\22\0\1\1\1\0\1\47\1\0\1\44"+
    "\1\0\1\0\1\50\1\53\1\51\1\46\1\5\1\42\1\13\1\3"+
    "\1\0\12\2\1\14\1\10\1\0\1\41\1\0\1\45\1\0\4\12"+
    "\1\4\1\12\24\12\4\0\1\6\1\0\1\25\1\37\1\23\1\22"+
    "\1\17\1\40\1\36\1\43\1\30\2\12\1\24\1\26\1\35\1\27"+
    "\1\31\1\15\1\20\1\34\1\32\1\16\1\33\1\52\1\11\1\21"+
    "\1\12\57\0\1\54\12\0\1\54\1\0\1\7\2\0\1\54\5\0"+
    "\27\12\1\0\37\12\1\0\72\12\2\54\13\12\2\54\10\12\1\54"+
    "\65\12\1\54\104\12\11\54\44\12\3\54\2\12\4\54\36\12\37\54"+
    "\31\0\131\12\22\54\7\12\4\0\12\54\2\55\16\0\5\54\11\0"+
    "\1\54\21\0\106\7\32\0\2\7\30\0\1\54\13\0\1\12\1\7"+
    "\3\12\1\0\1\12\1\0\24\12\1\0\54\12\1\0\7\12\3\54"+
    "\1\12\1\54\1\12\1\54\1\12\1\54\1\12\1\54\22\12\2\54"+
    "\1\0\5\54\4\0\1\54\14\12\1\54\102\12\1\54\14\12\1\54"+
    "\44\12\1\0\4\7\3\0\6\54\65\12\2\54\2\12\2\54\2\12"+
    "\2\54\1\0\34\12\2\54\10\12\2\0\2\12\6\0\20\54\41\0"+
    "\46\12\2\0\1\12\7\0\46\12\1\54\11\0\21\7\1\0\27\7"+
    "\1\0\3\7\1\0\1\7\1\0\2\7\1\0\1\7\13\0\33\12"+
    "\5\0\3\12\56\0\32\12\5\0\1\55\12\12\10\7\15\0\12\7"+
    "\4\0\2\54\1\7\107\12\2\54\5\12\1\54\17\12\1\54\4\12"+
    "\1\0\1\12\17\7\2\12\2\7\1\0\4\7\2\54\12\7\3\54"+
    "\2\0\1\54\20\0\1\54\1\0\36\54\35\0\3\54\60\0\46\54"+
    "\13\0\1\54\u014f\0\3\7\1\54\65\12\2\0\1\7\1\12\20\7"+
    "\2\0\1\54\4\7\3\0\12\12\2\7\2\0\12\7\21\0\3\7"+
    "\1\0\10\12\2\0\2\12\2\0\26\12\1\0\7\12\1\0\1\12"+
    "\3\0\4\12\2\0\1\7\1\54\7\7\2\0\2\7\2\0\3\7"+
    "\11\0\1\7\4\0\2\12\1\0\3\12\2\7\2\0\12\7\2\12"+
    "\20\0\1\7\2\0\6\12\4\0\2\12\2\0\26\12\1\0\7\12"+
    "\1\0\2\12\1\0\2\12\1\0\2\12\2\0\1\7\1\0\5\7"+
    "\4\0\2\7\2\0\3\7\13\0\4\12\1\0\1\12\7\0\12\7"+
    "\2\7\3\12\14\0\3\7\1\0\7\12\1\54\1\12\1\0\3\12"+
    "\1\0\26\12\1\0\7\12\1\0\2\12\1\0\5\12\2\0\1\7"+
    "\1\12\10\7\1\0\3\7\1\0\3\7\2\0\1\54\17\0\1\12"+
    "\1\54\4\0\12\7\21\0\3\7\1\0\10\12\2\0\2\12\2\0"+
    "\26\12\1\0\7\12\1\0\2\12\1\0\1\54\4\12\2\0\1\7"+
    "\1\12\6\7\3\0\2\7\2\0\3\7\10\0\2\7\4\0\2\12"+
    "\1\0\3\12\4\0\12\7\1\0\1\54\20\0\1\7\1\55\1\0"+
    "\6\12\3\0\3\12\1\0\4\12\3\0\2\12\1\0\1\12\1\0"+
    "\2\12\3\0\2\12\3\0\3\12\3\0\10\12\1\0\3\12\4\0"+
    "\5\7\3\0\3\7\1\0\4\7\11\0\1\7\17\0\11\7\21\0"+
    "\3\7\1\0\10\12\1\0\3\12\1\0\27\12\1\0\12\12\1\0"+
    "\5\12\4\0\7\7\1\0\3\7\1\0\4\7\7\0\2\7\11\0"+
    "\2\12\4\0\12\7\22\0\2\7\1\0\10\12\1\0\3\12\1\0"+
    "\27\12\1\0\12\12\1\0\5\12\3\0\1\54\7\7\1\0\3\7"+
    "\1\0\4\7\7\0\2\7\7\0\1\12\1\0\2\12\4\0\12\7"+
    "\22\0\2\7\1\0\10\12\1\0\3\12\1\0\27\12\1\0\20\12"+
    "\4\0\6\7\2\0\3\7\1\0\4\7\11\0\1\7\10\0\2\12"+
    "\4\0\12\7\25\0\22\54\3\0\30\54\1\0\11\54\1\0\1\54"+
    "\2\0\7\54\72\0\56\12\1\54\1\12\1\7\2\12\7\7\5\0"+
    "\6\12\1\55\10\7\1\0\12\7\47\0\2\12\1\0\1\12\2\0"+
    "\2\12\1\0\1\12\2\0\1\12\6\0\4\12\1\0\7\12\1\0"+
    "\3\12\1\0\1\12\1\0\1\12\2\0\2\12\1\0\2\12\1\54"+
    "\1\12\1\7\2\12\6\7\1\0\2\7\1\12\2\0\5\12\1\0"+
    "\1\55\1\0\6\7\2\0\12\7\2\0\2\54\42\0\1\54\27\0"+
    "\2\7\6\0\12\7\13\0\1\7\1\0\1\7\1\0\1\7\4\0"+
    "\2\7\10\12\1\0\41\12\1\54\6\0\24\7\1\0\2\7\4\55"+
    "\4\0\6\7\1\0\1\7\1\0\25\7\3\0\7\7\1\0\1\7"+
    "\106\0\42\54\1\0\5\54\1\0\2\54\45\0\6\54\112\0\46\12"+
    "\12\0\47\12\2\54\7\0\1\12\1\54\2\12\1\54\3\12\1\54"+
    "\1\12\1\54\2\12\1\54\5\12\51\54\1\12\1\54\1\12\1\54"+
    "\1\12\13\54\1\12\1\54\1\12\1\54\1\12\3\54\2\12\3\54"+
    "\1\12\5\0\3\12\1\54\1\12\1\54\1\12\1\54\1\12\1\54"+
    "\1\12\3\54\2\12\3\54\2\12\1\54\1\12\50\54\1\12\4\54"+
    "\5\0\1\12\2\54\1\12\2\54\2\12\7\54\2\12\1\54\1\12"+
    "\1\54\7\12\50\54\1\12\4\54\1\12\10\54\1\12\6\0\7\54"+
    "\1\0\77\54\1\0\1\54\1\0\4\54\2\0\7\54\1\0\1\54"+
    "\1\0\4\54\2\0\47\54\1\0\1\54\1\0\4\54\2\0\37\54"+
    "\1\0\1\54\1\0\4\54\2\0\7\54\1\0\1\54\1\0\4\54"+
    "\2\0\7\54\1\0\7\54\1\0\27\54\1\0\37\54\1\0\1\54"+
    "\1\0\4\54\2\0\7\54\1\0\47\54\1\0\23\54\105\0\125\54"+
    "\14\0\u026c\54\2\0\10\54\12\0\32\54\5\0\113\54\25\0\15\54"+
    "\1\0\4\54\16\0\22\54\16\0\22\54\16\0\15\54\1\0\3\54"+
    "\17\0\64\54\43\0\1\54\4\0\1\54\103\0\130\54\10\0\51\54"+
    "\127\0\35\54\63\0\36\54\2\0\5\54\u038b\0\154\54\224\0\234\12"+
    "\4\0\132\12\6\0\26\12\2\0\6\12\2\0\46\12\2\0\6\12"+
    "\2\0\10\12\1\0\1\12\1\0\1\12\1\0\1\12\1\0\37\12"+
    "\2\0\65\12\1\0\7\12\1\0\1\12\3\0\3\12\1\0\7\12"+
    "\3\0\4\12\2\0\6\12\4\0\15\12\5\0\3\12\1\0\7\12"+
    "\164\0\1\54\15\0\1\54\120\0\15\7\4\0\1\7\40\0\1\54"+
    "\4\0\1\54\2\0\12\54\1\0\1\54\3\0\5\54\6\0\1\54"+
    "\1\0\1\12\1\0\1\54\1\0\2\12\2\54\1\6\3\54\1\0"+
    "\7\54\3\0\3\54\5\0\5\54\66\0\3\6\u0e82\0\1\55\1\54"+
    "\1\6\31\0\11\6\6\7\1\0\5\55\5\0\2\54\4\0\124\12"+
    "\2\54\2\0\2\7\2\0\2\55\1\54\1\0\132\12\1\0\3\55"+
    "\1\54\5\0\50\12\4\0\136\54\21\0\30\54\70\0\20\54\u0200\0"+
    "\u19b6\54\112\0\u51a6\12\132\0\u048d\54\u0773\0\u2ba4\12\134\0\u0800\0\u1900\0"+
    "\u012e\54\2\0\73\54\225\0\7\54\14\0\5\54\5\0\1\54\1\0"+
    "\12\54\1\0\15\54\1\0\5\54\1\0\1\54\1\0\2\54\1\0"+
    "\2\54\1\0\154\54\41\0\u016b\54\22\0\100\54\2\0\66\54\50\0"+
    "\14\54\164\0\5\54\1\0\207\54\44\0\32\54\6\0\32\54\13\0"+
    "\131\54\3\0\6\54\2\0\6\54\2\0\6\54\2\0\3\54\41\0"+
    "\2\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\105\0\1\1\1\2\1\3\1\1\5\4\1\1\3\5"+
    "\2\4\1\6\1\7\2\10\1\4\1\11\12\4\1\12"+
    "\12\4\1\1\11\4\1\13\1\14\1\15\2\16\1\17"+
    "\1\20\1\16\13\21\1\22\1\23\1\24\1\25\1\22"+
    "\2\4\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\1\2\4\1\36\1\37\5\4\1\40\1\41"+
    "\1\40\1\42\1\40\1\43\2\4\1\44\3\4\1\45"+
    "\4\46\3\47\2\4\1\40\1\4\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\54\1\57\5\0\1\60"+
    "\1\61\1\62\2\0\1\63\1\64\27\0\1\65\11\0"+
    "\1\66\1\67\1\0\12\21\3\0\1\70\10\0\1\71"+
    "\1\72\3\0\1\73\7\0\1\74\1\75\50\0\13\21"+
    "\2\0\1\31\1\76\1\0\1\77\1\100\4\0\1\101"+
    "\1\102\60\0\4\21\1\103\1\21\1\104\1\105\1\21"+
    "\1\106\47\0\1\107\1\0\1\110\1\111\12\0\1\112"+
    "\6\21\3\0\1\113\1\0\1\114\1\115\1\116\2\0"+
    "\1\117\1\120\3\0\1\121\1\0\1\122\1\123\11\0"+
    "\1\124\16\0\1\125\1\126\5\0\6\21\2\0\1\127"+
    "\4\0\1\130\1\131\1\0\1\132\1\133\2\0\1\134"+
    "\11\0\1\135\1\0\1\136\5\0\1\137\1\0\1\140"+
    "\2\0\1\141\1\21\1\142\3\21\1\143\6\0\1\144"+
    "\3\0\1\145\1\146\1\0\1\147\1\0\1\150\3\0"+
    "\1\151\1\152\1\0\1\153\2\0\1\154\5\21\3\0"+
    "\1\155\1\0\1\156\1\157\2\0\1\160\3\0\1\161"+
    "\1\162\1\163\1\164\1\21\1\165\3\21\2\0\1\166"+
    "\1\167\4\0\1\170\4\21\1\0\1\171\3\0\1\172"+
    "\4\21\2\0\1\173\1\0\4\21\3\0\1\174\3\21"+
    "\2\0\1\175\1\21\1\176\1\21\1\177\1\200\3\21"+
    "\1\201\5\21\1\202";

  private static int [] zzUnpackAction() {
    int [] result = new int[674];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\212\0\270\0\346\0\u0114\0\u0142"+
    "\0\u0170\0\u019e\0\u01cc\0\u01fa\0\u0228\0\u0256\0\u0284\0\u02b2"+
    "\0\u02e0\0\u030e\0\u033c\0\u036a\0\u0398\0\u03c6\0\u03f4\0\u0422"+
    "\0\u0450\0\u047e\0\u04ac\0\u04da\0\u0508\0\u0536\0\u0564\0\u0592"+
    "\0\u05c0\0\u05ee\0\u061c\0\u064a\0\u0678\0\u06a6\0\u06d4\0\u0702"+
    "\0\u0730\0\u075e\0\u078c\0\u07ba\0\u07e8\0\u0816\0\u0844\0\u0872"+
    "\0\u08a0\0\u08ce\0\u08fc\0\u092a\0\u0958\0\u0986\0\u09b4\0\u09e2"+
    "\0\u0a10\0\u0a3e\0\u0a6c\0\u0a9a\0\u0ac8\0\u0af6\0\u0b24\0\u0b52"+
    "\0\u0b80\0\u0bae\0\u0bdc\0\u0c0a\0\u0c38\0\u0c66\0\u0c94\0\u0cc2"+
    "\0\u0cf0\0\u0c66\0\u0d1e\0\u0d4c\0\u0d7a\0\u0da8\0\u0dd6\0\u0c66"+
    "\0\u0e04\0\u0e32\0\u0e60\0\u0e8e\0\u0ebc\0\u0c66\0\u0eea\0\u0f18"+
    "\0\u0f46\0\u0c66\0\u0f74\0\u0fa2\0\u0fd0\0\u0ffe\0\u102c\0\u105a"+
    "\0\u1088\0\u10b6\0\u10e4\0\u1112\0\u0c66\0\u1140\0\u116e\0\u119c"+
    "\0\u11ca\0\u11f8\0\u1226\0\u1254\0\u1282\0\u12b0\0\u12de\0\u130c"+
    "\0\u133a\0\u1368\0\u1396\0\u13c4\0\u13f2\0\u1420\0\u144e\0\u147c"+
    "\0\u14aa\0\u0c66\0\u0c66\0\u0c66\0\u14d8\0\u1506\0\u14d8\0\u0c66"+
    "\0\u1534\0\u1562\0\u1590\0\u15be\0\u15ec\0\u161a\0\u1648\0\u1676"+
    "\0\u16a4\0\u16d2\0\u1700\0\u172e\0\u0c66\0\u0c66\0\u0c66\0\u0c66"+
    "\0\u0dd6\0\u175c\0\u178a\0\u0c66\0\u17b8\0\u0c66\0\u17e6\0\u0c66"+
    "\0\u0c66\0\u0c66\0\u1814\0\u1842\0\u1870\0\u189e\0\u0c66\0\u0c66"+
    "\0\u18cc\0\u18fa\0\u1928\0\u1956\0\u1984\0\u0c66\0\u0c66\0\u0dd6"+
    "\0\u0c66\0\u19b2\0\u0c66\0\u19e0\0\u1a0e\0\u0c66\0\u1a3c\0\u1a6a"+
    "\0\u1a98\0\u0c66\0\u0c66\0\u1ac6\0\u1af4\0\u0dd6\0\u0c66\0\u1b22"+
    "\0\u0dd6\0\u1b50\0\u1b7e\0\u1bac\0\u1bda\0\u0dd6\0\u0c66\0\u0dd6"+
    "\0\u1c08\0\u1c36\0\u0c66\0\u0c66\0\u1c64\0\u1c92\0\u1cc0\0\u1cee"+
    "\0\u1d1c\0\u1d4a\0\u1d78\0\u0c66\0\u0c66\0\u0c66\0\u1da6\0\u1dd4"+
    "\0\u0c66\0\u0c66\0\u1e02\0\u1e30\0\u1e5e\0\u1e8c\0\u1eba\0\u1ee8"+
    "\0\u1f16\0\u1f44\0\u1f72\0\u1fa0\0\u1fce\0\u1ffc\0\u202a\0\u2058"+
    "\0\u2086\0\u20b4\0\u20e2\0\u2110\0\u213e\0\u216c\0\u219a\0\u21c8"+
    "\0\u21f6\0\u0c66\0\u2224\0\u2252\0\u2280\0\u22ae\0\u22dc\0\u230a"+
    "\0\u2338\0\u2366\0\u2394\0\u14d8\0\u14d8\0\u23c2\0\u23f0\0\u241e"+
    "\0\u244c\0\u247a\0\u24a8\0\u24d6\0\u2504\0\u2532\0\u2560\0\u258e"+
    "\0\u25bc\0\u25ea\0\u2618\0\u2646\0\u2674\0\u26a2\0\u26d0\0\u26fe"+
    "\0\u272c\0\u275a\0\u2788\0\u27b6\0\u0c66\0\u0c66\0\u27e4\0\u2812"+
    "\0\u2840\0\u0c66\0\u286e\0\u289c\0\u28ca\0\u28f8\0\u2926\0\u2954"+
    "\0\u2982\0\u0c66\0\u29b0\0\u29b0\0\u29de\0\u2a0c\0\u2a3a\0\u2a68"+
    "\0\u2a96\0\u2ac4\0\u2af2\0\u2b20\0\u2b4e\0\u2b7c\0\u2baa\0\u2bd8"+
    "\0\u2c06\0\u2c34\0\u2c62\0\u2c90\0\u2cbe\0\u2cec\0\u2d1a\0\u2d48"+
    "\0\u2d76\0\u2da4\0\u2dd2\0\u2e00\0\u2e2e\0\u2e5c\0\u2e8a\0\u2eb8"+
    "\0\u2ee6\0\u2f14\0\u2f42\0\u2f70\0\u2f9e\0\u2fcc\0\u2ffa\0\u3028"+
    "\0\u3056\0\u3084\0\u30b2\0\u30e0\0\u310e\0\u313c\0\u316a\0\u3198"+
    "\0\u31c6\0\u31f4\0\u3222\0\u3250\0\u327e\0\u32ac\0\u32da\0\u3308"+
    "\0\u3336\0\u3364\0\u3364\0\u0c66\0\u0c66\0\u3392\0\u33c0\0\u33ee"+
    "\0\u341c\0\u0c66\0\u0c66\0\u344a\0\u3478\0\u34a6\0\u34d4\0\u3502"+
    "\0\u3530\0\u355e\0\u358c\0\u35ba\0\u35e8\0\u3616\0\u3644\0\u3672"+
    "\0\u36a0\0\u36ce\0\u36fc\0\u372a\0\u3758\0\u3786\0\u37b4\0\u37e2"+
    "\0\u3810\0\u383e\0\u386c\0\u389a\0\u38c8\0\u38f6\0\u3924\0\u3952"+
    "\0\u3980\0\u39ae\0\u39dc\0\u3a0a\0\u3a38\0\u3a66\0\u3a94\0\u3ac2"+
    "\0\u3af0\0\u3b1e\0\u3b4c\0\u3b7a\0\u3ba8\0\u3bd6\0\u3c04\0\u3c32"+
    "\0\u3c60\0\u3c8e\0\u3cbc\0\u3cea\0\u3d18\0\u3d46\0\u3d74\0\u1562"+
    "\0\u3da2\0\u1562\0\u1562\0\u3dd0\0\u1562\0\u3dfe\0\u3e2c\0\u3e5a"+
    "\0\u3e88\0\u3eb6\0\u3ee4\0\u3f12\0\u3f40\0\u3f6e\0\u3f9c\0\u3fca"+
    "\0\u3ff8\0\u4026\0\u4054\0\u4082\0\u40b0\0\u40de\0\u410c\0\u413a"+
    "\0\u4168\0\u4196\0\u41c4\0\u41f2\0\u4220\0\u424e\0\u427c\0\u42aa"+
    "\0\u42d8\0\u4306\0\u4334\0\u4362\0\u4390\0\u43be\0\u43ec\0\u441a"+
    "\0\u4448\0\u4476\0\u44a4\0\u44d2\0\u0c66\0\u4500\0\u0c66\0\u0c66"+
    "\0\u452e\0\u455c\0\u458a\0\u45b8\0\u45e6\0\u4614\0\u4642\0\u4670"+
    "\0\u469e\0\u46cc\0\u0c66\0\u46fa\0\u4728\0\u4756\0\u4784\0\u47b2"+
    "\0\u47e0\0\u480e\0\u483c\0\u486a\0\u0c66\0\u4898\0\u0c66\0\u0c66"+
    "\0\u0c66\0\u48c6\0\u48f4\0\u0c66\0\u0c66\0\u4922\0\u4950\0\u497e"+
    "\0\u0c66\0\u49ac\0\u0c66\0\u0c66\0\u49da\0\u4a08\0\u4a36\0\u4a64"+
    "\0\u4a92\0\u4ac0\0\u4aee\0\u4b1c\0\u4b4a\0\u0c66\0\u4b78\0\u4ba6"+
    "\0\u4bd4\0\u4c02\0\u4c30\0\u4c5e\0\u4c8c\0\u4cba\0\u4ce8\0\u4d16"+
    "\0\u4d44\0\u4d72\0\u4da0\0\u4dce\0\u0c66\0\u0c66\0\u4dfc\0\u4e2a"+
    "\0\u4e58\0\u4e86\0\u4eb4\0\u4ee2\0\u4f10\0\u4f3e\0\u4f6c\0\u4f9a"+
    "\0\u4fc8\0\u4ff6\0\u5024\0\u0c66\0\u5052\0\u5080\0\u50ae\0\u50dc"+
    "\0\u0c66\0\u0c66\0\u510a\0\u0c66\0\u0c66\0\u5138\0\u5166\0\u0c66"+
    "\0\u5194\0\u51c2\0\u51f0\0\u521e\0\u524c\0\u527a\0\u52a8\0\u52d6"+
    "\0\u5304\0\u0c66\0\u5332\0\u0c66\0\u5360\0\u538e\0\u53bc\0\u53ea"+
    "\0\u5418\0\u0c66\0\u5446\0\u0c66\0\u5474\0\u54a2\0\u1562\0\u54d0"+
    "\0\u1562\0\u54fe\0\u552c\0\u555a\0\u0c66\0\u5588\0\u55b6\0\u55e4"+
    "\0\u5612\0\u5640\0\u566e\0\u0c66\0\u569c\0\u56ca\0\u56f8\0\u0c66"+
    "\0\u0c66\0\u5726\0\u0c66\0\u5754\0\u0c66\0\u5782\0\u57b0\0\u57de"+
    "\0\u0c66\0\u0c66\0\u580c\0\u0c66\0\u583a\0\u5868\0\u0c66\0\u5896"+
    "\0\u58c4\0\u58f2\0\u5920\0\u594e\0\u597c\0\u59aa\0\u59d8\0\u0c66"+
    "\0\u5a06\0\u0c66\0\u0c66\0\u5a34\0\u5a62\0\u0c66\0\u5a90\0\u5abe"+
    "\0\u5aec\0\u0c66\0\u0c66\0\u0c66\0\u0c66\0\u5b1a\0\u1562\0\u5b48"+
    "\0\u5b76\0\u5ba4\0\u5bd2\0\u5c00\0\u0c66\0\u0c66\0\u5c2e\0\u5c5c"+
    "\0\u5c8a\0\u5cb8\0\u0c66\0\u5ce6\0\u5d14\0\u5d42\0\u5d70\0\u5d9e"+
    "\0\u0c66\0\u5dcc\0\u5dfa\0\u5e28\0\u0c66\0\u5e56\0\u5e84\0\u5eb2"+
    "\0\u5ee0\0\u5f0e\0\u5f3c\0\u0c66\0\u5f6a\0\u5f98\0\u5fc6\0\u5ff4"+
    "\0\u6022\0\u6050\0\u607e\0\u60ac\0\u1562\0\u60da\0\u6108\0\u6136"+
    "\0\u6164\0\u6192\0\u0c66\0\u61c0\0\u1562\0\u61ee\0\u0c66\0\u0c66"+
    "\0\u621c\0\u624a\0\u6278\0\u1562\0\u62a6\0\u62d4\0\u6302\0\u6330"+
    "\0\u635e\0\u1562";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[674];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\106\1\107\1\110\1\111\1\112\4\106\1\113\1\112"+
    "\2\106\5\112\1\114\3\112\1\115\1\112\1\116\10\112"+
    "\2\106\1\112\6\106\1\112\1\117\2\112\14\120\1\121"+
    "\36\120\1\122\2\120\1\106\1\107\2\106\1\112\4\106"+
    "\2\112\2\106\1\112\1\123\10\112\1\124\11\112\2\106"+
    "\1\112\6\106\1\112\1\117\2\112\1\106\1\107\2\106"+
    "\1\125\1\106\1\125\2\106\2\125\2\106\24\125\2\106"+
    "\1\125\6\106\1\125\1\117\2\112\47\126\1\127\56\126"+
    "\1\130\5\126\1\106\1\107\2\106\1\112\4\106\2\112"+
    "\2\106\16\112\1\131\5\112\2\106\1\112\6\106\1\112"+
    "\1\117\2\112\1\106\1\107\2\106\1\112\3\106\1\132"+
    "\2\112\2\106\2\112\1\133\21\112\2\106\1\112\6\106"+
    "\1\112\1\117\2\112\1\106\1\107\2\106\1\112\4\106"+
    "\2\112\2\106\20\112\1\134\3\112\2\106\1\112\6\106"+
    "\1\112\1\117\2\112\1\106\1\107\2\106\1\112\4\106"+
    "\2\112\2\106\5\112\1\135\1\136\3\112\1\137\3\112"+
    "\1\140\1\112\1\141\1\112\1\142\1\112\2\106\1\112"+
    "\6\106\1\112\1\117\2\112\1\106\1\107\2\106\1\112"+
    "\4\106\2\112\2\106\14\112\1\143\3\112\1\144\3\112"+
    "\2\106\1\112\6\106\1\112\1\117\2\112\1\106\1\107"+
    "\2\106\1\112\4\106\2\112\2\106\24\112\1\106\1\145"+
    "\1\112\6\106\1\112\1\117\2\112\1\106\1\107\2\106"+
    "\1\112\4\106\2\112\2\106\13\112\1\146\4\112\1\147"+
    "\3\112\2\106\1\112\6\106\1\112\1\117\2\112\1\106"+
    "\1\107\2\106\1\112\4\106\2\112\2\106\2\112\1\150"+
    "\3\112\1\151\3\112\1\152\10\112\1\153\2\106\1\112"+
    "\6\106\1\112\1\117\2\112\1\106\1\107\2\106\1\112"+
    "\4\106\2\112\2\106\2\112\1\154\21\112\2\106\1\112"+
    "\6\106\1\112\1\117\2\112\1\106\1\107\2\106\1\112"+
    "\4\106\2\112\2\106\7\112\1\155\11\112\1\156\2\112"+
    "\2\106\1\112\6\106\1\112\1\117\2\112\1\106\1\107"+
    "\2\106\1\112\4\106\2\112\2\106\20\112\1\157\3\112"+
    "\2\106\1\112\6\106\1\112\1\117\2\112\1\106\1\107"+
    "\2\106\1\112\4\106\2\112\1\106\1\160\2\112\1\161"+
    "\21\112\2\106\1\112\6\106\1\112\1\117\2\112\1\106"+
    "\1\107\2\106\1\112\4\106\2\112\2\106\11\112\1\162"+
    "\5\112\1\163\4\112\2\106\1\112\6\106\1\112\1\117"+
    "\2\112\1\106\1\107\2\106\1\112\4\106\2\112\2\106"+
    "\5\112\1\164\12\112\1\165\3\112\2\106\1\112\6\106"+
    "\1\112\1\117\2\112\1\106\1\107\2\106\1\112\4\106"+
    "\2\112\2\106\2\112\1\166\21\112\2\106\1\112\6\106"+
    "\1\112\1\117\2\112\1\106\1\107\2\106\1\112\4\106"+
    "\2\112\2\106\20\112\1\167\3\112\2\106\1\112\6\106"+
    "\1\112\1\117\2\112\1\106\1\107\2\106\1\112\4\106"+
    "\2\112\2\106\20\112\1\165\3\112\2\106\1\112\6\106"+
    "\1\112\1\117\2\112\1\106\1\107\2\106\1\112\4\106"+
    "\2\112\2\106\14\112\1\170\2\112\1\171\4\112\2\106"+
    "\1\112\6\106\1\112\1\117\2\112\1\106\1\107\2\106"+
    "\1\112\4\106\2\112\2\106\24\112\2\106\1\112\3\106"+
    "\1\172\1\173\1\106\1\112\1\117\2\112\1\106\1\107"+
    "\2\106\1\112\4\106\2\112\2\106\24\112\1\174\1\106"+
    "\1\112\6\106\1\112\1\117\2\112\1\175\1\107\23\175"+
    "\1\176\31\175\1\107\40\175\1\177\13\175\1\106\1\107"+
    "\2\106\1\112\4\106\2\112\2\106\24\112\2\106\1\112"+
    "\1\200\5\106\1\112\1\117\2\112\1\175\1\107\23\175"+
    "\1\201\30\175\1\106\1\107\2\106\1\202\1\106\1\202"+
    "\2\106\2\202\2\106\2\202\1\203\2\202\1\204\1\205"+
    "\1\202\1\206\2\202\1\207\1\210\1\211\1\212\1\213"+
    "\1\214\3\202\2\106\1\202\6\106\1\202\1\117\2\112"+
    "\1\215\1\107\3\215\1\216\37\215\1\217\1\220\4\215"+
    "\1\221\2\215\1\106\1\107\2\106\1\112\4\106\2\112"+
    "\2\106\2\112\1\222\14\112\1\223\4\112\2\106\1\112"+
    "\5\106\1\224\1\112\1\117\2\112\1\106\1\107\2\106"+
    "\1\225\1\106\1\225\2\106\2\225\2\106\24\225\2\106"+
    "\1\225\3\106\2\226\1\224\1\225\1\117\2\112\1\106"+
    "\1\107\2\106\1\112\4\106\2\112\2\106\24\112\2\106"+
    "\1\112\6\106\1\112\1\117\2\112\1\106\1\107\2\106"+
    "\1\227\1\106\1\227\2\106\2\227\2\106\24\227\2\106"+
    "\1\227\2\106\1\230\2\106\1\224\1\227\1\117\2\112"+
    "\1\106\1\107\2\106\1\112\4\106\2\112\2\106\24\112"+
    "\1\106\1\231\1\112\5\106\1\224\1\112\1\117\2\112"+
    "\1\106\1\107\2\106\1\112\4\106\2\112\2\106\24\112"+
    "\2\106\1\112\1\106\1\232\3\106\1\224\1\112\1\117"+
    "\2\112\1\106\1\107\1\233\1\234\1\112\4\106\2\112"+
    "\2\106\7\112\1\235\13\112\1\236\2\106\1\112\1\237"+
    "\2\106\2\240\1\106\1\112\1\117\2\112\1\106\1\107"+
    "\2\106\1\112\4\106\2\112\2\106\3\112\1\241\3\112"+
    "\1\235\2\112\1\242\4\112\1\243\3\112\1\236\2\106"+
    "\1\112\6\106\1\244\1\117\2\112\1\106\1\107\2\106"+
    "\1\112\4\106\2\112\2\106\24\112\2\106\1\112\6\106"+
    "\1\244\1\117\2\112\1\106\1\107\2\106\1\112\4\106"+
    "\2\112\2\106\12\112\1\242\4\112\1\243\4\112\2\106"+
    "\1\112\6\106\1\244\1\117\2\112\1\106\1\107\2\106"+
    "\1\112\4\106\2\112\2\106\3\112\1\241\6\112\1\242"+
    "\4\112\1\243\4\112\2\106\1\112\6\106\1\244\1\117"+
    "\2\112\1\106\1\107\2\106\1\112\4\106\2\112\2\106"+
    "\23\112\1\245\2\106\1\112\6\106\1\112\1\117\2\112"+
    "\1\246\1\107\40\246\1\247\10\246\1\250\2\246\1\106"+
    "\1\107\2\106\1\112\4\106\2\112\2\106\24\112\2\106"+
    "\1\112\1\251\5\106\1\112\1\117\2\112\1\246\1\107"+
    "\23\246\1\252\25\246\1\250\2\246\1\106\1\107\2\106"+
    "\1\112\4\106\2\112\2\106\24\112\2\106\1\112\1\253"+
    "\5\106\1\112\1\117\2\112\1\106\1\107\2\106\1\112"+
    "\4\106\2\112\2\106\13\112\1\254\10\112\2\106\1\112"+
    "\6\106\1\112\1\117\2\112\1\106\1\107\2\106\1\112"+
    "\4\106\2\112\2\106\7\112\1\255\14\112\2\106\1\112"+
    "\6\106\1\112\1\117\2\112\1\246\1\107\40\246\1\256"+
    "\10\246\1\250\2\246\1\106\1\107\2\106\1\112\4\106"+
    "\2\112\1\106\1\160\24\112\2\106\1\112\6\106\1\112"+
    "\1\117\2\112\1\106\1\107\2\106\1\112\4\106\2\112"+
    "\2\106\24\112\2\106\1\112\6\106\1\257\1\117\2\112"+
    "\1\106\1\107\2\106\1\112\4\106\2\112\2\106\12\112"+
    "\1\260\11\112\2\106\1\112\6\106\1\112\1\117\2\112"+
    "\1\106\1\107\2\106\1\112\4\106\2\112\2\106\22\112"+
    "\1\261\1\112\2\106\1\112\6\106\1\112\1\117\2\112"+
    "\1\246\1\107\40\246\1\262\10\246\1\250\2\246\1\263"+
    "\1\107\20\263\1\264\2\263\1\265\25\263\1\266\2\263"+
    "\1\267\1\107\15\267\1\270\33\267\1\271\2\267\1\106"+
    "\1\107\2\106\1\112\4\106\2\112\2\106\7\112\1\272"+
    "\11\112\1\273\2\112\2\106\1\112\6\106\1\112\1\117"+
    "\2\112\1\246\1\107\21\246\1\274\27\246\1\250\2\246"+
    "\1\106\1\107\2\106\1\112\4\106\2\112\2\106\17\112"+
    "\1\275\4\112\2\106\1\112\6\106\1\112\1\117\2\112"+
    "\1\106\1\107\2\106\1\112\4\106\2\112\2\106\24\112"+
    "\2\106\1\112\6\106\1\112\1\276\2\112\1\106\1\107"+
    "\2\106\1\112\4\106\2\112\2\106\24\112\2\106\1\112"+
    "\5\106\1\277\1\112\1\117\2\112\1\106\1\107\2\106"+
    "\1\112\4\106\2\112\2\106\24\112\2\106\1\112\6\106"+
    "\1\112\1\300\2\112\1\106\1\107\2\106\1\112\3\106"+
    "\1\132\2\112\2\106\24\112\2\106\1\112\6\106\1\112"+
    "\1\117\2\112\1\106\1\107\2\106\1\301\1\106\1\301"+
    "\2\106\2\301\2\106\24\301\2\106\1\301\6\106\1\301"+
    "\1\117\2\112\1\106\1\107\2\106\1\302\1\106\1\302"+
    "\2\106\2\302\2\106\24\302\2\106\1\302\6\106\1\302"+
    "\1\117\2\112\14\303\1\304\45\303\1\305\1\303\1\305"+
    "\2\303\2\305\2\303\24\305\2\303\1\305\6\303\1\305"+
    "\3\303\57\0\1\107\56\0\1\110\1\306\1\307\12\0"+
    "\1\307\40\0\1\306\70\0\1\310\57\0\1\311\65\0"+
    "\1\312\54\0\1\313\43\0\1\314\112\0\1\315\20\0"+
    "\1\316\76\0\1\317\40\0\1\320\37\0\3\125\1\0"+
    "\2\125\1\0\3\125\1\0\24\125\2\0\1\125\6\0"+
    "\1\125\2\0\1\125\47\0\1\321\56\0\1\322\24\0"+
    "\1\323\73\0\1\324\45\0\1\325\47\0\1\326\65\0"+
    "\1\327\46\0\1\330\10\0\1\331\51\0\1\332\55\0"+
    "\1\333\55\0\1\334\1\0\1\335\46\0\1\336\64\0"+
    "\1\337\63\0\1\340\47\0\1\341\52\0\1\342\60\0"+
    "\1\343\46\0\1\344\53\0\1\345\65\0\1\346\46\0"+
    "\1\347\56\0\1\350\62\0\1\351\71\0\1\352\25\0"+
    "\1\353\73\0\1\354\51\0\1\355\51\0\1\356\63\0"+
    "\1\357\54\0\1\360\56\0\1\361\50\0\1\362\67\0"+
    "\1\363\23\0\1\175\1\0\55\175\1\0\30\175\1\364"+
    "\24\175\1\0\32\175\1\365\21\175\2\0\3\202\1\0"+
    "\2\202\1\0\3\202\1\366\24\202\2\0\1\202\6\0"+
    "\1\202\2\0\1\202\2\0\3\202\1\0\2\202\1\0"+
    "\3\202\1\366\7\202\1\367\14\202\2\0\1\202\6\0"+
    "\1\202\2\0\1\202\2\0\3\202\1\0\2\202\1\0"+
    "\3\202\1\366\12\202\1\370\11\202\2\0\1\202\6\0"+
    "\1\202\2\0\1\202\2\0\3\202\1\0\2\202\1\0"+
    "\3\202\1\366\12\202\1\371\11\202\2\0\1\202\6\0"+
    "\1\202\2\0\1\202\2\0\3\202\1\0\2\202\1\0"+
    "\3\202\1\366\15\202\1\372\6\202\2\0\1\202\6\0"+
    "\1\202\2\0\1\202\2\0\3\202\1\0\2\202\1\0"+
    "\3\202\1\366\15\202\1\373\6\202\2\0\1\202\6\0"+
    "\1\202\2\0\1\202\2\0\3\202\1\0\2\202\1\0"+
    "\3\202\1\366\3\202\1\374\20\202\2\0\1\202\6\0"+
    "\1\202\2\0\1\202\2\0\3\202\1\0\2\202\1\0"+
    "\3\202\1\366\2\202\1\375\21\202\2\0\1\202\6\0"+
    "\1\202\2\0\1\202\2\0\3\202\1\0\2\202\1\0"+
    "\3\202\1\366\12\202\1\376\11\202\2\0\1\202\6\0"+
    "\1\202\2\0\1\202\2\0\3\202\1\0\2\202\1\0"+
    "\3\202\1\366\6\202\1\377\15\202\2\0\1\202\6\0"+
    "\1\202\2\0\1\202\2\0\3\202\1\0\2\202\1\0"+
    "\3\202\1\366\12\202\1\u0100\11\202\2\0\1\202\6\0"+
    "\1\202\2\0\1\202\24\0\1\u0101\54\0\1\u0102\34\0"+
    "\3\225\1\0\2\225\1\0\3\225\1\0\24\225\2\0"+
    "\1\225\6\0\1\225\2\0\1\225\2\0\3\227\1\0"+
    "\2\227\1\0\3\227\1\u0103\24\227\2\0\1\227\6\0"+
    "\1\227\2\0\1\227\2\0\1\233\1\u0104\1\u0105\12\0"+
    "\1\u0105\40\0\1\u0104\72\0\1\u0106\65\0\1\u0107\45\0"+
    "\1\u0108\56\0\1\u0109\67\0\1\u010a\66\0\1\u010b\41\0"+
    "\1\u010c\60\0\1\u010d\60\0\1\u010e\37\0\1\u010f\101\0"+
    "\1\u0110\32\0\1\u0111\56\0\1\u0112\53\0\1\u0113\72\0"+
    "\1\u0114\47\0\1\u0115\46\0\1\u0116\56\0\1\u0117\64\0"+
    "\1\u0118\60\0\1\u0119\25\0\3\301\1\0\2\301\1\0"+
    "\3\301\1\0\24\301\2\0\1\301\6\0\1\301\2\0"+
    "\1\301\2\0\3\302\1\0\2\302\1\0\3\302\1\u011a"+
    "\24\302\2\0\1\302\6\0\1\302\2\0\1\302\2\0"+
    "\3\305\1\0\2\305\1\0\3\305\1\0\24\305\2\0"+
    "\1\305\6\0\1\305\2\0\1\305\2\0\1\306\1\0"+
    "\1\307\12\0\1\307\40\0\1\u011b\2\0\1\u011c\5\0"+
    "\1\u011c\60\0\1\u011d\62\0\1\u011e\54\0\1\u011f\64\0"+
    "\1\u0120\53\0\1\u0121\50\0\1\u0122\53\0\1\u0123\60\0"+
    "\1\u0124\60\0\1\u0125\67\0\1\u0126\46\0\1\u0127\3\0"+
    "\1\u0128\42\0\1\u0129\65\0\1\u012a\43\0\1\u012b\63\0"+
    "\1\u012c\63\0\1\u012d\37\0\1\u012e\56\0\1\u012f\51\0"+
    "\1\u0130\105\0\1\u0131\25\0\1\u0132\61\0\1\u0133\62\0"+
    "\1\u0134\53\0\1\u0135\70\0\1\u0136\51\0\1\u0137\51\0"+
    "\1\u0138\47\0\1\u0139\64\0\1\u013a\61\0\1\u013b\45\0"+
    "\1\u013c\76\0\1\u013d\52\0\1\u013e\43\0\1\u013f\46\0"+
    "\1\u0140\64\0\1\u0141\46\0\1\u0142\56\0\1\u0143\41\0"+
    "\1\u0144\1\0\1\u0144\2\0\2\u0144\2\0\24\u0144\2\0"+
    "\1\u0144\6\0\1\u0144\5\0\3\202\1\0\2\202\1\0"+
    "\3\202\1\366\2\202\1\u0145\21\202\2\0\1\202\6\0"+
    "\1\202\2\0\1\202\2\0\3\202\1\0\2\202\1\0"+
    "\3\202\1\366\6\202\1\u0146\15\202\2\0\1\202\6\0"+
    "\1\202\2\0\1\202\2\0\3\202\1\0\2\202\1\0"+
    "\3\202\1\366\11\202\1\u0147\12\202\2\0\1\202\6\0"+
    "\1\202\2\0\1\202\2\0\3\202\1\0\2\202\1\0"+
    "\3\202\1\366\15\202\1\u0148\6\202\2\0\1\202\6\0"+
    "\1\202\2\0\1\202\2\0\3\202\1\0\2\202\1\0"+
    "\3\202\1\366\2\202\1\u0149\21\202\2\0\1\202\6\0"+
    "\1\202\2\0\1\202\2\0\3\202\1\0\2\202\1\0"+
    "\3\202\1\366\12\202\1\u014a\11\202\2\0\1\202\6\0"+
    "\1\202\2\0\1\202\2\0\3\202\1\0\2\202\1\0"+
    "\1\u014b\2\202\1\366\24\202\2\0\1\202\6\0\1\202"+
    "\2\0\1\202\2\0\3\202\1\0\2\202\1\0\3\202"+
    "\1\366\13\202\1\u014c\10\202\2\0\1\202\6\0\1\202"+
    "\2\0\1\202\2\0\3\202\1\0\2\202\1\0\3\202"+
    "\1\366\24\202\2\0\1\u014d\6\0\1\202\2\0\1\202"+
    "\2\0\3\202\1\0\2\202\1\0\3\202\1\366\5\202"+
    "\1\u014e\16\202\2\0\1\202\6\0\1\202\2\0\1\202"+
    "\17\0\1\u014f\101\0\1\u0150\16\0\1\u0151\1\0\1\u0151"+
    "\2\0\2\u0151\2\0\24\u0151\2\0\1\u0151\6\0\1\u0151"+
    "\5\0\1\u0104\1\0\1\u0105\12\0\1\u0105\40\0\1\u0152"+
    "\2\0\1\u0153\5\0\1\u0153\74\0\1\u0154\43\0\1\u0155"+
    "\67\0\1\u0156\45\0\1\u0157\60\0\1\u0158\47\0\1\u0159"+
    "\56\0\1\u015a\67\0\1\u015b\42\0\1\u015c\60\0\1\u015d"+
    "\67\0\1\u015e\44\0\1\u015f\63\0\1\u0160\51\0\1\u0161"+
    "\47\0\1\u0162\62\0\1\u0163\56\0\1\u0164\32\0\1\u011b"+
    "\72\0\1\u0165\62\0\1\u0166\47\0\1\u0167\66\0\1\u0168"+
    "\46\0\1\u0169\54\0\1\u016a\72\0\1\u016b\50\0\1\u016c"+
    "\45\0\1\u016d\63\0\1\u016e\51\0\1\u016f\70\0\1\u0170"+
    "\40\0\1\u0171\66\0\1\u0172\55\0\1\u0173\44\0\1\u0174"+
    "\55\0\1\u0175\73\0\1\u0176\54\0\1\u0177\52\0\1\u0178"+
    "\43\0\1\u0179\66\0\1\u017a\53\0\1\u017b\53\0\1\u017c"+
    "\50\0\1\u017d\61\0\1\u017e\64\0\1\u017f\57\0\1\u0180"+
    "\46\0\1\u0181\47\0\1\u0182\55\0\1\u0183\54\0\1\u0184"+
    "\56\0\1\u0185\63\0\1\u0186\47\0\1\u0187\64\0\1\u0188"+
    "\46\0\1\u0189\72\0\1\u018a\51\0\1\u018b\27\0\3\u0144"+
    "\1\0\2\u0144\1\0\3\u0144\1\0\24\u0144\2\0\1\u0144"+
    "\6\0\1\u0144\2\0\1\u0144\2\0\3\202\1\0\2\202"+
    "\1\0\3\202\1\366\11\202\1\u018c\12\202\2\0\1\202"+
    "\6\0\1\202\2\0\1\202\2\0\3\202\1\0\2\202"+
    "\1\0\3\202\1\366\1\202\1\u018d\22\202\2\0\1\202"+
    "\6\0\1\202\2\0\1\202\2\0\3\202\1\0\2\202"+
    "\1\0\3\202\1\366\11\202\1\u018e\12\202\2\0\1\202"+
    "\6\0\1\202\2\0\1\202\2\0\3\202\1\0\2\202"+
    "\1\0\3\202\1\366\3\202\1\u018f\20\202\2\0\1\202"+
    "\6\0\1\202\2\0\1\202\2\0\3\202\1\0\2\202"+
    "\1\0\3\202\1\366\11\202\1\u0190\12\202\2\0\1\202"+
    "\6\0\1\202\2\0\1\202\2\0\3\202\1\0\2\202"+
    "\1\0\3\202\1\366\6\202\1\u0191\15\202\2\0\1\202"+
    "\6\0\1\202\2\0\1\202\2\0\3\202\1\0\2\202"+
    "\1\0\3\202\1\366\15\202\1\u0192\6\202\2\0\1\202"+
    "\6\0\1\202\2\0\1\202\2\0\3\202\1\0\2\202"+
    "\1\0\3\202\1\366\5\202\1\u0193\16\202\2\0\1\202"+
    "\6\0\1\202\2\0\1\202\2\0\3\202\1\0\2\202"+
    "\1\0\3\202\1\366\2\202\1\u0194\21\202\2\0\1\202"+
    "\6\0\1\202\2\0\1\202\2\0\3\202\1\0\2\202"+
    "\1\0\3\202\1\366\2\202\1\u0195\21\202\2\0\1\202"+
    "\6\0\1\202\2\0\1\202\26\0\1\u0196\46\0\1\u0197"+
    "\40\0\3\u0151\1\0\2\u0151\1\0\3\u0151\1\0\24\u0151"+
    "\2\0\1\u0151\6\0\1\u0151\2\0\1\u0151\2\0\1\u0152"+
    "\71\0\1\u0198\56\0\1\u0199\75\0\1\u019a\36\0\1\u019b"+
    "\55\0\1\u019c\54\0\1\u019d\61\0\1\u019e\51\0\1\u019f"+
    "\70\0\1\u01a0\57\0\1\u01a1\46\0\1\u01a2\54\0\1\u01a3"+
    "\70\0\1\u01a4\36\0\1\u01a5\62\0\1\u01a6\54\0\1\u01a7"+
    "\51\0\1\u01a8\57\0\1\u01a9\53\0\1\u01aa\65\0\1\u01ab"+
    "\47\0\1\u01ac\67\0\1\u01ad\37\0\1\u01ae\52\0\1\u01af"+
    "\74\0\1\u01b0\43\0\1\u01b1\64\0\1\u01b2\53\0\1\u01b3"+
    "\64\0\1\u01b4\34\0\1\u01b5\64\0\1\u01b6\52\0\1\u01b7"+
    "\56\0\1\u01b8\55\0\1\u01b9\72\0\1\u01ba\37\0\1\u01bb"+
    "\63\0\1\u01bc\50\0\1\u01bd\67\0\1\u01be\44\0\1\u01bf"+
    "\66\0\1\u01c0\55\0\1\u01c1\57\0\1\u01c2\41\0\1\u01c3"+
    "\61\0\1\u01c4\57\0\1\u01c5\45\0\1\u01c6\73\0\1\u01c7"+
    "\40\0\1\u01c8\72\0\1\u01c9\40\0\1\u01ca\67\0\1\u01cb"+
    "\26\0\3\202\1\0\2\202\1\0\3\202\1\366\2\202"+
    "\1\u01cc\21\202\2\0\1\202\6\0\1\202\2\0\1\202"+
    "\2\0\3\202\1\0\2\202\1\0\3\202\1\366\11\202"+
    "\1\u01cd\12\202\2\0\1\202\6\0\1\202\2\0\1\202"+
    "\2\0\3\202\1\0\2\202\1\0\3\202\1\366\2\202"+
    "\1\u01ce\21\202\2\0\1\202\6\0\1\202\2\0\1\202"+
    "\2\0\3\202\1\0\2\202\1\0\3\202\1\366\13\202"+
    "\1\u01cf\10\202\2\0\1\202\6\0\1\202\2\0\1\202"+
    "\2\0\3\202\1\0\2\202\1\0\3\202\1\366\2\202"+
    "\1\u01d0\21\202\2\0\1\202\6\0\1\202\2\0\1\202"+
    "\2\0\3\202\1\0\2\202\1\0\3\202\1\366\11\202"+
    "\1\u01d1\12\202\2\0\1\202\6\0\1\202\2\0\1\202"+
    "\17\0\1\u01d2\64\0\1\u01d3\47\0\1\u01d4\55\0\1\u01d5"+
    "\61\0\1\u01d6\50\0\1\u01d7\55\0\1\u01d8\56\0\1\u01d9"+
    "\54\0\1\u01da\73\0\1\u01db\41\0\1\u01dc\66\0\1\u01dd"+
    "\55\0\1\u01de\50\0\1\u01df\54\0\1\u01e0\52\0\1\u01e1"+
    "\54\0\1\u01e2\54\0\1\u01e3\70\0\1\u01e4\42\0\1\u01e5"+
    "\55\0\1\u01e6\65\0\1\u01e7\56\0\1\u01e8\56\0\1\u01e9"+
    "\50\0\1\u01ea\66\0\1\u01eb\40\0\1\u01ec\65\0\1\u01ed"+
    "\62\0\1\u01ee\57\0\1\u01ef\47\0\1\u01f0\42\0\1\u01f1"+
    "\64\0\1\u01f2\50\0\1\u01f3\54\0\1\u01f4\66\0\1\u01f5"+
    "\70\0\1\u01f6\47\0\1\u01f7\52\0\1\u01f8\53\0\1\u01f9"+
    "\44\0\1\u01fa\67\0\1\u01fb\61\0\1\u01fc\37\0\1\u01fd"+
    "\63\0\1\u01fe\54\0\1\u01ff\62\0\1\u0200\61\0\1\u0201"+
    "\51\0\1\u0202\44\0\1\u0203\37\0\3\202\1\0\2\202"+
    "\1\0\3\202\1\366\20\202\1\u0204\3\202\2\0\1\202"+
    "\6\0\1\202\2\0\1\202\2\0\3\202\1\0\2\202"+
    "\1\0\3\202\1\366\2\202\1\u0205\21\202\2\0\1\202"+
    "\6\0\1\202\2\0\1\202\2\0\3\202\1\0\2\202"+
    "\1\0\3\202\1\366\20\202\1\u0206\3\202\2\0\1\202"+
    "\6\0\1\202\2\0\1\202\2\0\3\202\1\0\2\202"+
    "\1\0\3\202\1\366\22\202\1\u0207\1\202\2\0\1\202"+
    "\6\0\1\202\2\0\1\202\2\0\3\202\1\0\2\202"+
    "\1\0\3\202\1\366\17\202\1\u0208\4\202\2\0\1\202"+
    "\6\0\1\202\2\0\1\202\2\0\3\202\1\0\2\202"+
    "\1\0\3\202\1\366\10\202\1\u0209\13\202\2\0\1\202"+
    "\6\0\1\202\2\0\1\202\35\0\1\u020a\45\0\1\u020b"+
    "\65\0\1\u020c\37\0\1\u01d5\73\0\1\u020d\42\0\1\u020e"+
    "\52\0\1\u020f\70\0\1\u0210\42\0\1\u0211\55\0\1\u0212"+
    "\56\0\1\u0213\57\0\1\u0214\70\0\1\u0215\55\0\1\u0216"+
    "\45\0\1\u0217\62\0\1\u0218\50\0\1\u0219\46\0\1\u021a"+
    "\74\0\1\u021b\44\0\1\u021c\56\0\1\u021d\50\0\1\u021e"+
    "\55\0\1\u021f\70\0\1\u0220\56\0\1\u0221\53\0\1\u0222"+
    "\42\0\1\u0223\70\0\1\u0224\53\0\1\u0225\54\0\1\u0226"+
    "\62\0\1\u0227\46\0\1\u0228\55\0\1\u0229\62\0\1\u022a"+
    "\50\0\1\u022b\62\0\1\u022c\50\0\1\u022d\63\0\1\u022e"+
    "\24\0\3\202\1\0\2\202\1\0\3\202\1\366\15\202"+
    "\1\u022f\6\202\2\0\1\202\6\0\1\202\2\0\1\202"+
    "\2\0\3\202\1\0\2\202\1\0\3\202\1\366\20\202"+
    "\1\u0230\3\202\2\0\1\202\6\0\1\202\2\0\1\202"+
    "\2\0\3\202\1\0\2\202\1\0\3\202\1\366\15\202"+
    "\1\u0231\6\202\2\0\1\202\6\0\1\202\2\0\1\202"+
    "\2\0\3\202\1\0\2\202\1\0\3\202\1\366\1\202"+
    "\1\u0232\22\202\2\0\1\202\6\0\1\202\2\0\1\202"+
    "\2\0\3\202\1\0\2\202\1\0\3\202\1\366\17\202"+
    "\1\u0233\4\202\2\0\1\202\6\0\1\202\2\0\1\202"+
    "\2\0\3\202\1\0\2\202\1\0\2\202\1\u0234\1\366"+
    "\24\202\2\0\1\202\6\0\1\202\2\0\1\202\32\0"+
    "\1\u0235\36\0\1\u0236\64\0\1\u0237\63\0\1\u0238\61\0"+
    "\1\u0239\51\0\1\u023a\44\0\1\u023b\74\0\1\u023c\42\0"+
    "\1\u023d\60\0\1\u023e\52\0\1\u023f\70\0\1\u0240\36\0"+
    "\1\u0241\61\0\1\u0242\62\0\1\u0243\46\0\1\u0244\53\0"+
    "\1\u0245\55\0\1\u0246\56\0\1\u0247\64\0\1\u0248\63\0"+
    "\1\u0249\52\0\1\u024a\46\0\1\u024b\56\0\1\u024c\54\0"+
    "\1\u024d\55\0\1\u024e\51\0\1\u024f\40\0\3\202\1\0"+
    "\2\202\1\0\3\202\1\366\15\202\1\u0250\6\202\2\0"+
    "\1\202\6\0\1\202\2\0\1\202\2\0\3\202\1\0"+
    "\2\202\1\0\3\202\1\366\15\202\1\u0251\6\202\2\0"+
    "\1\202\6\0\1\202\2\0\1\202\2\0\3\202\1\0"+
    "\2\202\1\0\3\202\1\366\13\202\1\u0252\10\202\2\0"+
    "\1\202\6\0\1\202\2\0\1\202\2\0\3\202\1\0"+
    "\2\202\1\0\3\202\1\366\2\202\1\u0253\5\202\1\u0254"+
    "\13\202\2\0\1\202\6\0\1\202\2\0\1\202\17\0"+
    "\1\u0255\66\0\1\u0256\62\0\1\u0257\52\0\1\u0258\52\0"+
    "\1\u0259\50\0\1\u025a\52\0\1\u025b\55\0\1\u025c\70\0"+
    "\1\u025d\42\0\1\u025e\51\0\1\u025f\62\0\1\u0260\65\0"+
    "\1\u0261\62\0\1\u0262\37\0\1\u0263\55\0\1\u0264\55\0"+
    "\1\u0265\40\0\3\202\1\0\2\202\1\0\2\202\1\u0266"+
    "\1\366\24\202\2\0\1\202\6\0\1\202\2\0\1\202"+
    "\2\0\3\202\1\0\2\202\1\0\3\202\1\366\2\202"+
    "\1\u0267\21\202\2\0\1\202\6\0\1\202\2\0\1\202"+
    "\2\0\3\202\1\0\2\202\1\0\3\202\1\366\20\202"+
    "\1\u0268\3\202\2\0\1\202\6\0\1\202\2\0\1\202"+
    "\2\0\3\202\1\0\2\202\1\0\3\202\1\366\7\202"+
    "\1\u0269\14\202\2\0\1\202\6\0\1\202\2\0\1\202"+
    "\2\0\3\202\1\0\2\202\1\0\3\202\1\366\15\202"+
    "\1\u026a\6\202\2\0\1\202\6\0\1\202\2\0\1\202"+
    "\24\0\1\u026b\66\0\1\u026c\56\0\1\u026d\54\0\1\u026e"+
    "\54\0\1\u026f\51\0\1\u0270\61\0\1\u0271\54\0\1\u0272"+
    "\54\0\1\u0273\25\0\3\202\1\0\2\202\1\0\3\202"+
    "\1\366\20\202\1\u0274\3\202\2\0\1\202\6\0\1\202"+
    "\2\0\1\202\2\0\3\202\1\0\2\202\1\0\3\202"+
    "\1\366\21\202\1\u0275\2\202\2\0\1\202\6\0\1\202"+
    "\2\0\1\202\2\0\3\202\1\0\2\202\1\0\3\202"+
    "\1\366\2\202\1\u0276\21\202\2\0\1\202\6\0\1\202"+
    "\2\0\1\202\2\0\3\202\1\0\2\202\1\0\3\202"+
    "\1\366\15\202\1\u0277\6\202\2\0\1\202\6\0\1\202"+
    "\2\0\1\202\17\0\1\u0278\74\0\1\u0279\50\0\1\u027a"+
    "\53\0\1\u027b\57\0\1\u027c\43\0\1\u027d\40\0\3\202"+
    "\1\0\2\202\1\0\3\202\1\366\12\202\1\u027e\11\202"+
    "\2\0\1\202\6\0\1\202\2\0\1\202\2\0\3\202"+
    "\1\0\2\202\1\0\2\202\1\u027f\1\366\24\202\2\0"+
    "\1\202\6\0\1\202\2\0\1\202\2\0\3\202\1\0"+
    "\2\202\1\0\3\202\1\366\11\202\1\u0280\12\202\2\0"+
    "\1\202\6\0\1\202\2\0\1\202\2\0\3\202\1\0"+
    "\2\202\1\0\3\202\1\366\3\202\1\u0281\20\202\2\0"+
    "\1\202\6\0\1\202\2\0\1\202\26\0\1\u0282\54\0"+
    "\1\u0283\65\0\1\u0284\45\0\1\u0285\32\0\3\202\1\0"+
    "\2\202\1\0\3\202\1\366\5\202\1\u0286\16\202\2\0"+
    "\1\202\6\0\1\202\2\0\1\202\2\0\3\202\1\0"+
    "\2\202\1\0\3\202\1\366\13\202\1\u0287\10\202\2\0"+
    "\1\202\6\0\1\202\2\0\1\202\2\0\3\202\1\0"+
    "\2\202\1\0\3\202\1\366\2\202\1\u0288\21\202\2\0"+
    "\1\202\6\0\1\202\2\0\1\202\2\0\3\202\1\0"+
    "\2\202\1\0\3\202\1\366\13\202\1\u0289\10\202\2\0"+
    "\1\202\6\0\1\202\2\0\1\202\17\0\1\u028a\61\0"+
    "\1\u028b\55\0\1\u028c\34\0\3\202\1\0\2\202\1\0"+
    "\3\202\1\366\2\202\1\u028d\21\202\2\0\1\202\6\0"+
    "\1\202\2\0\1\202\2\0\3\202\1\0\2\202\1\0"+
    "\3\202\1\366\20\202\1\u028e\3\202\2\0\1\202\6\0"+
    "\1\202\2\0\1\202\2\0\3\202\1\0\2\202\1\0"+
    "\3\202\1\366\20\202\1\u028f\3\202\2\0\1\202\6\0"+
    "\1\202\2\0\1\202\2\0\3\202\1\0\2\202\1\0"+
    "\3\202\1\366\22\202\1\u0290\1\202\2\0\1\202\6\0"+
    "\1\202\2\0\1\202\35\0\1\u0291\37\0\1\u0292\55\0"+
    "\1\u0293\40\0\3\202\1\0\2\202\1\0\3\202\1\366"+
    "\17\202\1\u0294\4\202\2\0\1\202\6\0\1\202\2\0"+
    "\1\202\2\0\3\202\1\0\2\202\1\0\3\202\1\366"+
    "\15\202\1\u0295\6\202\2\0\1\202\6\0\1\202\2\0"+
    "\1\202\2\0\3\202\1\0\2\202\1\0\3\202\1\366"+
    "\1\202\1\u0296\22\202\2\0\1\202\6\0\1\202\2\0"+
    "\1\202\32\0\1\u0297\57\0\1\u0298\23\0\3\202\1\0"+
    "\2\202\1\0\3\202\1\366\15\202\1\u0299\6\202\2\0"+
    "\1\202\6\0\1\202\2\0\1\202\2\0\3\202\1\0"+
    "\2\202\1\0\3\202\1\366\15\202\1\u029a\6\202\2\0"+
    "\1\202\6\0\1\202\2\0\1\202\2\0\3\202\1\0"+
    "\2\202\1\0\3\202\1\366\3\202\1\u029b\20\202\2\0"+
    "\1\202\6\0\1\202\2\0\1\202\2\0\3\202\1\0"+
    "\2\202\1\0\3\202\1\366\2\202\1\u029c\21\202\2\0"+
    "\1\202\6\0\1\202\2\0\1\202\2\0\3\202\1\0"+
    "\2\202\1\0\3\202\1\366\1\202\1\u029d\22\202\2\0"+
    "\1\202\6\0\1\202\2\0\1\202\2\0\3\202\1\0"+
    "\2\202\1\0\3\202\1\366\6\202\1\u029e\15\202\2\0"+
    "\1\202\6\0\1\202\2\0\1\202\2\0\3\202\1\0"+
    "\2\202\1\0\3\202\1\366\15\202\1\u029f\6\202\2\0"+
    "\1\202\6\0\1\202\2\0\1\202\2\0\3\202\1\0"+
    "\2\202\1\0\3\202\1\366\13\202\1\u02a0\10\202\2\0"+
    "\1\202\6\0\1\202\2\0\1\202\2\0\3\202\1\0"+
    "\2\202\1\0\3\202\1\366\12\202\1\u02a1\11\202\2\0"+
    "\1\202\6\0\1\202\2\0\1\202\2\0\3\202\1\0"+
    "\2\202\1\0\3\202\1\366\20\202\1\u02a2\3\202\2\0"+
    "\1\202\6\0\1\202\2\0\1\202";

  private static int [] zzUnpackTrans() {
    int [] result = new int[25484];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\105\0\1\11\3\1\1\11\5\1\1\11\5\1\1\11"+
    "\3\1\1\11\12\1\1\11\24\1\3\11\3\1\1\11"+
    "\14\1\4\11\3\1\1\11\1\1\1\11\1\1\3\11"+
    "\4\1\2\11\5\1\2\11\1\1\1\11\1\1\1\11"+
    "\2\1\1\11\3\1\2\11\3\1\1\11\7\1\1\11"+
    "\3\1\2\11\2\1\5\0\3\11\2\0\2\11\27\0"+
    "\1\11\11\0\2\1\1\0\12\1\3\0\1\1\10\0"+
    "\2\11\3\0\1\11\7\0\1\11\1\1\50\0\13\1"+
    "\2\0\2\1\1\0\2\11\4\0\2\11\60\0\12\1"+
    "\47\0\1\11\1\0\2\11\12\0\1\11\6\1\3\0"+
    "\1\11\1\0\3\11\2\0\2\11\3\0\1\11\1\0"+
    "\2\11\11\0\1\11\16\0\2\11\5\0\6\1\2\0"+
    "\1\11\4\0\2\11\1\0\2\11\2\0\1\11\11\0"+
    "\1\11\1\0\1\11\5\0\1\11\1\0\1\11\2\0"+
    "\6\1\1\11\6\0\1\11\3\0\2\11\1\0\1\11"+
    "\1\0\1\11\3\0\2\11\1\0\1\11\2\0\1\11"+
    "\5\1\3\0\1\11\1\0\2\11\2\0\1\11\3\0"+
    "\4\11\5\1\2\0\2\11\4\0\1\11\4\1\1\0"+
    "\1\11\3\0\1\11\4\1\2\0\1\11\1\0\4\1"+
    "\3\0\4\1\2\0\1\11\3\1\2\11\12\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[674];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */


  _XQueryLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _XQueryLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1822) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 64: 
          { pushState(_FLWOR_HEAD); yypushback(yylength()); yybegin(_FOR_CLAUSE);
          }
        case 131: break;
        case 44: 
          { popState(); return XQ_LOCAL_NAME;
          }
        case 132: break;
        case 108: 
          { yybegin(_SEP); return KW_PRESERVE;
          }
        case 133: break;
        case 98: 
          { pushState(_AS_OCC); yybegin(_EMPTY_BRACES); return KW_COMMENT;
          }
        case 134: break;
        case 24: 
          { pushState(_CLOSE_BRACE); yypushback(1); yybegin(_STRINGLITERAL);
          }
        case 135: break;
        case 26: 
          { yybegin(_AS_AorE_); return OP_STAR;
          }
        case 136: break;
        case 65: 
          { yybegin(_FOR_CLAUSE_VAR); return KW_FOR;
          }
        case 137: break;
        case 32: 
          { yypushback(1); popState();
          }
        case 138: break;
        case 15: 
          { pushState(_ATLIST_); yybegin(_URILITERAL); return OP_COMMA;
          }
        case 139: break;
        case 58: 
          { yybegin(_EXPR_SINGLE); return KW_IN;
          }
        case 140: break;
        case 12: 
          { yybegin(STR_START_APOS); return XQ_STR_START;
          }
        case 141: break;
        case 30: 
          { yybegin(_NCNAME); return OP_VARSTART;
          }
        case 142: break;
        case 3: 
          { return XQ_INTEGER_LITERAL;
          }
        case 143: break;
        case 116: 
          { pushState(_SEP); pushState(_ATLIST); yybegin(_URILITERAL); return KW_NAMESPACE;
          }
        case 144: break;
        case 52: 
          { return XQ_STR_ESCAPE_APOS;
          }
        case 145: break;
        case 103: 
          { pushState(_SEP); yybegin(_URILITERAL); return KW_BASE_URI;
          }
        case 146: break;
        case 8: 
          { popState(); return XQ_STR_END;
          }
        case 147: break;
        case 61: 
          { return XQ_DOUBLE_LITERAL;
          }
        case 148: break;
        case 19: 
          { popState(); return OP_PLUS;
          }
        case 149: break;
        case 43: 
          { popState(); return XQ_NCNAME;
          }
        case 150: break;
        case 60: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { yybegin(_QNAME_); return XQ_PREFIX_NAME;
          }
        case 151: break;
        case 17: 
          { yypushback(yylength()); pushState(_AS_OCC); yybegin(_QNAME);
          }
        case 152: break;
        case 78: 
          { yybegin(_ORDER_CLAUSE_BY); return KW_ORDER;
          }
        case 153: break;
        case 50: 
          { pushState(); return XQ_COMMENT_START;
          }
        case 154: break;
        case 130: 
          { pushState(_AS_OCC); pushState(_AS_PI); yybegin(_OPEN_BRACE); return KW_PROCESSING_INSTRUCTION;
          }
        case 155: break;
        case 88: 
          { yybegin(_ORDER_CLAUSE); return KW_STABLE;
          }
        case 156: break;
        case 18: 
          { popState(); yypushback(1);
          }
        case 157: break;
        case 31: 
          { yypushback(1); yybegin(_STRINGLITERAL);
          }
        case 158: break;
        case 112: 
          { pushState(_SEP); yybegin(NAMESPACEDECL); return KW_NAMESPACE;
          }
        case 159: break;
        case 111: 
          { pushState(_SEP); yybegin(NAMESPACEDECL); return KW_MODULE;
          }
        case 160: break;
        case 82: 
          { yybegin(_MODULE); return KW_MODULE;
          }
        case 161: break;
        case 80: 
          { yybegin(_ORDER_CLAUSE_MODIFIER_COLLATION); return KW_LEAST;
          }
        case 162: break;
        case 117: 
          { pushState(_AS_OCC); pushState(_AS_AorE); yybegin(_OPEN_BRACE); return KW_ATTRIBUTE;
          }
        case 163: break;
        case 115: 
          { pushState(_SEP); pushState(_ATLIST); yybegin(NAMESPACEDECL); return KW_NAMESPACE;
          }
        case 164: break;
        case 99: 
          { pushState(_CLOSE_BRACE); pushState(_AS_AorE); yybegin(_OPEN_BRACE); return KW_ELEMENT;
          }
        case 165: break;
        case 102: 
          { pushState(_SEP); pushState(_DECLARE_VARIABLE); yybegin(_PARAM); return KW_VARIABLE;
          }
        case 166: break;
        case 101: 
          { yybegin(DECLAREORDERING); return KW_ORDERING;
          }
        case 167: break;
        case 87: 
          { yybegin(_EXPR_SINGLE); return KW_RETURN;
          }
        case 168: break;
        case 85: 
          { yybegin(_IMPORT_MODULE); return KW_MODULE;
          }
        case 169: break;
        case 33: 
          { yybegin(_FOR_CLAUSE); return OP_COMMA;
          }
        case 170: break;
        case 11: 
          { yybegin(STR_START_QUOTE); return XQ_STR_START;
          }
        case 171: break;
        case 121: 
          { return KW_DESCENDING;
          }
        case 172: break;
        case 84: 
          { pushState(_SEP); pushState(_STRINGLITERAL); yybegin(_QNAME); return KW_OPTION;
          }
        case 173: break;
        case 48: 
          { pushState(); yybegin(EXPR_COMMENT); return XQ_COMMENT_START;
          }
        case 174: break;
        case 75: 
          { pushState(_FLWOR_BODY3); yypushback(yylength()); yybegin(_ORDER_CLAUSE);
          }
        case 175: break;
        case 45: 
          { popState(); return BAD_CHARACTER;
          }
        case 176: break;
        case 16: 
          { pushState(_AS); yybegin(_QNAME); return OP_VARSTART;
          }
        case 177: break;
        case 34: 
          { pushState(_FOR_CLAUSE_VAR_IN); pushState(_FOR_CLAUSE_VAR_POS); yypushback(1); yybegin(_PARAM);
          }
        case 178: break;
        case 119: 
          { yybegin(_URILITERAL); return KW_COLLATION;
          }
        case 179: break;
        case 110: 
          { yybegin(_SEP); return KW_UNORDERED;
          }
        case 180: break;
        case 56: 
          { popState(); return XQ_DECIMAL_LITERAL;
          }
        case 181: break;
        case 35: 
          { yybegin(_QNAME); return OP_VARSTART;
          }
        case 182: break;
        case 104: 
          { yybegin(_DECLARE_COPYNS_); return KW_PRESERVE;
          }
        case 183: break;
        case 94: 
          { yybegin(_DECLARE_DEFAULT_NAMESPACE); return KW_ELEMENT;
          }
        case 184: break;
        case 89: 
          { yybegin(_DECLARE); return KW_DECLARE;
          }
        case 185: break;
        case 76: 
          { pushState(_FLWOR_BODY2); yypushback(yylength()); yybegin(_WHERE_CLAUSE);
          }
        case 186: break;
        case 59: 
          { pushState(_ORDER_CLAUSE_LIST); pushState(_ORDER_CLAUSE_MODIFIER); yybegin(_EXPR_SINGLE); return KW_BY;
          }
        case 187: break;
        case 77: 
          { yybegin(_EXPR_SINGLE); return KW_WHERE;
          }
        case 188: break;
        case 86: 
          { yybegin(_IMPORT_SCHEMA); return KW_SCHEMA;
          }
        case 189: break;
        case 71: 
          { yybegin(_DECLARE_DEFAULT_ORDER); return KW_ORDER;
          }
        case 190: break;
        case 55: 
          { yybegin(_AS_); return KW_AS;
          }
        case 191: break;
        case 128: 
          { yybegin(_DECLARE_COPYNS); return KW_COPY_NAMESPACES;
          }
        case 192: break;
        case 105: 
          { yybegin(_DECLARE_DEFAULT_NAMESPACE); return KW_FUNCTION;
          }
        case 193: break;
        case 25: 
          { yypushback(yylength()); pushState(_AS_AorE_); yybegin(_QNAME);
          }
        case 194: break;
        case 20: 
          { popState(); return OP_QUESTION;
          }
        case 195: break;
        case 27: 
          { pushState(_AS_AorE__); yybegin(_QNAME); return OP_COMMA;
          }
        case 196: break;
        case 118: 
          { return KW_ASCENDING;
          }
        case 197: break;
        case 124: 
          { pushState(_AS_OCC); pushState(_AS_DN); yybegin(_OPEN_BRACE); return KW_DOCUMENT_NODE;
          }
        case 198: break;
        case 107: 
          { popState(); return KW_EXTERNAL;
          }
        case 199: break;
        case 97: 
          { pushState(_AS_OCC); pushState(_AS_AorE); yybegin(_OPEN_BRACE); return KW_ELEMENT;
          }
        case 200: break;
        case 100: 
          { pushState(_SEP); yybegin(_STRINGLITERAL); return KW_ENCODING;
          }
        case 201: break;
        case 57: 
          { yybegin(_FOR_CLAUSE_VAR_POS_); return KW_AT;
          }
        case 202: break;
        case 53: 
          { yybegin(_EXPR_SINGLE); return OP_ASSIGN;
          }
        case 203: break;
        case 62: 
          { popState(); return XQ_DOUBLE_LITERAL;
          }
        case 204: break;
        case 79: 
          { yybegin(_ORDER_CLAUSE_MODIFIER_EMPTY_); return KW_EMPTY;
          }
        case 205: break;
        case 39: 
          { yypushback(1); yybegin(_ORDER_CLAUSE_MODIFIER_COLLATION);
          }
        case 206: break;
        case 92: 
          { yybegin(_DECLARE_DEFAULT); return KW_DEFAULT;
          }
        case 207: break;
        case 83: 
          { yybegin(_IMPORT); return KW_IMPORT;
          }
        case 208: break;
        case 68: 
          { pushState(_AS_OCC); yybegin(_EMPTY_BRACES); return KW_TEXT;
          }
        case 209: break;
        case 36: 
          { pushState(_LET_CLAUSE_); pushState(_LET_CLAUSE_VAR); yybegin(_PARAM); return OP_COMMA;
          }
        case 210: break;
        case 14: 
          { yypushback(yylength()); popState();
          }
        case 211: break;
        case 63: 
          { pushState(_FLWOR_HEAD); yypushback(yylength()); yybegin(_LET_CLAUSE);
          }
        case 212: break;
        case 113: 
          { pushState(_SEP); yybegin(_URILITERAL); return KW_COLLATION;
          }
        case 213: break;
        case 69: 
          { yybegin(_EMPTY_BRACES); return KW_VOID;
          }
        case 214: break;
        case 109: 
          { yybegin(_ORDER_CLAUSE_MODIFIER_COLLATION); return KW_GREATEST;
          }
        case 215: break;
        case 106: 
          { yybegin(_SEP); return KW_GREATEST;
          }
        case 216: break;
        case 21: 
          { popState(); return OP_STAR;
          }
        case 217: break;
        case 7: 
          { return XQ_STR_CHAR;
          }
        case 218: break;
        case 51: 
          { return XQ_STR_ESCAPE_QUOTE;
          }
        case 219: break;
        case 95: 
          { yybegin(_IMPORT_SCHEMA_DEFAULT); return KW_DEFAULT;
          }
        case 220: break;
        case 13: 
          { yybegin(_URILITERAL); return OP_EQUALS;
          }
        case 221: break;
        case 47: 
          { return XQ_DECIMAL_LITERAL;
          }
        case 222: break;
        case 93: 
          { yybegin(_SEP); return KW_INHERIT;
          }
        case 223: break;
        case 41: 
          { popState(); return OP_RBRACE;
          }
        case 224: break;
        case 81: 
          { yybegin(_XQUERY); return KW_XQUERY;
          }
        case 225: break;
        case 129: 
          { pushState(_AS_OCC); pushState(_CLOSE_BRACE); pushState(_QNAME); yybegin(_OPEN_BRACE);  return KW_SCHEMA_ATTRIBUTE;
          }
        case 226: break;
        case 96: 
          { yybegin(_IMPORT_SCHEMA_DEFAULT_ELEMENT); return KW_ELEMENT;
          }
        case 227: break;
        case 42: 
          { popState(); return OP_LBRACE;
          }
        case 228: break;
        case 114: 
          { pushState(_SEP); yybegin(_URILITERAL); return KW_NAMESPACE;
          }
        case 229: break;
        case 74: 
          { yybegin(_SEP); return KW_STRIP;
          }
        case 230: break;
        case 67: 
          { pushState(_AS_OCC); yybegin(_EMPTY_BRACES); return KW_ITEM;
          }
        case 231: break;
        case 9: 
          { yybegin(YYINITIAL); return OP_SEPERATOR;
          }
        case 232: break;
        case 91: 
          { pushState(_XQUERY_VERSION); yybegin(_STRINGLITERAL); return KW_VERSION;
          }
        case 233: break;
        case 38: 
          { yypushback(1); yybegin(_ORDER_CLAUSE_MODIFIER_EMPTY);
          }
        case 234: break;
        case 120: 
          { yybegin(_SEP); return KW_NO_INHERIT;
          }
        case 235: break;
        case 22: 
          { yypushback(1); yybegin(_CLOSE_BRACE);
          }
        case 236: break;
        case 90: 
          { yybegin(_SEP); return KW_ORDERED;
          }
        case 237: break;
        case 1: 
          { yybegin(YYINITIAL); return BAD_CHARACTER;
          }
        case 238: break;
        case 29: 
          { popState(); return XQ_INTEGER_LITERAL;
          }
        case 239: break;
        case 127: 
          { pushState(_CLOSE_BRACE); pushState(_CLOSE_BRACE); pushState(_QNAME); yybegin(_OPEN_BRACE); return KW_SCHEMA_ELEMENT;
          }
        case 240: break;
        case 2: 
          { return WHITE_SPACE;
          }
        case 241: break;
        case 54: 
          { pushState(_ATLIST_); yybegin(_URILITERAL); return KW_AT;
          }
        case 242: break;
        case 126: 
          { pushState(_AS_OCC); pushState(_CLOSE_BRACE); pushState(_QNAME); yybegin(_OPEN_BRACE); return KW_SCHEMA_ELEMENT;
          }
        case 243: break;
        case 6: 
          { yybegin(_NAMESPACEDECL_); return XQ_LOCAL_NAME;
          }
        case 244: break;
        case 66: 
          { pushState(_LET_CLAUSE_); pushState(_LET_CLAUSE_VAR); yybegin(_PARAM); return KW_LET;
          }
        case 245: break;
        case 122: 
          { yybegin(_DECLARE_COPYNS_); return KW_NO_PRESERVE;
          }
        case 246: break;
        case 23: 
          { pushState(_CLOSE_BRACE); yypushback(yylength()); yybegin(_NCNAME);
          }
        case 247: break;
        case 72: 
          { yybegin(_DECLARE_DEFAULT_ORDER_EMPTY); return KW_EMPTY;
          }
        case 248: break;
        case 4: 
          { return BAD_WORD;
          }
        case 249: break;
        case 40: 
          { yybegin(_EMPTY_BRACES_); return OP_LBRACE;
          }
        case 250: break;
        case 125: 
          { yybegin(_PRESERVE_OR_STRIP); return KW_BOUNDARY_SPACE;
          }
        case 251: break;
        case 37: 
          { pushState(_ORDER_CLAUSE_LIST); pushState(_ORDER_CLAUSE_MODIFIER); yybegin(_EXPR_SINGLE); return OP_COMMA;
          }
        case 252: break;
        case 123: 
          { yybegin(_PRESERVE_OR_STRIP); return KW_CONSTRUCTION;
          }
        case 253: break;
        case 28: 
          { yybegin(_CLOSE_BRACE); return OP_QUESTION;
          }
        case 254: break;
        case 46: 
          { yybegin(_QNAME_LOCAL); return OP_COLON;
          }
        case 255: break;
        case 70: 
          { pushState(_AS_OCC); yybegin(_EMPTY_BRACES); return KW_NODE;
          }
        case 256: break;
        case 49: 
          { popState(); return XQ_COMMENT_END;
          }
        case 257: break;
        case 5: 
          { return XQ_COMMENT_CHAR;
          }
        case 258: break;
        case 73: 
          { yybegin(_SEP); return KW_LEAST;
          }
        case 259: break;
        case 10: 
          { yybegin(_DECLARE_COPYNS__); return OP_COMMA;
          }
        case 260: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
